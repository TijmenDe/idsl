/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.validation

import org.xtext.example.mydsl.iDSL.Image
import org.xtext.example.mydsl.iDSL.IDSLPackage
import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.iDSL.InfographicElementType
import org.xtext.example.mydsl.iDSL.Box
import org.xtext.example.mydsl.iDSL.Head
import org.xtext.example.mydsl.iDSL.Foot

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class IDSLValidator extends AbstractIDSLValidator {
	
	@Check
	def void checkImageSRC(Image img) {
		val ImgSuffix = img.src.substring(img.src.length-4, img.src.length-1);
		if(ImgSuffix != "png" && ImgSuffix != "gif" && ImgSuffix != "jpg" && ImgSuffix != "PNG" && ImgSuffix != "GIF" && ImgSuffix != "JPG") {
			error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.IMAGE__SRC)
		}
	}
	
	@Check
	def void CheckBgImageURL(InfographicElementType type) {
		val ImgSuffix = type.bgimage.substring(type.bgimage.length-4, type.bgimage.length-1);
		if(ImgSuffix != "png" && ImgSuffix != "gif" && ImgSuffix != "jpg" && ImgSuffix != "PNG" && ImgSuffix != "GIF" && ImgSuffix != "JPG") {
			error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE)
		}
	}
	
	@Check
	def void CheckBgPatternURL(InfographicElementType type) {
		if(type.bgpattern.substring(0,7) != "pattern") {
			val PatternSuffix = type.bgpattern.substring(type.bgpattern.length-4, type.bgpattern.length-1);
			if(PatternSuffix != "png" && PatternSuffix != "gif" && PatternSuffix != "jpg" && PatternSuffix != "PNG" && PatternSuffix != "GIF" && PatternSuffix != "JPG") {
				error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN)
			}
		}
	}
	
	@Check
	def void CheckBoxImageURL(Box box) {
		val ImgSuffix = box.bgimage.substring(box.bgimage.length-4, box.bgimage.length-1);
		if(ImgSuffix != "png" && ImgSuffix != "gif" && ImgSuffix != "jpg" && ImgSuffix != "PNG" && ImgSuffix != "GIF" && ImgSuffix != "JPG") {
			error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.BOX__BGIMAGE)
		}
	}
	
	@Check
	def void CheckBoxPatternURL(Box box) {
		if(box.bgpattern.substring(0,7) != "pattern") {
			val PatternSuffix = box.bgpattern.substring(box.bgpattern.length-4, box.bgpattern.length-1);
			if(PatternSuffix != "png" && PatternSuffix != "gif" && PatternSuffix != "jpg" && PatternSuffix != "PNG" && PatternSuffix != "GIF" && PatternSuffix != "JPG") {
				error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.BOX__BGPATTERN)
			}
		}
	}
	
	@Check
	def void CheckHeadImageURL(Head head) {
		val ImgSuffix = head.bgimage.substring(head.bgimage.length-4, head.bgimage.length-1);
		if(ImgSuffix != "png" && ImgSuffix != "gif" && ImgSuffix != "jpg" && ImgSuffix != "PNG" && ImgSuffix != "GIF" && ImgSuffix != "JPG") {
			error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.HEAD__BGIMAGE)
		}
	}
	
	@Check
	def void CheckHeadPatternURL(Head head) {
		if(head.bgpattern.substring(0,7) != "pattern") {
			val PatternSuffix = head.bgpattern.substring(head.bgpattern.length-4, head.bgpattern.length-1);
			if(PatternSuffix != "png" && PatternSuffix != "gif" && PatternSuffix != "jpg" && PatternSuffix != "PNG" && PatternSuffix != "GIF" && PatternSuffix != "JPG") {
				error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.HEAD__BGPATTERN)
			}
		}
	}
	
	@Check
	def void CheckFootImageURL(Foot foot) {
		val ImgSuffix = foot.bgimage.substring(foot.bgimage.length-4, foot.bgimage.length-1);
		if(ImgSuffix != "png" && ImgSuffix != "gif" && ImgSuffix != "jpg" && ImgSuffix != "PNG" && ImgSuffix != "GIF" && ImgSuffix != "JPG") {
			error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.FOOT__BGIMAGE)
		}
	}
	
	@Check
	def void CheckFootPatternURL(Foot foot) {
		if(foot.bgpattern.substring(0,7) != "pattern") {
			val PatternSuffix = foot.bgpattern.substring(foot.bgpattern.length-4, foot.bgpattern.length-1);
			if(PatternSuffix != "png" && PatternSuffix != "gif" && PatternSuffix != "jpg" && PatternSuffix != "PNG" && PatternSuffix != "GIF" && PatternSuffix != "JPG") {
				error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.FOOT__BGPATTERN)
			}
		}
	}
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					IDSLPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
	
}
