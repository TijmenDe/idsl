/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.mydsl.iDSL.Box;
import org.xtext.example.mydsl.iDSL.Foot;
import org.xtext.example.mydsl.iDSL.Head;
import org.xtext.example.mydsl.iDSL.IDSLPackage;
import org.xtext.example.mydsl.iDSL.Image;
import org.xtext.example.mydsl.iDSL.InfographicElementType;
import org.xtext.example.mydsl.validation.AbstractIDSLValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class IDSLValidator extends AbstractIDSLValidator {
  @Check
  public void checkImageSRC(final Image img) {
    String _src = img.getSrc();
    int _length = img.getSrc().length();
    int _minus = (_length - 4);
    int _length_1 = img.getSrc().length();
    int _minus_1 = (_length_1 - 1);
    final String ImgSuffix = _src.substring(_minus, _minus_1);
    if (((((((!Objects.equal(ImgSuffix, "png")) && (!Objects.equal(ImgSuffix, "gif"))) && (!Objects.equal(ImgSuffix, "jpg"))) && (!Objects.equal(ImgSuffix, "PNG"))) && (!Objects.equal(ImgSuffix, "GIF"))) && (!Objects.equal(ImgSuffix, "JPG")))) {
      this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.IMAGE__SRC);
    }
  }
  
  @Check
  public void CheckBgImageURL(final InfographicElementType type) {
    String _bgimage = type.getBgimage();
    int _length = type.getBgimage().length();
    int _minus = (_length - 4);
    int _length_1 = type.getBgimage().length();
    int _minus_1 = (_length_1 - 1);
    final String ImgSuffix = _bgimage.substring(_minus, _minus_1);
    if (((((((!Objects.equal(ImgSuffix, "png")) && (!Objects.equal(ImgSuffix, "gif"))) && (!Objects.equal(ImgSuffix, "jpg"))) && (!Objects.equal(ImgSuffix, "PNG"))) && (!Objects.equal(ImgSuffix, "GIF"))) && (!Objects.equal(ImgSuffix, "JPG")))) {
      this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE);
    }
  }
  
  @Check
  public void CheckBgPatternURL(final InfographicElementType type) {
    String _substring = type.getBgpattern().substring(0, 7);
    boolean _notEquals = (!Objects.equal(_substring, "pattern"));
    if (_notEquals) {
      String _bgpattern = type.getBgpattern();
      int _length = type.getBgpattern().length();
      int _minus = (_length - 4);
      int _length_1 = type.getBgpattern().length();
      int _minus_1 = (_length_1 - 1);
      final String PatternSuffix = _bgpattern.substring(_minus, _minus_1);
      if (((((((!Objects.equal(PatternSuffix, "png")) && (!Objects.equal(PatternSuffix, "gif"))) && (!Objects.equal(PatternSuffix, "jpg"))) && (!Objects.equal(PatternSuffix, "PNG"))) && (!Objects.equal(PatternSuffix, "GIF"))) && (!Objects.equal(PatternSuffix, "JPG")))) {
        this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN);
      }
    }
  }
  
  @Check
  public void CheckBoxImageURL(final Box box) {
    String _bgimage = box.getBgimage();
    int _length = box.getBgimage().length();
    int _minus = (_length - 4);
    int _length_1 = box.getBgimage().length();
    int _minus_1 = (_length_1 - 1);
    final String ImgSuffix = _bgimage.substring(_minus, _minus_1);
    if (((((((!Objects.equal(ImgSuffix, "png")) && (!Objects.equal(ImgSuffix, "gif"))) && (!Objects.equal(ImgSuffix, "jpg"))) && (!Objects.equal(ImgSuffix, "PNG"))) && (!Objects.equal(ImgSuffix, "GIF"))) && (!Objects.equal(ImgSuffix, "JPG")))) {
      this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.BOX__BGIMAGE);
    }
  }
  
  @Check
  public void CheckBoxPatternURL(final Box box) {
    String _substring = box.getBgpattern().substring(0, 7);
    boolean _notEquals = (!Objects.equal(_substring, "pattern"));
    if (_notEquals) {
      String _bgpattern = box.getBgpattern();
      int _length = box.getBgpattern().length();
      int _minus = (_length - 4);
      int _length_1 = box.getBgpattern().length();
      int _minus_1 = (_length_1 - 1);
      final String PatternSuffix = _bgpattern.substring(_minus, _minus_1);
      if (((((((!Objects.equal(PatternSuffix, "png")) && (!Objects.equal(PatternSuffix, "gif"))) && (!Objects.equal(PatternSuffix, "jpg"))) && (!Objects.equal(PatternSuffix, "PNG"))) && (!Objects.equal(PatternSuffix, "GIF"))) && (!Objects.equal(PatternSuffix, "JPG")))) {
        this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.BOX__BGPATTERN);
      }
    }
  }
  
  @Check
  public void CheckHeadImageURL(final Head head) {
    String _bgimage = head.getBgimage();
    int _length = head.getBgimage().length();
    int _minus = (_length - 4);
    int _length_1 = head.getBgimage().length();
    int _minus_1 = (_length_1 - 1);
    final String ImgSuffix = _bgimage.substring(_minus, _minus_1);
    if (((((((!Objects.equal(ImgSuffix, "png")) && (!Objects.equal(ImgSuffix, "gif"))) && (!Objects.equal(ImgSuffix, "jpg"))) && (!Objects.equal(ImgSuffix, "PNG"))) && (!Objects.equal(ImgSuffix, "GIF"))) && (!Objects.equal(ImgSuffix, "JPG")))) {
      this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.HEAD__BGIMAGE);
    }
  }
  
  @Check
  public void CheckHeadPatternURL(final Head head) {
    String _substring = head.getBgpattern().substring(0, 7);
    boolean _notEquals = (!Objects.equal(_substring, "pattern"));
    if (_notEquals) {
      String _bgpattern = head.getBgpattern();
      int _length = head.getBgpattern().length();
      int _minus = (_length - 4);
      int _length_1 = head.getBgpattern().length();
      int _minus_1 = (_length_1 - 1);
      final String PatternSuffix = _bgpattern.substring(_minus, _minus_1);
      if (((((((!Objects.equal(PatternSuffix, "png")) && (!Objects.equal(PatternSuffix, "gif"))) && (!Objects.equal(PatternSuffix, "jpg"))) && (!Objects.equal(PatternSuffix, "PNG"))) && (!Objects.equal(PatternSuffix, "GIF"))) && (!Objects.equal(PatternSuffix, "JPG")))) {
        this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.HEAD__BGPATTERN);
      }
    }
  }
  
  @Check
  public void CheckFootImageURL(final Foot foot) {
    String _bgimage = foot.getBgimage();
    int _length = foot.getBgimage().length();
    int _minus = (_length - 4);
    int _length_1 = foot.getBgimage().length();
    int _minus_1 = (_length_1 - 1);
    final String ImgSuffix = _bgimage.substring(_minus, _minus_1);
    if (((((((!Objects.equal(ImgSuffix, "png")) && (!Objects.equal(ImgSuffix, "gif"))) && (!Objects.equal(ImgSuffix, "jpg"))) && (!Objects.equal(ImgSuffix, "PNG"))) && (!Objects.equal(ImgSuffix, "GIF"))) && (!Objects.equal(ImgSuffix, "JPG")))) {
      this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.FOOT__BGIMAGE);
    }
  }
  
  @Check
  public void CheckFootPatternURL(final Foot foot) {
    String _substring = foot.getBgpattern().substring(0, 7);
    boolean _notEquals = (!Objects.equal(_substring, "pattern"));
    if (_notEquals) {
      String _bgpattern = foot.getBgpattern();
      int _length = foot.getBgpattern().length();
      int _minus = (_length - 4);
      int _length_1 = foot.getBgpattern().length();
      int _minus_1 = (_length_1 - 1);
      final String PatternSuffix = _bgpattern.substring(_minus, _minus_1);
      if (((((((!Objects.equal(PatternSuffix, "png")) && (!Objects.equal(PatternSuffix, "gif"))) && (!Objects.equal(PatternSuffix, "jpg"))) && (!Objects.equal(PatternSuffix, "PNG"))) && (!Objects.equal(PatternSuffix, "GIF"))) && (!Objects.equal(PatternSuffix, "JPG")))) {
        this.error("Image src should end on .png / .jpg / .gif", IDSLPackage.Literals.FOOT__BGPATTERN);
      }
    }
  }
}
