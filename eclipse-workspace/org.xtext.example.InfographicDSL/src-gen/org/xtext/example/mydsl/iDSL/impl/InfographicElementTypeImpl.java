/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.iDSL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.iDSL.Barchart;
import org.xtext.example.mydsl.iDSL.Box;
import org.xtext.example.mydsl.iDSL.Color;
import org.xtext.example.mydsl.iDSL.Foot;
import org.xtext.example.mydsl.iDSL.Head;
import org.xtext.example.mydsl.iDSL.IDSLPackage;
import org.xtext.example.mydsl.iDSL.Image;
import org.xtext.example.mydsl.iDSL.InfographicElementType;
import org.xtext.example.mydsl.iDSL.Picturegraph;
import org.xtext.example.mydsl.iDSL.Piechart;
import org.xtext.example.mydsl.iDSL.Text;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Infographic Element Type</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getBgcolor <em>Bgcolor</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getBgpattern <em>Bgpattern</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getBgimage <em>Bgimage</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getBgsize <em>Bgsize</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getHead <em>Head</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getBoxes <em>Boxes</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getTexts <em>Texts</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getImages <em>Images</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getPiecharts <em>Piecharts</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getBarcharts <em>Barcharts</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getPicturegraphs <em>Picturegraphs</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.iDSL.impl.InfographicElementTypeImpl#getFoot <em>Foot</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InfographicElementTypeImpl extends InfographicImpl implements InfographicElementType
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getBgcolor() <em>Bgcolor</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgcolor()
   * @generated
   * @ordered
   */
  protected Color bgcolor;

  /**
   * The default value of the '{@link #getBgpattern() <em>Bgpattern</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgpattern()
   * @generated
   * @ordered
   */
  protected static final String BGPATTERN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBgpattern() <em>Bgpattern</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgpattern()
   * @generated
   * @ordered
   */
  protected String bgpattern = BGPATTERN_EDEFAULT;

  /**
   * The default value of the '{@link #getBgimage() <em>Bgimage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgimage()
   * @generated
   * @ordered
   */
  protected static final String BGIMAGE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBgimage() <em>Bgimage</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgimage()
   * @generated
   * @ordered
   */
  protected String bgimage = BGIMAGE_EDEFAULT;

  /**
   * The default value of the '{@link #getBgsize() <em>Bgsize</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgsize()
   * @generated
   * @ordered
   */
  protected static final String BGSIZE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBgsize() <em>Bgsize</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBgsize()
   * @generated
   * @ordered
   */
  protected String bgsize = BGSIZE_EDEFAULT;

  /**
   * The cached value of the '{@link #getHead() <em>Head</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHead()
   * @generated
   * @ordered
   */
  protected Head head;

  /**
   * The cached value of the '{@link #getBoxes() <em>Boxes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoxes()
   * @generated
   * @ordered
   */
  protected EList<Box> boxes;

  /**
   * The cached value of the '{@link #getTexts() <em>Texts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexts()
   * @generated
   * @ordered
   */
  protected EList<Text> texts;

  /**
   * The cached value of the '{@link #getImages() <em>Images</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImages()
   * @generated
   * @ordered
   */
  protected EList<Image> images;

  /**
   * The cached value of the '{@link #getPiecharts() <em>Piecharts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPiecharts()
   * @generated
   * @ordered
   */
  protected EList<Piechart> piecharts;

  /**
   * The cached value of the '{@link #getBarcharts() <em>Barcharts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBarcharts()
   * @generated
   * @ordered
   */
  protected EList<Barchart> barcharts;

  /**
   * The cached value of the '{@link #getPicturegraphs() <em>Picturegraphs</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPicturegraphs()
   * @generated
   * @ordered
   */
  protected EList<Picturegraph> picturegraphs;

  /**
   * The cached value of the '{@link #getFoot() <em>Foot</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFoot()
   * @generated
   * @ordered
   */
  protected Foot foot;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InfographicElementTypeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return IDSLPackage.Literals.INFOGRAPHIC_ELEMENT_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Color getBgcolor()
  {
    return bgcolor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBgcolor(Color newBgcolor, NotificationChain msgs)
  {
    Color oldBgcolor = bgcolor;
    bgcolor = newBgcolor;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR, oldBgcolor, newBgcolor);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBgcolor(Color newBgcolor)
  {
    if (newBgcolor != bgcolor)
    {
      NotificationChain msgs = null;
      if (bgcolor != null)
        msgs = ((InternalEObject)bgcolor).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR, null, msgs);
      if (newBgcolor != null)
        msgs = ((InternalEObject)newBgcolor).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR, null, msgs);
      msgs = basicSetBgcolor(newBgcolor, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR, newBgcolor, newBgcolor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBgpattern()
  {
    return bgpattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBgpattern(String newBgpattern)
  {
    String oldBgpattern = bgpattern;
    bgpattern = newBgpattern;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN, oldBgpattern, bgpattern));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBgimage()
  {
    return bgimage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBgimage(String newBgimage)
  {
    String oldBgimage = bgimage;
    bgimage = newBgimage;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE, oldBgimage, bgimage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBgsize()
  {
    return bgsize;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBgsize(String newBgsize)
  {
    String oldBgsize = bgsize;
    bgsize = newBgsize;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGSIZE, oldBgsize, bgsize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Head getHead()
  {
    return head;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetHead(Head newHead, NotificationChain msgs)
  {
    Head oldHead = head;
    head = newHead;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD, oldHead, newHead);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHead(Head newHead)
  {
    if (newHead != head)
    {
      NotificationChain msgs = null;
      if (head != null)
        msgs = ((InternalEObject)head).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD, null, msgs);
      if (newHead != null)
        msgs = ((InternalEObject)newHead).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD, null, msgs);
      msgs = basicSetHead(newHead, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD, newHead, newHead));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Box> getBoxes()
  {
    if (boxes == null)
    {
      boxes = new EObjectContainmentEList<Box>(Box.class, this, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BOXES);
    }
    return boxes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Text> getTexts()
  {
    if (texts == null)
    {
      texts = new EObjectContainmentEList<Text>(Text.class, this, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TEXTS);
    }
    return texts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Image> getImages()
  {
    if (images == null)
    {
      images = new EObjectContainmentEList<Image>(Image.class, this, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__IMAGES);
    }
    return images;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Piechart> getPiecharts()
  {
    if (piecharts == null)
    {
      piecharts = new EObjectContainmentEList<Piechart>(Piechart.class, this, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS);
    }
    return piecharts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Barchart> getBarcharts()
  {
    if (barcharts == null)
    {
      barcharts = new EObjectContainmentEList<Barchart>(Barchart.class, this, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS);
    }
    return barcharts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Picturegraph> getPicturegraphs()
  {
    if (picturegraphs == null)
    {
      picturegraphs = new EObjectContainmentEList<Picturegraph>(Picturegraph.class, this, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS);
    }
    return picturegraphs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Foot getFoot()
  {
    return foot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFoot(Foot newFoot, NotificationChain msgs)
  {
    Foot oldFoot = foot;
    foot = newFoot;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT, oldFoot, newFoot);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFoot(Foot newFoot)
  {
    if (newFoot != foot)
    {
      NotificationChain msgs = null;
      if (foot != null)
        msgs = ((InternalEObject)foot).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT, null, msgs);
      if (newFoot != null)
        msgs = ((InternalEObject)newFoot).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT, null, msgs);
      msgs = basicSetFoot(newFoot, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT, newFoot, newFoot));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR:
        return basicSetBgcolor(null, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD:
        return basicSetHead(null, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BOXES:
        return ((InternalEList<?>)getBoxes()).basicRemove(otherEnd, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TEXTS:
        return ((InternalEList<?>)getTexts()).basicRemove(otherEnd, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__IMAGES:
        return ((InternalEList<?>)getImages()).basicRemove(otherEnd, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS:
        return ((InternalEList<?>)getPiecharts()).basicRemove(otherEnd, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS:
        return ((InternalEList<?>)getBarcharts()).basicRemove(otherEnd, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS:
        return ((InternalEList<?>)getPicturegraphs()).basicRemove(otherEnd, msgs);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT:
        return basicSetFoot(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TYPE:
        return getType();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR:
        return getBgcolor();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN:
        return getBgpattern();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE:
        return getBgimage();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGSIZE:
        return getBgsize();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD:
        return getHead();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BOXES:
        return getBoxes();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TEXTS:
        return getTexts();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__IMAGES:
        return getImages();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS:
        return getPiecharts();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS:
        return getBarcharts();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS:
        return getPicturegraphs();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT:
        return getFoot();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TYPE:
        setType((String)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR:
        setBgcolor((Color)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN:
        setBgpattern((String)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE:
        setBgimage((String)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGSIZE:
        setBgsize((String)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD:
        setHead((Head)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BOXES:
        getBoxes().clear();
        getBoxes().addAll((Collection<? extends Box>)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TEXTS:
        getTexts().clear();
        getTexts().addAll((Collection<? extends Text>)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__IMAGES:
        getImages().clear();
        getImages().addAll((Collection<? extends Image>)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS:
        getPiecharts().clear();
        getPiecharts().addAll((Collection<? extends Piechart>)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS:
        getBarcharts().clear();
        getBarcharts().addAll((Collection<? extends Barchart>)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS:
        getPicturegraphs().clear();
        getPicturegraphs().addAll((Collection<? extends Picturegraph>)newValue);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT:
        setFoot((Foot)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR:
        setBgcolor((Color)null);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN:
        setBgpattern(BGPATTERN_EDEFAULT);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE:
        setBgimage(BGIMAGE_EDEFAULT);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGSIZE:
        setBgsize(BGSIZE_EDEFAULT);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD:
        setHead((Head)null);
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BOXES:
        getBoxes().clear();
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TEXTS:
        getTexts().clear();
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__IMAGES:
        getImages().clear();
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS:
        getPiecharts().clear();
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS:
        getBarcharts().clear();
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS:
        getPicturegraphs().clear();
        return;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT:
        setFoot((Foot)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR:
        return bgcolor != null;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN:
        return BGPATTERN_EDEFAULT == null ? bgpattern != null : !BGPATTERN_EDEFAULT.equals(bgpattern);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE:
        return BGIMAGE_EDEFAULT == null ? bgimage != null : !BGIMAGE_EDEFAULT.equals(bgimage);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BGSIZE:
        return BGSIZE_EDEFAULT == null ? bgsize != null : !BGSIZE_EDEFAULT.equals(bgsize);
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__HEAD:
        return head != null;
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BOXES:
        return boxes != null && !boxes.isEmpty();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__TEXTS:
        return texts != null && !texts.isEmpty();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__IMAGES:
        return images != null && !images.isEmpty();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS:
        return piecharts != null && !piecharts.isEmpty();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS:
        return barcharts != null && !barcharts.isEmpty();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS:
        return picturegraphs != null && !picturegraphs.isEmpty();
      case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE__FOOT:
        return foot != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", bgpattern: ");
    result.append(bgpattern);
    result.append(", bgimage: ");
    result.append(bgimage);
    result.append(", bgsize: ");
    result.append(bgsize);
    result.append(')');
    return result.toString();
  }

} //InfographicElementTypeImpl
