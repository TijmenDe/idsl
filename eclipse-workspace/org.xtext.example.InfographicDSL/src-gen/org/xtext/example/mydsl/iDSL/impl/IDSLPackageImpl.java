/**
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.iDSL.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.xtext.example.mydsl.iDSL.AlignPossibilities;
import org.xtext.example.mydsl.iDSL.BarType;
import org.xtext.example.mydsl.iDSL.Barchart;
import org.xtext.example.mydsl.iDSL.Box;
import org.xtext.example.mydsl.iDSL.Color;
import org.xtext.example.mydsl.iDSL.Color_Basic;
import org.xtext.example.mydsl.iDSL.Font_Family;
import org.xtext.example.mydsl.iDSL.Font_Weight;
import org.xtext.example.mydsl.iDSL.Foot;
import org.xtext.example.mydsl.iDSL.Head;
import org.xtext.example.mydsl.iDSL.IDSLFactory;
import org.xtext.example.mydsl.iDSL.IDSLPackage;
import org.xtext.example.mydsl.iDSL.Image;
import org.xtext.example.mydsl.iDSL.Infographic;
import org.xtext.example.mydsl.iDSL.InfographicElementType;
import org.xtext.example.mydsl.iDSL.LegendStyle;
import org.xtext.example.mydsl.iDSL.Logo;
import org.xtext.example.mydsl.iDSL.Picturegraph;
import org.xtext.example.mydsl.iDSL.PicturegraphType;
import org.xtext.example.mydsl.iDSL.PieType;
import org.xtext.example.mydsl.iDSL.Piechart;
import org.xtext.example.mydsl.iDSL.ShowOptionsOff;
import org.xtext.example.mydsl.iDSL.Text;
import org.xtext.example.mydsl.iDSL.Title;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class IDSLPackageImpl extends EPackageImpl implements IDSLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infographicEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass infographicElementTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass headEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass titleEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass logoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass boxEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass textEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass imageEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass piechartEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass barchartEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass picturegraphEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass footEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fontEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum color_BasicEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum font_WeightEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum font_FamilyEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum alignPossibilitiesEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum legendStyleEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum showOptionsOffEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum pieTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum barTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum picturegraphTypeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.xtext.example.mydsl.iDSL.IDSLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private IDSLPackageImpl()
  {
    super(eNS_URI, IDSLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link IDSLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static IDSLPackage init()
  {
    if (isInited) return (IDSLPackage)EPackage.Registry.INSTANCE.getEPackage(IDSLPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredIDSLPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    IDSLPackageImpl theIDSLPackage = registeredIDSLPackage instanceof IDSLPackageImpl ? (IDSLPackageImpl)registeredIDSLPackage : new IDSLPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theIDSLPackage.createPackageContents();

    // Initialize created meta-data
    theIDSLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theIDSLPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(IDSLPackage.eNS_URI, theIDSLPackage);
    return theIDSLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInfographic()
  {
    return infographicEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getInfographicElementType()
  {
    return infographicElementTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInfographicElementType_Type()
  {
    return (EAttribute)infographicElementTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Bgcolor()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInfographicElementType_Bgpattern()
  {
    return (EAttribute)infographicElementTypeEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInfographicElementType_Bgimage()
  {
    return (EAttribute)infographicElementTypeEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getInfographicElementType_Bgsize()
  {
    return (EAttribute)infographicElementTypeEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Head()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Boxes()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Texts()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Images()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Piecharts()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Barcharts()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Picturegraphs()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getInfographicElementType_Foot()
  {
    return (EReference)infographicElementTypeEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getHead()
  {
    return headEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHead_Name()
  {
    return (EAttribute)headEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHead_Bgcolor()
  {
    return (EReference)headEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHead_Bgpattern()
  {
    return (EAttribute)headEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHead_Bgimage()
  {
    return (EAttribute)headEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHead_Size()
  {
    return (EAttribute)headEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getHead_Position()
  {
    return (EAttribute)headEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHead_Logo()
  {
    return (EReference)headEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHead_Title()
  {
    return (EReference)headEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getHead_Subtitle()
  {
    return (EReference)headEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTitle()
  {
    return titleEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTitle_Align()
  {
    return (EAttribute)titleEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTitle_Color()
  {
    return (EReference)titleEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTitle_Font()
  {
    return (EReference)titleEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTitle_Position()
  {
    return (EAttribute)titleEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTitle_Maxwidth()
  {
    return (EAttribute)titleEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTitle_Value()
  {
    return (EAttribute)titleEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLogo()
  {
    return logoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLogo_Size()
  {
    return (EAttribute)logoEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLogo_Position()
  {
    return (EAttribute)logoEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBox()
  {
    return boxEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBox_Name()
  {
    return (EAttribute)boxEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBox_Bgcolor()
  {
    return (EReference)boxEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBox_Bgpattern()
  {
    return (EAttribute)boxEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBox_Bgimage()
  {
    return (EAttribute)boxEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBox_Size()
  {
    return (EAttribute)boxEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBox_Position()
  {
    return (EAttribute)boxEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getText()
  {
    return textEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Name()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Align()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getText_Color()
  {
    return (EReference)textEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getText_Font()
  {
    return (EReference)textEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Lineheight()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Position()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Maxwidth()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getText_Value()
  {
    return (EAttribute)textEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getImage()
  {
    return imageEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImage_Name()
  {
    return (EAttribute)imageEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImage_Position()
  {
    return (EAttribute)imageEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImage_Size()
  {
    return (EAttribute)imageEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getImage_Src()
  {
    return (EAttribute)imageEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPiechart()
  {
    return piechartEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Name()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPiechart_Color()
  {
    return (EReference)piechartEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Colors()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Piedata()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Legendstyle()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Padding()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Position()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Showlegend()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Showtitle()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Showpercentage()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Size()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Title()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPiechart_Type()
  {
    return (EAttribute)piechartEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getBarchart()
  {
    return barchartEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Name()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getBarchart_Color()
  {
    return (EReference)barchartEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Colors()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Bardata()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Gridscale()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Legendstyle()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Padding()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Position()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Showgrid()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Showlegend()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Showtitle()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Size()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Title()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(12);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getBarchart_Type()
  {
    return (EAttribute)barchartEClass.getEStructuralFeatures().get(13);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPicturegraph()
  {
    return picturegraphEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Name()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPicturegraph_Color()
  {
    return (EReference)picturegraphEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Colors()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Picturegraphdata()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Label()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Padding()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Position()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Showlegend()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Showtitle()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Size()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Title()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPicturegraph_Type()
  {
    return (EAttribute)picturegraphEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFoot()
  {
    return footEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFoot_Name()
  {
    return (EAttribute)footEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFoot_Bgcolor()
  {
    return (EReference)footEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFoot_Bgpattern()
  {
    return (EAttribute)footEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFoot_Bgimage()
  {
    return (EAttribute)footEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFoot_Position()
  {
    return (EAttribute)footEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFoot_Size()
  {
    return (EAttribute)footEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFoot_Text()
  {
    return (EAttribute)footEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getColor()
  {
    return colorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getColor_Color()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFONT()
  {
    return fontEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFONT_Weight()
  {
    return (EAttribute)fontEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getFONT_Family()
  {
    return (EAttribute)fontEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getColor_Basic()
  {
    return color_BasicEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getFont_Weight()
  {
    return font_WeightEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getFont_Family()
  {
    return font_FamilyEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getAlignPossibilities()
  {
    return alignPossibilitiesEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getLegendStyle()
  {
    return legendStyleEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getShowOptionsOff()
  {
    return showOptionsOffEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPieType()
  {
    return pieTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getBarType()
  {
    return barTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getPicturegraphType()
  {
    return picturegraphTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IDSLFactory getIDSLFactory()
  {
    return (IDSLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    infographicEClass = createEClass(INFOGRAPHIC);

    infographicElementTypeEClass = createEClass(INFOGRAPHIC_ELEMENT_TYPE);
    createEAttribute(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__TYPE);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__BGCOLOR);
    createEAttribute(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__BGPATTERN);
    createEAttribute(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__BGIMAGE);
    createEAttribute(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__BGSIZE);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__HEAD);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__BOXES);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__TEXTS);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__IMAGES);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__PIECHARTS);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__BARCHARTS);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__PICTUREGRAPHS);
    createEReference(infographicElementTypeEClass, INFOGRAPHIC_ELEMENT_TYPE__FOOT);

    headEClass = createEClass(HEAD);
    createEAttribute(headEClass, HEAD__NAME);
    createEReference(headEClass, HEAD__BGCOLOR);
    createEAttribute(headEClass, HEAD__BGPATTERN);
    createEAttribute(headEClass, HEAD__BGIMAGE);
    createEAttribute(headEClass, HEAD__SIZE);
    createEAttribute(headEClass, HEAD__POSITION);
    createEReference(headEClass, HEAD__LOGO);
    createEReference(headEClass, HEAD__TITLE);
    createEReference(headEClass, HEAD__SUBTITLE);

    titleEClass = createEClass(TITLE);
    createEAttribute(titleEClass, TITLE__ALIGN);
    createEReference(titleEClass, TITLE__COLOR);
    createEReference(titleEClass, TITLE__FONT);
    createEAttribute(titleEClass, TITLE__POSITION);
    createEAttribute(titleEClass, TITLE__MAXWIDTH);
    createEAttribute(titleEClass, TITLE__VALUE);

    logoEClass = createEClass(LOGO);
    createEAttribute(logoEClass, LOGO__SIZE);
    createEAttribute(logoEClass, LOGO__POSITION);

    boxEClass = createEClass(BOX);
    createEAttribute(boxEClass, BOX__NAME);
    createEReference(boxEClass, BOX__BGCOLOR);
    createEAttribute(boxEClass, BOX__BGPATTERN);
    createEAttribute(boxEClass, BOX__BGIMAGE);
    createEAttribute(boxEClass, BOX__SIZE);
    createEAttribute(boxEClass, BOX__POSITION);

    textEClass = createEClass(TEXT);
    createEAttribute(textEClass, TEXT__NAME);
    createEAttribute(textEClass, TEXT__ALIGN);
    createEReference(textEClass, TEXT__COLOR);
    createEReference(textEClass, TEXT__FONT);
    createEAttribute(textEClass, TEXT__LINEHEIGHT);
    createEAttribute(textEClass, TEXT__POSITION);
    createEAttribute(textEClass, TEXT__MAXWIDTH);
    createEAttribute(textEClass, TEXT__VALUE);

    imageEClass = createEClass(IMAGE);
    createEAttribute(imageEClass, IMAGE__NAME);
    createEAttribute(imageEClass, IMAGE__POSITION);
    createEAttribute(imageEClass, IMAGE__SIZE);
    createEAttribute(imageEClass, IMAGE__SRC);

    piechartEClass = createEClass(PIECHART);
    createEAttribute(piechartEClass, PIECHART__NAME);
    createEReference(piechartEClass, PIECHART__COLOR);
    createEAttribute(piechartEClass, PIECHART__COLORS);
    createEAttribute(piechartEClass, PIECHART__PIEDATA);
    createEAttribute(piechartEClass, PIECHART__LEGENDSTYLE);
    createEAttribute(piechartEClass, PIECHART__PADDING);
    createEAttribute(piechartEClass, PIECHART__POSITION);
    createEAttribute(piechartEClass, PIECHART__SHOWLEGEND);
    createEAttribute(piechartEClass, PIECHART__SHOWTITLE);
    createEAttribute(piechartEClass, PIECHART__SHOWPERCENTAGE);
    createEAttribute(piechartEClass, PIECHART__SIZE);
    createEAttribute(piechartEClass, PIECHART__TITLE);
    createEAttribute(piechartEClass, PIECHART__TYPE);

    barchartEClass = createEClass(BARCHART);
    createEAttribute(barchartEClass, BARCHART__NAME);
    createEReference(barchartEClass, BARCHART__COLOR);
    createEAttribute(barchartEClass, BARCHART__COLORS);
    createEAttribute(barchartEClass, BARCHART__BARDATA);
    createEAttribute(barchartEClass, BARCHART__GRIDSCALE);
    createEAttribute(barchartEClass, BARCHART__LEGENDSTYLE);
    createEAttribute(barchartEClass, BARCHART__PADDING);
    createEAttribute(barchartEClass, BARCHART__POSITION);
    createEAttribute(barchartEClass, BARCHART__SHOWGRID);
    createEAttribute(barchartEClass, BARCHART__SHOWLEGEND);
    createEAttribute(barchartEClass, BARCHART__SHOWTITLE);
    createEAttribute(barchartEClass, BARCHART__SIZE);
    createEAttribute(barchartEClass, BARCHART__TITLE);
    createEAttribute(barchartEClass, BARCHART__TYPE);

    picturegraphEClass = createEClass(PICTUREGRAPH);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__NAME);
    createEReference(picturegraphEClass, PICTUREGRAPH__COLOR);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__COLORS);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__PICTUREGRAPHDATA);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__LABEL);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__PADDING);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__POSITION);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__SHOWLEGEND);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__SHOWTITLE);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__SIZE);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__TITLE);
    createEAttribute(picturegraphEClass, PICTUREGRAPH__TYPE);

    footEClass = createEClass(FOOT);
    createEAttribute(footEClass, FOOT__NAME);
    createEReference(footEClass, FOOT__BGCOLOR);
    createEAttribute(footEClass, FOOT__BGPATTERN);
    createEAttribute(footEClass, FOOT__BGIMAGE);
    createEAttribute(footEClass, FOOT__POSITION);
    createEAttribute(footEClass, FOOT__SIZE);
    createEAttribute(footEClass, FOOT__TEXT);

    colorEClass = createEClass(COLOR);
    createEAttribute(colorEClass, COLOR__COLOR);

    fontEClass = createEClass(FONT);
    createEAttribute(fontEClass, FONT__WEIGHT);
    createEAttribute(fontEClass, FONT__FAMILY);

    // Create enums
    color_BasicEEnum = createEEnum(COLOR_BASIC);
    font_WeightEEnum = createEEnum(FONT_WEIGHT);
    font_FamilyEEnum = createEEnum(FONT_FAMILY);
    alignPossibilitiesEEnum = createEEnum(ALIGN_POSSIBILITIES);
    legendStyleEEnum = createEEnum(LEGEND_STYLE);
    showOptionsOffEEnum = createEEnum(SHOW_OPTIONS_OFF);
    pieTypeEEnum = createEEnum(PIE_TYPE);
    barTypeEEnum = createEEnum(BAR_TYPE);
    picturegraphTypeEEnum = createEEnum(PICTUREGRAPH_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    infographicElementTypeEClass.getESuperTypes().add(this.getInfographic());

    // Initialize classes and features; add operations and parameters
    initEClass(infographicEClass, Infographic.class, "Infographic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(infographicElementTypeEClass, InfographicElementType.class, "InfographicElementType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInfographicElementType_Type(), ecorePackage.getEString(), "type", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Bgcolor(), this.getColor(), null, "bgcolor", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInfographicElementType_Bgpattern(), ecorePackage.getEString(), "bgpattern", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInfographicElementType_Bgimage(), ecorePackage.getEString(), "bgimage", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInfographicElementType_Bgsize(), ecorePackage.getEString(), "bgsize", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Head(), this.getHead(), null, "head", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Boxes(), this.getBox(), null, "boxes", null, 0, -1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Texts(), this.getText(), null, "texts", null, 0, -1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Images(), this.getImage(), null, "images", null, 0, -1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Piecharts(), this.getPiechart(), null, "piecharts", null, 0, -1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Barcharts(), this.getBarchart(), null, "barcharts", null, 0, -1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Picturegraphs(), this.getPicturegraph(), null, "picturegraphs", null, 0, -1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInfographicElementType_Foot(), this.getFoot(), null, "foot", null, 0, 1, InfographicElementType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(headEClass, Head.class, "Head", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getHead_Name(), ecorePackage.getEString(), "name", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHead_Bgcolor(), this.getColor(), null, "bgcolor", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHead_Bgpattern(), ecorePackage.getEString(), "bgpattern", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHead_Bgimage(), ecorePackage.getEString(), "bgimage", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHead_Size(), ecorePackage.getEString(), "size", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getHead_Position(), ecorePackage.getEString(), "position", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHead_Logo(), this.getLogo(), null, "logo", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHead_Title(), this.getTitle(), null, "title", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getHead_Subtitle(), this.getTitle(), null, "subtitle", null, 0, 1, Head.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(titleEClass, Title.class, "Title", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTitle_Align(), this.getAlignPossibilities(), "align", null, 0, 1, Title.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTitle_Color(), this.getColor(), null, "color", null, 0, 1, Title.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTitle_Font(), this.getFONT(), null, "font", null, 0, 1, Title.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTitle_Position(), ecorePackage.getEString(), "position", null, 0, 1, Title.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTitle_Maxwidth(), ecorePackage.getEInt(), "maxwidth", null, 0, 1, Title.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTitle_Value(), ecorePackage.getEString(), "value", null, 0, 1, Title.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(logoEClass, Logo.class, "Logo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLogo_Size(), ecorePackage.getEString(), "size", null, 0, 1, Logo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLogo_Position(), ecorePackage.getEString(), "position", null, 0, 1, Logo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(boxEClass, Box.class, "Box", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBox_Name(), ecorePackage.getEString(), "name", null, 0, 1, Box.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBox_Bgcolor(), this.getColor(), null, "bgcolor", null, 0, 1, Box.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBox_Bgpattern(), ecorePackage.getEString(), "bgpattern", null, 0, 1, Box.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBox_Bgimage(), ecorePackage.getEString(), "bgimage", null, 0, 1, Box.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBox_Size(), ecorePackage.getEString(), "size", null, 0, 1, Box.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBox_Position(), ecorePackage.getEString(), "position", null, 0, 1, Box.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(textEClass, Text.class, "Text", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getText_Name(), ecorePackage.getEString(), "name", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getText_Align(), this.getAlignPossibilities(), "align", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getText_Color(), this.getColor(), null, "color", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getText_Font(), this.getFONT(), null, "font", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getText_Lineheight(), ecorePackage.getEInt(), "lineheight", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getText_Position(), ecorePackage.getEString(), "position", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getText_Maxwidth(), ecorePackage.getEInt(), "maxwidth", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getText_Value(), ecorePackage.getEString(), "value", null, 0, 1, Text.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(imageEClass, Image.class, "Image", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getImage_Name(), ecorePackage.getEString(), "name", null, 0, 1, Image.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getImage_Position(), ecorePackage.getEString(), "position", null, 0, 1, Image.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getImage_Size(), ecorePackage.getEString(), "size", null, 0, 1, Image.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getImage_Src(), ecorePackage.getEString(), "src", null, 0, 1, Image.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(piechartEClass, Piechart.class, "Piechart", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPiechart_Name(), ecorePackage.getEString(), "name", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPiechart_Color(), this.getColor(), null, "color", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Colors(), ecorePackage.getEString(), "colors", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Piedata(), ecorePackage.getEString(), "piedata", null, 0, -1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Legendstyle(), this.getLegendStyle(), "legendstyle", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Padding(), ecorePackage.getEInt(), "padding", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Position(), ecorePackage.getEString(), "position", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Showlegend(), this.getShowOptionsOff(), "showlegend", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Showtitle(), this.getShowOptionsOff(), "showtitle", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Showpercentage(), this.getShowOptionsOff(), "showpercentage", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Size(), ecorePackage.getEInt(), "size", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Title(), ecorePackage.getEString(), "title", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPiechart_Type(), this.getPieType(), "type", null, 0, 1, Piechart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(barchartEClass, Barchart.class, "Barchart", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getBarchart_Name(), ecorePackage.getEString(), "name", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getBarchart_Color(), this.getColor(), null, "color", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Colors(), ecorePackage.getEString(), "colors", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Bardata(), ecorePackage.getEString(), "bardata", null, 0, -1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Gridscale(), ecorePackage.getEInt(), "gridscale", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Legendstyle(), this.getLegendStyle(), "legendstyle", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Padding(), ecorePackage.getEInt(), "padding", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Position(), ecorePackage.getEString(), "position", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Showgrid(), this.getShowOptionsOff(), "showgrid", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Showlegend(), this.getShowOptionsOff(), "showlegend", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Showtitle(), this.getShowOptionsOff(), "showtitle", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Size(), ecorePackage.getEString(), "size", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Title(), ecorePackage.getEString(), "title", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getBarchart_Type(), this.getBarType(), "type", null, 0, 1, Barchart.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(picturegraphEClass, Picturegraph.class, "Picturegraph", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPicturegraph_Name(), ecorePackage.getEString(), "name", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPicturegraph_Color(), this.getColor(), null, "color", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Colors(), ecorePackage.getEString(), "colors", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Picturegraphdata(), ecorePackage.getEString(), "picturegraphdata", null, 0, -1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Label(), ecorePackage.getEString(), "label", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Padding(), ecorePackage.getEInt(), "padding", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Position(), ecorePackage.getEString(), "position", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Showlegend(), this.getShowOptionsOff(), "showlegend", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Showtitle(), this.getShowOptionsOff(), "showtitle", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Size(), ecorePackage.getEString(), "size", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Title(), ecorePackage.getEString(), "title", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPicturegraph_Type(), this.getPicturegraphType(), "type", null, 0, 1, Picturegraph.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(footEClass, Foot.class, "Foot", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFoot_Name(), ecorePackage.getEString(), "name", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFoot_Bgcolor(), this.getColor(), null, "bgcolor", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFoot_Bgpattern(), ecorePackage.getEString(), "bgpattern", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFoot_Bgimage(), ecorePackage.getEString(), "bgimage", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFoot_Position(), ecorePackage.getEString(), "position", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFoot_Size(), ecorePackage.getEString(), "size", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFoot_Text(), ecorePackage.getEString(), "text", null, 0, 1, Foot.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorEClass, Color.class, "Color", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColor_Color(), this.getColor_Basic(), "color", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fontEClass, org.xtext.example.mydsl.iDSL.FONT.class, "FONT", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFONT_Weight(), this.getFont_Weight(), "weight", null, 0, 1, org.xtext.example.mydsl.iDSL.FONT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFONT_Family(), this.getFont_Family(), "family", null, 0, 1, org.xtext.example.mydsl.iDSL.FONT.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(color_BasicEEnum, Color_Basic.class, "Color_Basic");
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C1);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C2);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C3);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C4);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C5);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C6);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C7);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C8);
    addEEnumLiteral(color_BasicEEnum, Color_Basic.C9);

    initEEnum(font_WeightEEnum, Font_Weight.class, "Font_Weight");
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B1);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B2);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B3);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B4);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B5);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B6);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B7);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B8);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B9);
    addEEnumLiteral(font_WeightEEnum, Font_Weight.B10);

    initEEnum(font_FamilyEEnum, Font_Family.class, "Font_Family");
    addEEnumLiteral(font_FamilyEEnum, Font_Family.FONT1);
    addEEnumLiteral(font_FamilyEEnum, Font_Family.FONT2);
    addEEnumLiteral(font_FamilyEEnum, Font_Family.FONT3);
    addEEnumLiteral(font_FamilyEEnum, Font_Family.FONT4);
    addEEnumLiteral(font_FamilyEEnum, Font_Family.FONT5);

    initEEnum(alignPossibilitiesEEnum, AlignPossibilities.class, "AlignPossibilities");
    addEEnumLiteral(alignPossibilitiesEEnum, AlignPossibilities.LEFT);
    addEEnumLiteral(alignPossibilitiesEEnum, AlignPossibilities.RIGHT);
    addEEnumLiteral(alignPossibilitiesEEnum, AlignPossibilities.CENTER);

    initEEnum(legendStyleEEnum, LegendStyle.class, "LegendStyle");
    addEEnumLiteral(legendStyleEEnum, LegendStyle.LEGEND1);
    addEEnumLiteral(legendStyleEEnum, LegendStyle.LEGEND2);

    initEEnum(showOptionsOffEEnum, ShowOptionsOff.class, "ShowOptionsOff");
    addEEnumLiteral(showOptionsOffEEnum, ShowOptionsOff.SHOW1);
    addEEnumLiteral(showOptionsOffEEnum, ShowOptionsOff.SHOW2);

    initEEnum(pieTypeEEnum, PieType.class, "PieType");
    addEEnumLiteral(pieTypeEEnum, PieType.TYPE1);
    addEEnumLiteral(pieTypeEEnum, PieType.TYPE2);

    initEEnum(barTypeEEnum, BarType.class, "BarType");
    addEEnumLiteral(barTypeEEnum, BarType.TYPE1);
    addEEnumLiteral(barTypeEEnum, BarType.TYPE2);

    initEEnum(picturegraphTypeEEnum, PicturegraphType.class, "PicturegraphType");
    addEEnumLiteral(picturegraphTypeEEnum, PicturegraphType.TYPE1);
    addEEnumLiteral(picturegraphTypeEEnum, PicturegraphType.TYPE2);

    // Create resource
    createResource(eNS_URI);
  }

} //IDSLPackageImpl
