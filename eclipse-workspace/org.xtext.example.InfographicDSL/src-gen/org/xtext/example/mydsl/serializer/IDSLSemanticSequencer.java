/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.mydsl.iDSL.Barchart;
import org.xtext.example.mydsl.iDSL.Box;
import org.xtext.example.mydsl.iDSL.Color;
import org.xtext.example.mydsl.iDSL.FONT;
import org.xtext.example.mydsl.iDSL.Foot;
import org.xtext.example.mydsl.iDSL.Head;
import org.xtext.example.mydsl.iDSL.IDSLPackage;
import org.xtext.example.mydsl.iDSL.Image;
import org.xtext.example.mydsl.iDSL.InfographicElementType;
import org.xtext.example.mydsl.iDSL.Logo;
import org.xtext.example.mydsl.iDSL.Picturegraph;
import org.xtext.example.mydsl.iDSL.Piechart;
import org.xtext.example.mydsl.iDSL.Text;
import org.xtext.example.mydsl.iDSL.Title;
import org.xtext.example.mydsl.services.IDSLGrammarAccess;

@SuppressWarnings("all")
public class IDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IDSLPackage.BARCHART:
				sequence_Barchart(context, (Barchart) semanticObject); 
				return; 
			case IDSLPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case IDSLPackage.COLOR:
				sequence_Color(context, (Color) semanticObject); 
				return; 
			case IDSLPackage.FONT:
				sequence_FONT(context, (FONT) semanticObject); 
				return; 
			case IDSLPackage.FOOT:
				sequence_Foot(context, (Foot) semanticObject); 
				return; 
			case IDSLPackage.HEAD:
				sequence_Head(context, (Head) semanticObject); 
				return; 
			case IDSLPackage.IMAGE:
				sequence_Image(context, (Image) semanticObject); 
				return; 
			case IDSLPackage.INFOGRAPHIC_ELEMENT_TYPE:
				sequence_InfographicElementType(context, (InfographicElementType) semanticObject); 
				return; 
			case IDSLPackage.LOGO:
				sequence_Logo(context, (Logo) semanticObject); 
				return; 
			case IDSLPackage.PICTUREGRAPH:
				sequence_Picturegraph(context, (Picturegraph) semanticObject); 
				return; 
			case IDSLPackage.PIECHART:
				sequence_Piechart(context, (Piechart) semanticObject); 
				return; 
			case IDSLPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			case IDSLPackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Barchart returns Barchart
	 *
	 * Constraint:
	 *     (
	 *         name=BARCHARTID 
	 *         (
	 *             color=Color | 
	 *             colors=COLOR_CHARTS | 
	 *             bardata+=ChartData | 
	 *             gridscale=INT | 
	 *             legendstyle=LegendStyle | 
	 *             padding=INT | 
	 *             position=SIZE_POS | 
	 *             showgrid=ShowOptionsOff | 
	 *             showlegend=ShowOptionsOff | 
	 *             showtitle=ShowOptionsOff | 
	 *             size=SIZE_POS | 
	 *             title=STRING | 
	 *             type=BarType
	 *         )*
	 *     )
	 */
	protected void sequence_Barchart(ISerializationContext context, Barchart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Box returns Box
	 *
	 * Constraint:
	 *     (name=BOXID (bgcolor=Color | bgpattern=Pattern | bgimage=ImageSrc | size=SIZE_POS | position=SIZE_POS)*)
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Color returns Color
	 *
	 * Constraint:
	 *     color=Color_Basic?
	 */
	protected void sequence_Color(ISerializationContext context, Color semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FONT returns FONT
	 *
	 * Constraint:
	 *     (weight=Font_Weight? family=Font_Family)
	 */
	protected void sequence_FONT(ISerializationContext context, FONT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Foot returns Foot
	 *
	 * Constraint:
	 *     (
	 *         name='foot' 
	 *         (
	 *             bgcolor=Color | 
	 *             bgpattern=Pattern | 
	 *             bgimage=ImageSrc | 
	 *             position=SIZE_POS | 
	 *             size=SIZE_POS | 
	 *             text=STRING
	 *         )*
	 *     )
	 */
	protected void sequence_Foot(ISerializationContext context, Foot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Head returns Head
	 *
	 * Constraint:
	 *     (
	 *         name='head' 
	 *         (
	 *             bgcolor=Color | 
	 *             bgpattern=Pattern | 
	 *             bgimage=ImageSrc | 
	 *             size=SIZE_POS | 
	 *             position=SIZE_POS | 
	 *             logo=Logo | 
	 *             title=Title | 
	 *             subtitle=Title
	 *         )*
	 *     )
	 */
	protected void sequence_Head(ISerializationContext context, Head semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Image returns Image
	 *
	 * Constraint:
	 *     (name=IMAGEID (position=SIZE_POS | size=SIZE_POS | src=ImageSrc)+)
	 */
	protected void sequence_Image(ISerializationContext context, Image semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Infographic returns InfographicElementType
	 *     InfographicElementType returns InfographicElementType
	 *
	 * Constraint:
	 *     (
	 *         type='basic' | 
	 *         bgcolor=Color | 
	 *         bgpattern=Pattern | 
	 *         bgimage=ImageSrc | 
	 *         bgsize=SIZE_POS | 
	 *         head=Head | 
	 *         boxes+=Box | 
	 *         texts+=Text | 
	 *         images+=Image | 
	 *         piecharts+=Piechart | 
	 *         barcharts+=Barchart | 
	 *         picturegraphs+=Picturegraph | 
	 *         foot=Foot
	 *     )+
	 */
	protected void sequence_InfographicElementType(ISerializationContext context, InfographicElementType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Logo returns Logo
	 *
	 * Constraint:
	 *     (size=SIZE_POS | position=SIZE_POS)+
	 */
	protected void sequence_Logo(ISerializationContext context, Logo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Picturegraph returns Picturegraph
	 *
	 * Constraint:
	 *     (
	 *         name=PICTUREGRAPHID 
	 *         (
	 *             color=Color | 
	 *             colors=COLOR_CHARTS | 
	 *             picturegraphdata+=ChartData | 
	 *             label=STRING | 
	 *             padding=INT | 
	 *             position=SIZE_POS | 
	 *             showlegend=ShowOptionsOff | 
	 *             showtitle=ShowOptionsOff | 
	 *             size=SIZE_POS | 
	 *             title=STRING | 
	 *             type=PicturegraphType
	 *         )*
	 *     )
	 */
	protected void sequence_Picturegraph(ISerializationContext context, Picturegraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Piechart returns Piechart
	 *
	 * Constraint:
	 *     (
	 *         name=PIECHARTID 
	 *         (
	 *             color=Color | 
	 *             colors=COLOR_CHARTS | 
	 *             piedata+=ChartData | 
	 *             legendstyle=LegendStyle | 
	 *             padding=INT | 
	 *             position=SIZE_POS | 
	 *             showlegend=ShowOptionsOff | 
	 *             showtitle=ShowOptionsOff | 
	 *             showpercentage=ShowOptionsOff | 
	 *             size=INT | 
	 *             title=STRING | 
	 *             type=PieType
	 *         )*
	 *     )
	 */
	protected void sequence_Piechart(ISerializationContext context, Piechart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Text returns Text
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=TEXTID 
	 *             (
	 *                 align=AlignPossibilities | 
	 *                 color=Color | 
	 *                 font=FONT | 
	 *                 lineheight=INT | 
	 *                 position=SIZE_POS | 
	 *                 maxwidth=INT | 
	 *                 value=STRING
	 *             )*
	 *         ) | 
	 *         (
	 *             name=TITLETEXTID 
	 *             (
	 *                 align=AlignPossibilities | 
	 *                 color=Color | 
	 *                 font=FONT | 
	 *                 position=SIZE_POS | 
	 *                 maxwidth=INT | 
	 *                 value=STRING
	 *             )*
	 *         )
	 *     )
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Title returns Title
	 *
	 * Constraint:
	 *     (
	 *         align=AlignPossibilities | 
	 *         color=Color | 
	 *         font=FONT | 
	 *         position=SIZE_POS | 
	 *         maxwidth=INT | 
	 *         value=STRING
	 *     )*
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
