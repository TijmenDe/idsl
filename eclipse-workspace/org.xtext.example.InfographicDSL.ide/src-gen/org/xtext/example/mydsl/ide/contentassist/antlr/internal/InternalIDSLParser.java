package org.xtext.example.mydsl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.IDSLGrammarAccess;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalIDSLParser extends AbstractInternalContentAssistParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "TimesNewRoman", "Showpercentage", "Legendstyle", "Horizontal", "Lineheight", "SansSerif", "Showlegend", "Bgpattern", "Gridscale", "Showtitle", "Electric", "Maxwidth", "Position", "Showgrid", "Subtitle", "Vertical", "Verdana", "Bgcolor", "Bgimage", "Padding", "Gotham", "Bgsize", "Center", "Colors", "Orange", "Purple", "Yellow", "Arial", "Align", "Basic", "Black", "Bold", "Color", "Donut", "Green", "Label", "Right", "Title", "Value", "White", "DigitOneDigitZeroDigitZeroSpace", "DigitTwoDigitZeroDigitZeroSpace", "DigitThreeDigitZeroDigitZeroSpace", "DigitFourDigitZeroDigitZeroSpace", "DigitFiveDigitZeroDigitZeroSpace", "DigitSixDigitZeroDigitZeroSpace", "DigitSevenDigitZeroDigitZeroSpace", "DigitEightDigitZeroDigitZeroSpace", "DigitNineDigitZeroDigitZeroSpace", "Blue", "Data", "Font", "Foot", "Head", "Left", "Logo", "Pink", "Size", "Text", "Type", "Bin", "Off", "Pie", "Red", "Src", "DigitOne", "DigitTwo", "Colon", "N", "RULE_INT", "RULE_SIZE_POS", "RULE_COLOR_HEX", "RULE_COLOR_CHARTS", "RULE_PATTERN_DB", "RULE_FONT_SIZE", "RULE_BOXID", "RULE_TEXTID", "RULE_TITLETEXTID", "RULE_IMAGEID", "RULE_PIECHARTID", "RULE_BARCHARTID", "RULE_PICTUREGRAPHID", "RULE_BEGIN", "RULE_END", "RULE_ID", "RULE_STRING", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS", "RULE_ANY_OTHER"
    };
    public static final int Vertical=19;
    public static final int DigitTwo=70;
    public static final int RULE_PIECHARTID=83;
    public static final int Left=58;
    public static final int Size=61;
    public static final int RULE_BOXID=79;
    public static final int Black=34;
    public static final int Orange=28;
    public static final int Bgimage=22;
    public static final int RULE_COLOR_HEX=75;
    public static final int DigitOneDigitZeroDigitZeroSpace=44;
    public static final int Head=57;
    public static final int Align=32;
    public static final int RULE_ID=88;
    public static final int Showlegend=10;
    public static final int Position=16;
    public static final int RULE_PICTUREGRAPHID=85;
    public static final int Subtitle=18;
    public static final int RULE_TITLETEXTID=81;
    public static final int Colors=27;
    public static final int Yellow=30;
    public static final int RULE_IMAGEID=82;
    public static final int RULE_INT=73;
    public static final int RULE_ML_COMMENT=90;
    public static final int Right=40;
    public static final int Font=55;
    public static final int Off=65;
    public static final int N=72;
    public static final int RULE_FONT_SIZE=78;
    public static final int Showgrid=17;
    public static final int Center=26;
    public static final int Blue=53;
    public static final int Bgsize=25;
    public static final int Text=62;
    public static final int RULE_PATTERN_DB=77;
    public static final int Pie=66;
    public static final int RULE_COLOR_CHARTS=76;
    public static final int Red=67;
    public static final int Gridscale=12;
    public static final int Type=63;
    public static final int DigitTwoDigitZeroDigitZeroSpace=45;
    public static final int Maxwidth=15;
    public static final int Showtitle=13;
    public static final int RULE_BEGIN=86;
    public static final int Label=39;
    public static final int DigitThreeDigitZeroDigitZeroSpace=46;
    public static final int DigitSevenDigitZeroDigitZeroSpace=50;
    public static final int Lineheight=8;
    public static final int Bgpattern=11;
    public static final int Color=36;
    public static final int TimesNewRoman=4;
    public static final int Arial=31;
    public static final int Foot=56;
    public static final int DigitSixDigitZeroDigitZeroSpace=49;
    public static final int Pink=60;
    public static final int Value=42;
    public static final int Bold=35;
    public static final int Basic=33;
    public static final int RULE_END=87;
    public static final int Horizontal=7;
    public static final int Src=68;
    public static final int RULE_TEXTID=80;
    public static final int RULE_STRING=89;
    public static final int DigitFiveDigitZeroDigitZeroSpace=48;
    public static final int RULE_SL_COMMENT=91;
    public static final int Gotham=24;
    public static final int Verdana=20;
    public static final int DigitNineDigitZeroDigitZeroSpace=52;
    public static final int Padding=23;
    public static final int Bgcolor=21;
    public static final int DigitFourDigitZeroDigitZeroSpace=47;
    public static final int Colon=71;
    public static final int EOF=-1;
    public static final int SansSerif=9;
    public static final int RULE_WS=92;
    public static final int Bin=64;
    public static final int RULE_SIZE_POS=74;
    public static final int DigitOne=69;
    public static final int Electric=14;
    public static final int Title=41;
    public static final int Data=54;
    public static final int RULE_ANY_OTHER=93;
    public static final int Logo=59;
    public static final int Donut=37;
    public static final int Showpercentage=5;
    public static final int White=43;
    public static final int RULE_BARCHARTID=84;
    public static final int Purple=29;
    public static final int DigitEightDigitZeroDigitZeroSpace=51;
    public static final int Green=38;
    public static final int Legendstyle=6;

    // delegates
    // delegators


        public InternalIDSLParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalIDSLParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalIDSLParser.tokenNames; }
    public String getGrammarFileName() { return "InternalIDSLParser.g"; }


    	private IDSLGrammarAccess grammarAccess;
    	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
    	
    	{
    		tokenNameToValue.put("DigitOne", "'1'");
    		tokenNameToValue.put("DigitTwo", "'2'");
    		tokenNameToValue.put("Colon", "':'");
    		tokenNameToValue.put("N", "'n'");
    		tokenNameToValue.put("Bin", "'bin'");
    		tokenNameToValue.put("Off", "'off'");
    		tokenNameToValue.put("Pie", "'pie'");
    		tokenNameToValue.put("Red", "'red'");
    		tokenNameToValue.put("Src", "'src'");
    		tokenNameToValue.put("DigitOneDigitZeroDigitZeroSpace", "'100 '");
    		tokenNameToValue.put("DigitTwoDigitZeroDigitZeroSpace", "'200 '");
    		tokenNameToValue.put("DigitThreeDigitZeroDigitZeroSpace", "'300 '");
    		tokenNameToValue.put("DigitFourDigitZeroDigitZeroSpace", "'400 '");
    		tokenNameToValue.put("DigitFiveDigitZeroDigitZeroSpace", "'500 '");
    		tokenNameToValue.put("DigitSixDigitZeroDigitZeroSpace", "'600 '");
    		tokenNameToValue.put("DigitSevenDigitZeroDigitZeroSpace", "'700 '");
    		tokenNameToValue.put("DigitEightDigitZeroDigitZeroSpace", "'800 '");
    		tokenNameToValue.put("DigitNineDigitZeroDigitZeroSpace", "'900 '");
    		tokenNameToValue.put("Blue", "'blue'");
    		tokenNameToValue.put("Data", "'data'");
    		tokenNameToValue.put("Font", "'font'");
    		tokenNameToValue.put("Foot", "'foot'");
    		tokenNameToValue.put("Head", "'head'");
    		tokenNameToValue.put("Left", "'left'");
    		tokenNameToValue.put("Logo", "'logo'");
    		tokenNameToValue.put("Pink", "'pink'");
    		tokenNameToValue.put("Size", "'size'");
    		tokenNameToValue.put("Text", "'text'");
    		tokenNameToValue.put("Type", "'type'");
    		tokenNameToValue.put("Arial", "'Arial'");
    		tokenNameToValue.put("Align", "'align'");
    		tokenNameToValue.put("Basic", "'basic'");
    		tokenNameToValue.put("Black", "'black'");
    		tokenNameToValue.put("Bold", "'bold '");
    		tokenNameToValue.put("Color", "'color'");
    		tokenNameToValue.put("Donut", "'donut'");
    		tokenNameToValue.put("Green", "'green'");
    		tokenNameToValue.put("Label", "'label'");
    		tokenNameToValue.put("Right", "'right'");
    		tokenNameToValue.put("Title", "'title'");
    		tokenNameToValue.put("Value", "'value'");
    		tokenNameToValue.put("White", "'white'");
    		tokenNameToValue.put("Gotham", "'Gotham'");
    		tokenNameToValue.put("Bgsize", "'bgsize'");
    		tokenNameToValue.put("Center", "'center'");
    		tokenNameToValue.put("Colors", "'colors'");
    		tokenNameToValue.put("Orange", "'orange'");
    		tokenNameToValue.put("Purple", "'purple'");
    		tokenNameToValue.put("Yellow", "'yellow'");
    		tokenNameToValue.put("Verdana", "'Verdana'");
    		tokenNameToValue.put("Bgcolor", "'bgcolor'");
    		tokenNameToValue.put("Bgimage", "'bgimage'");
    		tokenNameToValue.put("Padding", "'padding'");
    		tokenNameToValue.put("Electric", "'electric'");
    		tokenNameToValue.put("Maxwidth", "'maxwidth'");
    		tokenNameToValue.put("Position", "'position'");
    		tokenNameToValue.put("Showgrid", "'showgrid'");
    		tokenNameToValue.put("Subtitle", "'subtitle'");
    		tokenNameToValue.put("Vertical", "'vertical'");
    		tokenNameToValue.put("Bgpattern", "'bgpattern'");
    		tokenNameToValue.put("Gridscale", "'gridscale'");
    		tokenNameToValue.put("Showtitle", "'showtitle'");
    		tokenNameToValue.put("Horizontal", "'horizontal'");
    		tokenNameToValue.put("Lineheight", "'lineheight'");
    		tokenNameToValue.put("SansSerif", "'sans-serif'");
    		tokenNameToValue.put("Showlegend", "'showlegend'");
    		tokenNameToValue.put("Legendstyle", "'legendstyle'");
    		tokenNameToValue.put("Showpercentage", "'showpercentage'");
    		tokenNameToValue.put("TimesNewRoman", "'Times New Roman'");
    	}

    	public void setGrammarAccess(IDSLGrammarAccess grammarAccess) {
    		this.grammarAccess = grammarAccess;
    	}

    	@Override
    	protected Grammar getGrammar() {
    		return grammarAccess.getGrammar();
    	}

    	@Override
    	protected String getValueForTokenName(String tokenName) {
    		String result = tokenNameToValue.get(tokenName);
    		if (result == null)
    			result = tokenName;
    		return result;
    	}



    // $ANTLR start "entryRuleInfographic"
    // InternalIDSLParser.g:124:1: entryRuleInfographic : ruleInfographic EOF ;
    public final void entryRuleInfographic() throws RecognitionException {
        try {
            // InternalIDSLParser.g:125:1: ( ruleInfographic EOF )
            // InternalIDSLParser.g:126:1: ruleInfographic EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInfographic();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInfographic"


    // $ANTLR start "ruleInfographic"
    // InternalIDSLParser.g:133:1: ruleInfographic : ( ruleInfographicElementType ) ;
    public final void ruleInfographic() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:137:2: ( ( ruleInfographicElementType ) )
            // InternalIDSLParser.g:138:2: ( ruleInfographicElementType )
            {
            // InternalIDSLParser.g:138:2: ( ruleInfographicElementType )
            // InternalIDSLParser.g:139:3: ruleInfographicElementType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicAccess().getInfographicElementTypeParserRuleCall()); 
            }
            pushFollow(FOLLOW_2);
            ruleInfographicElementType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicAccess().getInfographicElementTypeParserRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInfographic"


    // $ANTLR start "entryRuleInfographicElementType"
    // InternalIDSLParser.g:149:1: entryRuleInfographicElementType : ruleInfographicElementType EOF ;
    public final void entryRuleInfographicElementType() throws RecognitionException {
        try {
            // InternalIDSLParser.g:150:1: ( ruleInfographicElementType EOF )
            // InternalIDSLParser.g:151:1: ruleInfographicElementType EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleInfographicElementType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleInfographicElementType"


    // $ANTLR start "ruleInfographicElementType"
    // InternalIDSLParser.g:158:1: ruleInfographicElementType : ( ( rule__InfographicElementType__UnorderedGroup ) ) ;
    public final void ruleInfographicElementType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:162:2: ( ( ( rule__InfographicElementType__UnorderedGroup ) ) )
            // InternalIDSLParser.g:163:2: ( ( rule__InfographicElementType__UnorderedGroup ) )
            {
            // InternalIDSLParser.g:163:2: ( ( rule__InfographicElementType__UnorderedGroup ) )
            // InternalIDSLParser.g:164:3: ( rule__InfographicElementType__UnorderedGroup )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup()); 
            }
            // InternalIDSLParser.g:165:3: ( rule__InfographicElementType__UnorderedGroup )
            // InternalIDSLParser.g:165:4: rule__InfographicElementType__UnorderedGroup
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__UnorderedGroup();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleInfographicElementType"


    // $ANTLR start "entryRuleHead"
    // InternalIDSLParser.g:174:1: entryRuleHead : ruleHead EOF ;
    public final void entryRuleHead() throws RecognitionException {
        try {
            // InternalIDSLParser.g:175:1: ( ruleHead EOF )
            // InternalIDSLParser.g:176:1: ruleHead EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleHead"


    // $ANTLR start "ruleHead"
    // InternalIDSLParser.g:183:1: ruleHead : ( ( rule__Head__Group__0 ) ) ;
    public final void ruleHead() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:187:2: ( ( ( rule__Head__Group__0 ) ) )
            // InternalIDSLParser.g:188:2: ( ( rule__Head__Group__0 ) )
            {
            // InternalIDSLParser.g:188:2: ( ( rule__Head__Group__0 ) )
            // InternalIDSLParser.g:189:3: ( rule__Head__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getGroup()); 
            }
            // InternalIDSLParser.g:190:3: ( rule__Head__Group__0 )
            // InternalIDSLParser.g:190:4: rule__Head__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleHead"


    // $ANTLR start "entryRuleTitle"
    // InternalIDSLParser.g:199:1: entryRuleTitle : ruleTitle EOF ;
    public final void entryRuleTitle() throws RecognitionException {
        try {
            // InternalIDSLParser.g:200:1: ( ruleTitle EOF )
            // InternalIDSLParser.g:201:1: ruleTitle EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleTitle();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleTitle"


    // $ANTLR start "ruleTitle"
    // InternalIDSLParser.g:208:1: ruleTitle : ( ( rule__Title__Alternatives ) ) ;
    public final void ruleTitle() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:212:2: ( ( ( rule__Title__Alternatives ) ) )
            // InternalIDSLParser.g:213:2: ( ( rule__Title__Alternatives ) )
            {
            // InternalIDSLParser.g:213:2: ( ( rule__Title__Alternatives ) )
            // InternalIDSLParser.g:214:3: ( rule__Title__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:215:3: ( rule__Title__Alternatives )
            // InternalIDSLParser.g:215:4: rule__Title__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Title__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleTitle"


    // $ANTLR start "entryRuleLogo"
    // InternalIDSLParser.g:224:1: entryRuleLogo : ruleLogo EOF ;
    public final void entryRuleLogo() throws RecognitionException {
        try {
            // InternalIDSLParser.g:225:1: ( ruleLogo EOF )
            // InternalIDSLParser.g:226:1: ruleLogo EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleLogo();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleLogo"


    // $ANTLR start "ruleLogo"
    // InternalIDSLParser.g:233:1: ruleLogo : ( ( rule__Logo__Group__0 ) ) ;
    public final void ruleLogo() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:237:2: ( ( ( rule__Logo__Group__0 ) ) )
            // InternalIDSLParser.g:238:2: ( ( rule__Logo__Group__0 ) )
            {
            // InternalIDSLParser.g:238:2: ( ( rule__Logo__Group__0 ) )
            // InternalIDSLParser.g:239:3: ( rule__Logo__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getGroup()); 
            }
            // InternalIDSLParser.g:240:3: ( rule__Logo__Group__0 )
            // InternalIDSLParser.g:240:4: rule__Logo__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Logo__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLogo"


    // $ANTLR start "entryRuleBox"
    // InternalIDSLParser.g:249:1: entryRuleBox : ruleBox EOF ;
    public final void entryRuleBox() throws RecognitionException {
        try {
            // InternalIDSLParser.g:250:1: ( ruleBox EOF )
            // InternalIDSLParser.g:251:1: ruleBox EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleBox();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBox"


    // $ANTLR start "ruleBox"
    // InternalIDSLParser.g:258:1: ruleBox : ( ( rule__Box__Group__0 ) ) ;
    public final void ruleBox() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:262:2: ( ( ( rule__Box__Group__0 ) ) )
            // InternalIDSLParser.g:263:2: ( ( rule__Box__Group__0 ) )
            {
            // InternalIDSLParser.g:263:2: ( ( rule__Box__Group__0 ) )
            // InternalIDSLParser.g:264:3: ( rule__Box__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getGroup()); 
            }
            // InternalIDSLParser.g:265:3: ( rule__Box__Group__0 )
            // InternalIDSLParser.g:265:4: rule__Box__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBox"


    // $ANTLR start "entryRuleText"
    // InternalIDSLParser.g:274:1: entryRuleText : ruleText EOF ;
    public final void entryRuleText() throws RecognitionException {
        try {
            // InternalIDSLParser.g:275:1: ( ruleText EOF )
            // InternalIDSLParser.g:276:1: ruleText EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleText();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleText"


    // $ANTLR start "ruleText"
    // InternalIDSLParser.g:283:1: ruleText : ( ( rule__Text__Alternatives ) ) ;
    public final void ruleText() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:287:2: ( ( ( rule__Text__Alternatives ) ) )
            // InternalIDSLParser.g:288:2: ( ( rule__Text__Alternatives ) )
            {
            // InternalIDSLParser.g:288:2: ( ( rule__Text__Alternatives ) )
            // InternalIDSLParser.g:289:3: ( rule__Text__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:290:3: ( rule__Text__Alternatives )
            // InternalIDSLParser.g:290:4: rule__Text__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Text__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleText"


    // $ANTLR start "entryRuleImage"
    // InternalIDSLParser.g:299:1: entryRuleImage : ruleImage EOF ;
    public final void entryRuleImage() throws RecognitionException {
        try {
            // InternalIDSLParser.g:300:1: ( ruleImage EOF )
            // InternalIDSLParser.g:301:1: ruleImage EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleImage();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleImage"


    // $ANTLR start "ruleImage"
    // InternalIDSLParser.g:308:1: ruleImage : ( ( rule__Image__Group__0 ) ) ;
    public final void ruleImage() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:312:2: ( ( ( rule__Image__Group__0 ) ) )
            // InternalIDSLParser.g:313:2: ( ( rule__Image__Group__0 ) )
            {
            // InternalIDSLParser.g:313:2: ( ( rule__Image__Group__0 ) )
            // InternalIDSLParser.g:314:3: ( rule__Image__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getGroup()); 
            }
            // InternalIDSLParser.g:315:3: ( rule__Image__Group__0 )
            // InternalIDSLParser.g:315:4: rule__Image__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Image__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleImage"


    // $ANTLR start "entryRulePiechart"
    // InternalIDSLParser.g:324:1: entryRulePiechart : rulePiechart EOF ;
    public final void entryRulePiechart() throws RecognitionException {
        try {
            // InternalIDSLParser.g:325:1: ( rulePiechart EOF )
            // InternalIDSLParser.g:326:1: rulePiechart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePiechart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePiechart"


    // $ANTLR start "rulePiechart"
    // InternalIDSLParser.g:333:1: rulePiechart : ( ( rule__Piechart__Group__0 ) ) ;
    public final void rulePiechart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:337:2: ( ( ( rule__Piechart__Group__0 ) ) )
            // InternalIDSLParser.g:338:2: ( ( rule__Piechart__Group__0 ) )
            {
            // InternalIDSLParser.g:338:2: ( ( rule__Piechart__Group__0 ) )
            // InternalIDSLParser.g:339:3: ( rule__Piechart__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getGroup()); 
            }
            // InternalIDSLParser.g:340:3: ( rule__Piechart__Group__0 )
            // InternalIDSLParser.g:340:4: rule__Piechart__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePiechart"


    // $ANTLR start "entryRuleBarchart"
    // InternalIDSLParser.g:349:1: entryRuleBarchart : ruleBarchart EOF ;
    public final void entryRuleBarchart() throws RecognitionException {
        try {
            // InternalIDSLParser.g:350:1: ( ruleBarchart EOF )
            // InternalIDSLParser.g:351:1: ruleBarchart EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleBarchart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleBarchart"


    // $ANTLR start "ruleBarchart"
    // InternalIDSLParser.g:358:1: ruleBarchart : ( ( rule__Barchart__Group__0 ) ) ;
    public final void ruleBarchart() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:362:2: ( ( ( rule__Barchart__Group__0 ) ) )
            // InternalIDSLParser.g:363:2: ( ( rule__Barchart__Group__0 ) )
            {
            // InternalIDSLParser.g:363:2: ( ( rule__Barchart__Group__0 ) )
            // InternalIDSLParser.g:364:3: ( rule__Barchart__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getGroup()); 
            }
            // InternalIDSLParser.g:365:3: ( rule__Barchart__Group__0 )
            // InternalIDSLParser.g:365:4: rule__Barchart__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBarchart"


    // $ANTLR start "entryRulePicturegraph"
    // InternalIDSLParser.g:374:1: entryRulePicturegraph : rulePicturegraph EOF ;
    public final void entryRulePicturegraph() throws RecognitionException {
        try {
            // InternalIDSLParser.g:375:1: ( rulePicturegraph EOF )
            // InternalIDSLParser.g:376:1: rulePicturegraph EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePicturegraph();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePicturegraph"


    // $ANTLR start "rulePicturegraph"
    // InternalIDSLParser.g:383:1: rulePicturegraph : ( ( rule__Picturegraph__Group__0 ) ) ;
    public final void rulePicturegraph() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:387:2: ( ( ( rule__Picturegraph__Group__0 ) ) )
            // InternalIDSLParser.g:388:2: ( ( rule__Picturegraph__Group__0 ) )
            {
            // InternalIDSLParser.g:388:2: ( ( rule__Picturegraph__Group__0 ) )
            // InternalIDSLParser.g:389:3: ( rule__Picturegraph__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getGroup()); 
            }
            // InternalIDSLParser.g:390:3: ( rule__Picturegraph__Group__0 )
            // InternalIDSLParser.g:390:4: rule__Picturegraph__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePicturegraph"


    // $ANTLR start "entryRuleFoot"
    // InternalIDSLParser.g:399:1: entryRuleFoot : ruleFoot EOF ;
    public final void entryRuleFoot() throws RecognitionException {
        try {
            // InternalIDSLParser.g:400:1: ( ruleFoot EOF )
            // InternalIDSLParser.g:401:1: ruleFoot EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFoot();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFoot"


    // $ANTLR start "ruleFoot"
    // InternalIDSLParser.g:408:1: ruleFoot : ( ( rule__Foot__Group__0 ) ) ;
    public final void ruleFoot() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:412:2: ( ( ( rule__Foot__Group__0 ) ) )
            // InternalIDSLParser.g:413:2: ( ( rule__Foot__Group__0 ) )
            {
            // InternalIDSLParser.g:413:2: ( ( rule__Foot__Group__0 ) )
            // InternalIDSLParser.g:414:3: ( rule__Foot__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getGroup()); 
            }
            // InternalIDSLParser.g:415:3: ( rule__Foot__Group__0 )
            // InternalIDSLParser.g:415:4: rule__Foot__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFoot"


    // $ANTLR start "entryRuleColor"
    // InternalIDSLParser.g:424:1: entryRuleColor : ruleColor EOF ;
    public final void entryRuleColor() throws RecognitionException {
        try {
            // InternalIDSLParser.g:425:1: ( ruleColor EOF )
            // InternalIDSLParser.g:426:1: ruleColor EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleColor"


    // $ANTLR start "ruleColor"
    // InternalIDSLParser.g:433:1: ruleColor : ( ( rule__Color__Alternatives ) ) ;
    public final void ruleColor() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:437:2: ( ( ( rule__Color__Alternatives ) ) )
            // InternalIDSLParser.g:438:2: ( ( rule__Color__Alternatives ) )
            {
            // InternalIDSLParser.g:438:2: ( ( rule__Color__Alternatives ) )
            // InternalIDSLParser.g:439:3: ( rule__Color__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:440:3: ( rule__Color__Alternatives )
            // InternalIDSLParser.g:440:4: rule__Color__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Color__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleColor"


    // $ANTLR start "entryRulePattern"
    // InternalIDSLParser.g:449:1: entryRulePattern : rulePattern EOF ;
    public final void entryRulePattern() throws RecognitionException {
        try {
            // InternalIDSLParser.g:450:1: ( rulePattern EOF )
            // InternalIDSLParser.g:451:1: rulePattern EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternRule()); 
            }
            pushFollow(FOLLOW_1);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRulePattern"


    // $ANTLR start "rulePattern"
    // InternalIDSLParser.g:458:1: rulePattern : ( ( rule__Pattern__Alternatives ) ) ;
    public final void rulePattern() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:462:2: ( ( ( rule__Pattern__Alternatives ) ) )
            // InternalIDSLParser.g:463:2: ( ( rule__Pattern__Alternatives ) )
            {
            // InternalIDSLParser.g:463:2: ( ( rule__Pattern__Alternatives ) )
            // InternalIDSLParser.g:464:3: ( rule__Pattern__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPatternAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:465:3: ( rule__Pattern__Alternatives )
            // InternalIDSLParser.g:465:4: rule__Pattern__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Pattern__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPatternAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePattern"


    // $ANTLR start "entryRuleImageSrc"
    // InternalIDSLParser.g:474:1: entryRuleImageSrc : ruleImageSrc EOF ;
    public final void entryRuleImageSrc() throws RecognitionException {
        try {
            // InternalIDSLParser.g:475:1: ( ruleImageSrc EOF )
            // InternalIDSLParser.g:476:1: ruleImageSrc EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageSrcRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleImageSrc();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageSrcRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleImageSrc"


    // $ANTLR start "ruleImageSrc"
    // InternalIDSLParser.g:483:1: ruleImageSrc : ( RULE_STRING ) ;
    public final void ruleImageSrc() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:487:2: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:488:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:488:2: ( RULE_STRING )
            // InternalIDSLParser.g:489:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageSrcAccess().getSTRINGTerminalRuleCall()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageSrcAccess().getSTRINGTerminalRuleCall()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleImageSrc"


    // $ANTLR start "entryRuleFONT"
    // InternalIDSLParser.g:499:1: entryRuleFONT : ruleFONT EOF ;
    public final void entryRuleFONT() throws RecognitionException {
        try {
            // InternalIDSLParser.g:500:1: ( ruleFONT EOF )
            // InternalIDSLParser.g:501:1: ruleFONT EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleFONT();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleFONT"


    // $ANTLR start "ruleFONT"
    // InternalIDSLParser.g:508:1: ruleFONT : ( ( rule__FONT__Group__0 ) ) ;
    public final void ruleFONT() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:512:2: ( ( ( rule__FONT__Group__0 ) ) )
            // InternalIDSLParser.g:513:2: ( ( rule__FONT__Group__0 ) )
            {
            // InternalIDSLParser.g:513:2: ( ( rule__FONT__Group__0 ) )
            // InternalIDSLParser.g:514:3: ( rule__FONT__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTAccess().getGroup()); 
            }
            // InternalIDSLParser.g:515:3: ( rule__FONT__Group__0 )
            // InternalIDSLParser.g:515:4: rule__FONT__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__FONT__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFONT"


    // $ANTLR start "entryRuleChartData"
    // InternalIDSLParser.g:524:1: entryRuleChartData : ruleChartData EOF ;
    public final void entryRuleChartData() throws RecognitionException {
        try {
            // InternalIDSLParser.g:525:1: ( ruleChartData EOF )
            // InternalIDSLParser.g:526:1: ruleChartData EOF
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getChartDataRule()); 
            }
            pushFollow(FOLLOW_1);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getChartDataRule()); 
            }
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
        }
        return ;
    }
    // $ANTLR end "entryRuleChartData"


    // $ANTLR start "ruleChartData"
    // InternalIDSLParser.g:533:1: ruleChartData : ( ( rule__ChartData__Group__0 ) ) ;
    public final void ruleChartData() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:537:2: ( ( ( rule__ChartData__Group__0 ) ) )
            // InternalIDSLParser.g:538:2: ( ( rule__ChartData__Group__0 ) )
            {
            // InternalIDSLParser.g:538:2: ( ( rule__ChartData__Group__0 ) )
            // InternalIDSLParser.g:539:3: ( rule__ChartData__Group__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getChartDataAccess().getGroup()); 
            }
            // InternalIDSLParser.g:540:3: ( rule__ChartData__Group__0 )
            // InternalIDSLParser.g:540:4: rule__ChartData__Group__0
            {
            pushFollow(FOLLOW_2);
            rule__ChartData__Group__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getChartDataAccess().getGroup()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleChartData"


    // $ANTLR start "ruleColor_Basic"
    // InternalIDSLParser.g:549:1: ruleColor_Basic : ( ( rule__Color_Basic__Alternatives ) ) ;
    public final void ruleColor_Basic() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:553:1: ( ( ( rule__Color_Basic__Alternatives ) ) )
            // InternalIDSLParser.g:554:2: ( ( rule__Color_Basic__Alternatives ) )
            {
            // InternalIDSLParser.g:554:2: ( ( rule__Color_Basic__Alternatives ) )
            // InternalIDSLParser.g:555:3: ( rule__Color_Basic__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColor_BasicAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:556:3: ( rule__Color_Basic__Alternatives )
            // InternalIDSLParser.g:556:4: rule__Color_Basic__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Color_Basic__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getColor_BasicAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleColor_Basic"


    // $ANTLR start "ruleFont_Weight"
    // InternalIDSLParser.g:565:1: ruleFont_Weight : ( ( rule__Font_Weight__Alternatives ) ) ;
    public final void ruleFont_Weight() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:569:1: ( ( ( rule__Font_Weight__Alternatives ) ) )
            // InternalIDSLParser.g:570:2: ( ( rule__Font_Weight__Alternatives ) )
            {
            // InternalIDSLParser.g:570:2: ( ( rule__Font_Weight__Alternatives ) )
            // InternalIDSLParser.g:571:3: ( rule__Font_Weight__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFont_WeightAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:572:3: ( rule__Font_Weight__Alternatives )
            // InternalIDSLParser.g:572:4: rule__Font_Weight__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Font_Weight__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFont_WeightAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFont_Weight"


    // $ANTLR start "ruleFont_Family"
    // InternalIDSLParser.g:581:1: ruleFont_Family : ( ( rule__Font_Family__Alternatives ) ) ;
    public final void ruleFont_Family() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:585:1: ( ( ( rule__Font_Family__Alternatives ) ) )
            // InternalIDSLParser.g:586:2: ( ( rule__Font_Family__Alternatives ) )
            {
            // InternalIDSLParser.g:586:2: ( ( rule__Font_Family__Alternatives ) )
            // InternalIDSLParser.g:587:3: ( rule__Font_Family__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFont_FamilyAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:588:3: ( rule__Font_Family__Alternatives )
            // InternalIDSLParser.g:588:4: rule__Font_Family__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__Font_Family__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFont_FamilyAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleFont_Family"


    // $ANTLR start "ruleAlignPossibilities"
    // InternalIDSLParser.g:597:1: ruleAlignPossibilities : ( ( rule__AlignPossibilities__Alternatives ) ) ;
    public final void ruleAlignPossibilities() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:601:1: ( ( ( rule__AlignPossibilities__Alternatives ) ) )
            // InternalIDSLParser.g:602:2: ( ( rule__AlignPossibilities__Alternatives ) )
            {
            // InternalIDSLParser.g:602:2: ( ( rule__AlignPossibilities__Alternatives ) )
            // InternalIDSLParser.g:603:3: ( rule__AlignPossibilities__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getAlignPossibilitiesAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:604:3: ( rule__AlignPossibilities__Alternatives )
            // InternalIDSLParser.g:604:4: rule__AlignPossibilities__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__AlignPossibilities__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getAlignPossibilitiesAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleAlignPossibilities"


    // $ANTLR start "ruleLegendStyle"
    // InternalIDSLParser.g:613:1: ruleLegendStyle : ( ( rule__LegendStyle__Alternatives ) ) ;
    public final void ruleLegendStyle() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:617:1: ( ( ( rule__LegendStyle__Alternatives ) ) )
            // InternalIDSLParser.g:618:2: ( ( rule__LegendStyle__Alternatives ) )
            {
            // InternalIDSLParser.g:618:2: ( ( rule__LegendStyle__Alternatives ) )
            // InternalIDSLParser.g:619:3: ( rule__LegendStyle__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLegendStyleAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:620:3: ( rule__LegendStyle__Alternatives )
            // InternalIDSLParser.g:620:4: rule__LegendStyle__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__LegendStyle__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLegendStyleAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleLegendStyle"


    // $ANTLR start "ruleShowOptionsOff"
    // InternalIDSLParser.g:629:1: ruleShowOptionsOff : ( ( rule__ShowOptionsOff__Alternatives ) ) ;
    public final void ruleShowOptionsOff() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:633:1: ( ( ( rule__ShowOptionsOff__Alternatives ) ) )
            // InternalIDSLParser.g:634:2: ( ( rule__ShowOptionsOff__Alternatives ) )
            {
            // InternalIDSLParser.g:634:2: ( ( rule__ShowOptionsOff__Alternatives ) )
            // InternalIDSLParser.g:635:3: ( rule__ShowOptionsOff__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getShowOptionsOffAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:636:3: ( rule__ShowOptionsOff__Alternatives )
            // InternalIDSLParser.g:636:4: rule__ShowOptionsOff__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__ShowOptionsOff__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getShowOptionsOffAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleShowOptionsOff"


    // $ANTLR start "rulePieType"
    // InternalIDSLParser.g:645:1: rulePieType : ( ( rule__PieType__Alternatives ) ) ;
    public final void rulePieType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:649:1: ( ( ( rule__PieType__Alternatives ) ) )
            // InternalIDSLParser.g:650:2: ( ( rule__PieType__Alternatives ) )
            {
            // InternalIDSLParser.g:650:2: ( ( rule__PieType__Alternatives ) )
            // InternalIDSLParser.g:651:3: ( rule__PieType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPieTypeAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:652:3: ( rule__PieType__Alternatives )
            // InternalIDSLParser.g:652:4: rule__PieType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__PieType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPieTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePieType"


    // $ANTLR start "ruleBarType"
    // InternalIDSLParser.g:661:1: ruleBarType : ( ( rule__BarType__Alternatives ) ) ;
    public final void ruleBarType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:665:1: ( ( ( rule__BarType__Alternatives ) ) )
            // InternalIDSLParser.g:666:2: ( ( rule__BarType__Alternatives ) )
            {
            // InternalIDSLParser.g:666:2: ( ( rule__BarType__Alternatives ) )
            // InternalIDSLParser.g:667:3: ( rule__BarType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarTypeAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:668:3: ( rule__BarType__Alternatives )
            // InternalIDSLParser.g:668:4: rule__BarType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__BarType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "ruleBarType"


    // $ANTLR start "rulePicturegraphType"
    // InternalIDSLParser.g:677:1: rulePicturegraphType : ( ( rule__PicturegraphType__Alternatives ) ) ;
    public final void rulePicturegraphType() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:681:1: ( ( ( rule__PicturegraphType__Alternatives ) ) )
            // InternalIDSLParser.g:682:2: ( ( rule__PicturegraphType__Alternatives ) )
            {
            // InternalIDSLParser.g:682:2: ( ( rule__PicturegraphType__Alternatives ) )
            // InternalIDSLParser.g:683:3: ( rule__PicturegraphType__Alternatives )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphTypeAccess().getAlternatives()); 
            }
            // InternalIDSLParser.g:684:3: ( rule__PicturegraphType__Alternatives )
            // InternalIDSLParser.g:684:4: rule__PicturegraphType__Alternatives
            {
            pushFollow(FOLLOW_2);
            rule__PicturegraphType__Alternatives();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphTypeAccess().getAlternatives()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rulePicturegraphType"


    // $ANTLR start "rule__InfographicElementType__Alternatives_1"
    // InternalIDSLParser.g:692:1: rule__InfographicElementType__Alternatives_1 : ( ( ( rule__InfographicElementType__Group_1_0__0 ) ) | ( ( rule__InfographicElementType__Group_1_1__0 ) ) | ( ( rule__InfographicElementType__Group_1_2__0 ) ) );
    public final void rule__InfographicElementType__Alternatives_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:696:1: ( ( ( rule__InfographicElementType__Group_1_0__0 ) ) | ( ( rule__InfographicElementType__Group_1_1__0 ) ) | ( ( rule__InfographicElementType__Group_1_2__0 ) ) )
            int alt1=3;
            switch ( input.LA(1) ) {
            case Bgcolor:
                {
                alt1=1;
                }
                break;
            case Bgpattern:
                {
                alt1=2;
                }
                break;
            case Bgimage:
                {
                alt1=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // InternalIDSLParser.g:697:2: ( ( rule__InfographicElementType__Group_1_0__0 ) )
                    {
                    // InternalIDSLParser.g:697:2: ( ( rule__InfographicElementType__Group_1_0__0 ) )
                    // InternalIDSLParser.g:698:3: ( rule__InfographicElementType__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getGroup_1_0()); 
                    }
                    // InternalIDSLParser.g:699:3: ( rule__InfographicElementType__Group_1_0__0 )
                    // InternalIDSLParser.g:699:4: rule__InfographicElementType__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getGroup_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:703:2: ( ( rule__InfographicElementType__Group_1_1__0 ) )
                    {
                    // InternalIDSLParser.g:703:2: ( ( rule__InfographicElementType__Group_1_1__0 ) )
                    // InternalIDSLParser.g:704:3: ( rule__InfographicElementType__Group_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getGroup_1_1()); 
                    }
                    // InternalIDSLParser.g:705:3: ( rule__InfographicElementType__Group_1_1__0 )
                    // InternalIDSLParser.g:705:4: rule__InfographicElementType__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getGroup_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:709:2: ( ( rule__InfographicElementType__Group_1_2__0 ) )
                    {
                    // InternalIDSLParser.g:709:2: ( ( rule__InfographicElementType__Group_1_2__0 ) )
                    // InternalIDSLParser.g:710:3: ( rule__InfographicElementType__Group_1_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getGroup_1_2()); 
                    }
                    // InternalIDSLParser.g:711:3: ( rule__InfographicElementType__Group_1_2__0 )
                    // InternalIDSLParser.g:711:4: rule__InfographicElementType__Group_1_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__Group_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getGroup_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Alternatives_1"


    // $ANTLR start "rule__Head__Alternatives_2"
    // InternalIDSLParser.g:719:1: rule__Head__Alternatives_2 : ( ( Off ) | ( ( rule__Head__Group_2_1__0 ) ) );
    public final void rule__Head__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:723:1: ( ( Off ) | ( ( rule__Head__Group_2_1__0 ) ) )
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==Off) ) {
                alt2=1;
            }
            else if ( (LA2_0==RULE_BEGIN) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // InternalIDSLParser.g:724:2: ( Off )
                    {
                    // InternalIDSLParser.g:724:2: ( Off )
                    // InternalIDSLParser.g:725:3: Off
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getOffKeyword_2_0()); 
                    }
                    match(input,Off,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getOffKeyword_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:730:2: ( ( rule__Head__Group_2_1__0 ) )
                    {
                    // InternalIDSLParser.g:730:2: ( ( rule__Head__Group_2_1__0 ) )
                    // InternalIDSLParser.g:731:3: ( rule__Head__Group_2_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1()); 
                    }
                    // InternalIDSLParser.g:732:3: ( rule__Head__Group_2_1__0 )
                    // InternalIDSLParser.g:732:4: rule__Head__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Alternatives_2"


    // $ANTLR start "rule__Head__Alternatives_2_1_0_1_0"
    // InternalIDSLParser.g:740:1: rule__Head__Alternatives_2_1_0_1_0 : ( ( ( rule__Head__Group_2_1_0_1_0_0__0 ) ) | ( ( rule__Head__Group_2_1_0_1_0_1__0 ) ) | ( ( rule__Head__Group_2_1_0_1_0_2__0 ) ) );
    public final void rule__Head__Alternatives_2_1_0_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:744:1: ( ( ( rule__Head__Group_2_1_0_1_0_0__0 ) ) | ( ( rule__Head__Group_2_1_0_1_0_1__0 ) ) | ( ( rule__Head__Group_2_1_0_1_0_2__0 ) ) )
            int alt3=3;
            switch ( input.LA(1) ) {
            case Bgcolor:
                {
                alt3=1;
                }
                break;
            case Bgpattern:
                {
                alt3=2;
                }
                break;
            case Bgimage:
                {
                alt3=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // InternalIDSLParser.g:745:2: ( ( rule__Head__Group_2_1_0_1_0_0__0 ) )
                    {
                    // InternalIDSLParser.g:745:2: ( ( rule__Head__Group_2_1_0_1_0_0__0 ) )
                    // InternalIDSLParser.g:746:3: ( rule__Head__Group_2_1_0_1_0_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_0_0()); 
                    }
                    // InternalIDSLParser.g:747:3: ( rule__Head__Group_2_1_0_1_0_0__0 )
                    // InternalIDSLParser.g:747:4: rule__Head__Group_2_1_0_1_0_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:751:2: ( ( rule__Head__Group_2_1_0_1_0_1__0 ) )
                    {
                    // InternalIDSLParser.g:751:2: ( ( rule__Head__Group_2_1_0_1_0_1__0 ) )
                    // InternalIDSLParser.g:752:3: ( rule__Head__Group_2_1_0_1_0_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_0_1()); 
                    }
                    // InternalIDSLParser.g:753:3: ( rule__Head__Group_2_1_0_1_0_1__0 )
                    // InternalIDSLParser.g:753:4: rule__Head__Group_2_1_0_1_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:757:2: ( ( rule__Head__Group_2_1_0_1_0_2__0 ) )
                    {
                    // InternalIDSLParser.g:757:2: ( ( rule__Head__Group_2_1_0_1_0_2__0 ) )
                    // InternalIDSLParser.g:758:3: ( rule__Head__Group_2_1_0_1_0_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_0_2()); 
                    }
                    // InternalIDSLParser.g:759:3: ( rule__Head__Group_2_1_0_1_0_2__0 )
                    // InternalIDSLParser.g:759:4: rule__Head__Group_2_1_0_1_0_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_0_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_0_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Alternatives_2_1_0_1_0"


    // $ANTLR start "rule__Title__Alternatives"
    // InternalIDSLParser.g:767:1: rule__Title__Alternatives : ( ( ( rule__Title__Group_0__0 ) ) | ( ( rule__Title__Group_1__0 ) ) );
    public final void rule__Title__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:771:1: ( ( ( rule__Title__Group_0__0 ) ) | ( ( rule__Title__Group_1__0 ) ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==Off) ) {
                alt4=1;
            }
            else if ( (LA4_0==RULE_BEGIN) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // InternalIDSLParser.g:772:2: ( ( rule__Title__Group_0__0 ) )
                    {
                    // InternalIDSLParser.g:772:2: ( ( rule__Title__Group_0__0 ) )
                    // InternalIDSLParser.g:773:3: ( rule__Title__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_0()); 
                    }
                    // InternalIDSLParser.g:774:3: ( rule__Title__Group_0__0 )
                    // InternalIDSLParser.g:774:4: rule__Title__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:778:2: ( ( rule__Title__Group_1__0 ) )
                    {
                    // InternalIDSLParser.g:778:2: ( ( rule__Title__Group_1__0 ) )
                    // InternalIDSLParser.g:779:3: ( rule__Title__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1()); 
                    }
                    // InternalIDSLParser.g:780:3: ( rule__Title__Group_1__0 )
                    // InternalIDSLParser.g:780:4: rule__Title__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Alternatives"


    // $ANTLR start "rule__Box__Alternatives_3_0"
    // InternalIDSLParser.g:788:1: rule__Box__Alternatives_3_0 : ( ( ( rule__Box__Group_3_0_0__0 ) ) | ( ( rule__Box__Group_3_0_1__0 ) ) | ( ( rule__Box__Group_3_0_2__0 ) ) );
    public final void rule__Box__Alternatives_3_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:792:1: ( ( ( rule__Box__Group_3_0_0__0 ) ) | ( ( rule__Box__Group_3_0_1__0 ) ) | ( ( rule__Box__Group_3_0_2__0 ) ) )
            int alt5=3;
            switch ( input.LA(1) ) {
            case Bgcolor:
                {
                alt5=1;
                }
                break;
            case Bgpattern:
                {
                alt5=2;
                }
                break;
            case Bgimage:
                {
                alt5=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;
            }

            switch (alt5) {
                case 1 :
                    // InternalIDSLParser.g:793:2: ( ( rule__Box__Group_3_0_0__0 ) )
                    {
                    // InternalIDSLParser.g:793:2: ( ( rule__Box__Group_3_0_0__0 ) )
                    // InternalIDSLParser.g:794:3: ( rule__Box__Group_3_0_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBoxAccess().getGroup_3_0_0()); 
                    }
                    // InternalIDSLParser.g:795:3: ( rule__Box__Group_3_0_0__0 )
                    // InternalIDSLParser.g:795:4: rule__Box__Group_3_0_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__Group_3_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBoxAccess().getGroup_3_0_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:799:2: ( ( rule__Box__Group_3_0_1__0 ) )
                    {
                    // InternalIDSLParser.g:799:2: ( ( rule__Box__Group_3_0_1__0 ) )
                    // InternalIDSLParser.g:800:3: ( rule__Box__Group_3_0_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBoxAccess().getGroup_3_0_1()); 
                    }
                    // InternalIDSLParser.g:801:3: ( rule__Box__Group_3_0_1__0 )
                    // InternalIDSLParser.g:801:4: rule__Box__Group_3_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__Group_3_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBoxAccess().getGroup_3_0_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:805:2: ( ( rule__Box__Group_3_0_2__0 ) )
                    {
                    // InternalIDSLParser.g:805:2: ( ( rule__Box__Group_3_0_2__0 ) )
                    // InternalIDSLParser.g:806:3: ( rule__Box__Group_3_0_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBoxAccess().getGroup_3_0_2()); 
                    }
                    // InternalIDSLParser.g:807:3: ( rule__Box__Group_3_0_2__0 )
                    // InternalIDSLParser.g:807:4: rule__Box__Group_3_0_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__Group_3_0_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBoxAccess().getGroup_3_0_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Alternatives_3_0"


    // $ANTLR start "rule__Text__Alternatives"
    // InternalIDSLParser.g:815:1: rule__Text__Alternatives : ( ( ( rule__Text__Group_0__0 ) ) | ( ( rule__Text__Group_1__0 ) ) );
    public final void rule__Text__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:819:1: ( ( ( rule__Text__Group_0__0 ) ) | ( ( rule__Text__Group_1__0 ) ) )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==RULE_TEXTID) ) {
                alt6=1;
            }
            else if ( (LA6_0==RULE_TITLETEXTID) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // InternalIDSLParser.g:820:2: ( ( rule__Text__Group_0__0 ) )
                    {
                    // InternalIDSLParser.g:820:2: ( ( rule__Text__Group_0__0 ) )
                    // InternalIDSLParser.g:821:3: ( rule__Text__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0()); 
                    }
                    // InternalIDSLParser.g:822:3: ( rule__Text__Group_0__0 )
                    // InternalIDSLParser.g:822:4: rule__Text__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:826:2: ( ( rule__Text__Group_1__0 ) )
                    {
                    // InternalIDSLParser.g:826:2: ( ( rule__Text__Group_1__0 ) )
                    // InternalIDSLParser.g:827:3: ( rule__Text__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1()); 
                    }
                    // InternalIDSLParser.g:828:3: ( rule__Text__Group_1__0 )
                    // InternalIDSLParser.g:828:4: rule__Text__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Alternatives"


    // $ANTLR start "rule__Foot__Alternatives_2"
    // InternalIDSLParser.g:836:1: rule__Foot__Alternatives_2 : ( ( Off ) | ( ( rule__Foot__Group_2_1__0 ) ) );
    public final void rule__Foot__Alternatives_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:840:1: ( ( Off ) | ( ( rule__Foot__Group_2_1__0 ) ) )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==Off) ) {
                alt7=1;
            }
            else if ( (LA7_0==Position||(LA7_0>=Size && LA7_0<=Text)||LA7_0==RULE_BEGIN) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;
            }
            switch (alt7) {
                case 1 :
                    // InternalIDSLParser.g:841:2: ( Off )
                    {
                    // InternalIDSLParser.g:841:2: ( Off )
                    // InternalIDSLParser.g:842:3: Off
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getOffKeyword_2_0()); 
                    }
                    match(input,Off,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getOffKeyword_2_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:847:2: ( ( rule__Foot__Group_2_1__0 ) )
                    {
                    // InternalIDSLParser.g:847:2: ( ( rule__Foot__Group_2_1__0 ) )
                    // InternalIDSLParser.g:848:3: ( rule__Foot__Group_2_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1()); 
                    }
                    // InternalIDSLParser.g:849:3: ( rule__Foot__Group_2_1__0 )
                    // InternalIDSLParser.g:849:4: rule__Foot__Group_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Alternatives_2"


    // $ANTLR start "rule__Foot__Alternatives_2_1_0_0_1"
    // InternalIDSLParser.g:857:1: rule__Foot__Alternatives_2_1_0_0_1 : ( ( ( rule__Foot__Group_2_1_0_0_1_0__0 ) ) | ( ( rule__Foot__Group_2_1_0_0_1_1__0 ) ) | ( ( rule__Foot__Group_2_1_0_0_1_2__0 ) ) );
    public final void rule__Foot__Alternatives_2_1_0_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:861:1: ( ( ( rule__Foot__Group_2_1_0_0_1_0__0 ) ) | ( ( rule__Foot__Group_2_1_0_0_1_1__0 ) ) | ( ( rule__Foot__Group_2_1_0_0_1_2__0 ) ) )
            int alt8=3;
            switch ( input.LA(1) ) {
            case Bgcolor:
                {
                alt8=1;
                }
                break;
            case Bgpattern:
                {
                alt8=2;
                }
                break;
            case Bgimage:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // InternalIDSLParser.g:862:2: ( ( rule__Foot__Group_2_1_0_0_1_0__0 ) )
                    {
                    // InternalIDSLParser.g:862:2: ( ( rule__Foot__Group_2_1_0_0_1_0__0 ) )
                    // InternalIDSLParser.g:863:3: ( rule__Foot__Group_2_1_0_0_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_0_1_0()); 
                    }
                    // InternalIDSLParser.g:864:3: ( rule__Foot__Group_2_1_0_0_1_0__0 )
                    // InternalIDSLParser.g:864:4: rule__Foot__Group_2_1_0_0_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_0_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_0_1_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:868:2: ( ( rule__Foot__Group_2_1_0_0_1_1__0 ) )
                    {
                    // InternalIDSLParser.g:868:2: ( ( rule__Foot__Group_2_1_0_0_1_1__0 ) )
                    // InternalIDSLParser.g:869:3: ( rule__Foot__Group_2_1_0_0_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_0_1_1()); 
                    }
                    // InternalIDSLParser.g:870:3: ( rule__Foot__Group_2_1_0_0_1_1__0 )
                    // InternalIDSLParser.g:870:4: rule__Foot__Group_2_1_0_0_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_0_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_0_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:874:2: ( ( rule__Foot__Group_2_1_0_0_1_2__0 ) )
                    {
                    // InternalIDSLParser.g:874:2: ( ( rule__Foot__Group_2_1_0_0_1_2__0 ) )
                    // InternalIDSLParser.g:875:3: ( rule__Foot__Group_2_1_0_0_1_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_0_1_2()); 
                    }
                    // InternalIDSLParser.g:876:3: ( rule__Foot__Group_2_1_0_0_1_2__0 )
                    // InternalIDSLParser.g:876:4: rule__Foot__Group_2_1_0_0_1_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_0_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_0_1_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Alternatives_2_1_0_0_1"


    // $ANTLR start "rule__Color__Alternatives"
    // InternalIDSLParser.g:884:1: rule__Color__Alternatives : ( ( ( rule__Color__Group_0__0 ) ) | ( ( rule__Color__Group_1__0 ) ) );
    public final void rule__Color__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:888:1: ( ( ( rule__Color__Group_0__0 ) ) | ( ( rule__Color__Group_1__0 ) ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( ((LA9_0>=Orange && LA9_0<=Yellow)||LA9_0==Black||LA9_0==Green||LA9_0==White||LA9_0==Blue||LA9_0==Pink||LA9_0==Red) ) {
                alt9=1;
            }
            else if ( (LA9_0==RULE_COLOR_HEX) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // InternalIDSLParser.g:889:2: ( ( rule__Color__Group_0__0 ) )
                    {
                    // InternalIDSLParser.g:889:2: ( ( rule__Color__Group_0__0 ) )
                    // InternalIDSLParser.g:890:3: ( rule__Color__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColorAccess().getGroup_0()); 
                    }
                    // InternalIDSLParser.g:891:3: ( rule__Color__Group_0__0 )
                    // InternalIDSLParser.g:891:4: rule__Color__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Color__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColorAccess().getGroup_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:895:2: ( ( rule__Color__Group_1__0 ) )
                    {
                    // InternalIDSLParser.g:895:2: ( ( rule__Color__Group_1__0 ) )
                    // InternalIDSLParser.g:896:3: ( rule__Color__Group_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColorAccess().getGroup_1()); 
                    }
                    // InternalIDSLParser.g:897:3: ( rule__Color__Group_1__0 )
                    // InternalIDSLParser.g:897:4: rule__Color__Group_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Color__Group_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColorAccess().getGroup_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Alternatives"


    // $ANTLR start "rule__Pattern__Alternatives"
    // InternalIDSLParser.g:905:1: rule__Pattern__Alternatives : ( ( ruleImageSrc ) | ( RULE_PATTERN_DB ) );
    public final void rule__Pattern__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:909:1: ( ( ruleImageSrc ) | ( RULE_PATTERN_DB ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==RULE_STRING) ) {
                alt10=1;
            }
            else if ( (LA10_0==RULE_PATTERN_DB) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // InternalIDSLParser.g:910:2: ( ruleImageSrc )
                    {
                    // InternalIDSLParser.g:910:2: ( ruleImageSrc )
                    // InternalIDSLParser.g:911:3: ruleImageSrc
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternAccess().getImageSrcParserRuleCall_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleImageSrc();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternAccess().getImageSrcParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:916:2: ( RULE_PATTERN_DB )
                    {
                    // InternalIDSLParser.g:916:2: ( RULE_PATTERN_DB )
                    // InternalIDSLParser.g:917:3: RULE_PATTERN_DB
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPatternAccess().getPATTERN_DBTerminalRuleCall_1()); 
                    }
                    match(input,RULE_PATTERN_DB,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPatternAccess().getPATTERN_DBTerminalRuleCall_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Pattern__Alternatives"


    // $ANTLR start "rule__Color_Basic__Alternatives"
    // InternalIDSLParser.g:926:1: rule__Color_Basic__Alternatives : ( ( ( Green ) ) | ( ( Red ) ) | ( ( Blue ) ) | ( ( Yellow ) ) | ( ( Black ) ) | ( ( White ) ) | ( ( Orange ) ) | ( ( Purple ) ) | ( ( Pink ) ) );
    public final void rule__Color_Basic__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:930:1: ( ( ( Green ) ) | ( ( Red ) ) | ( ( Blue ) ) | ( ( Yellow ) ) | ( ( Black ) ) | ( ( White ) ) | ( ( Orange ) ) | ( ( Purple ) ) | ( ( Pink ) ) )
            int alt11=9;
            switch ( input.LA(1) ) {
            case Green:
                {
                alt11=1;
                }
                break;
            case Red:
                {
                alt11=2;
                }
                break;
            case Blue:
                {
                alt11=3;
                }
                break;
            case Yellow:
                {
                alt11=4;
                }
                break;
            case Black:
                {
                alt11=5;
                }
                break;
            case White:
                {
                alt11=6;
                }
                break;
            case Orange:
                {
                alt11=7;
                }
                break;
            case Purple:
                {
                alt11=8;
                }
                break;
            case Pink:
                {
                alt11=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // InternalIDSLParser.g:931:2: ( ( Green ) )
                    {
                    // InternalIDSLParser.g:931:2: ( ( Green ) )
                    // InternalIDSLParser.g:932:3: ( Green )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:933:3: ( Green )
                    // InternalIDSLParser.g:933:4: Green
                    {
                    match(input,Green,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:937:2: ( ( Red ) )
                    {
                    // InternalIDSLParser.g:937:2: ( ( Red ) )
                    // InternalIDSLParser.g:938:3: ( Red )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:939:3: ( Red )
                    // InternalIDSLParser.g:939:4: Red
                    {
                    match(input,Red,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:943:2: ( ( Blue ) )
                    {
                    // InternalIDSLParser.g:943:2: ( ( Blue ) )
                    // InternalIDSLParser.g:944:3: ( Blue )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC3EnumLiteralDeclaration_2()); 
                    }
                    // InternalIDSLParser.g:945:3: ( Blue )
                    // InternalIDSLParser.g:945:4: Blue
                    {
                    match(input,Blue,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC3EnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:949:2: ( ( Yellow ) )
                    {
                    // InternalIDSLParser.g:949:2: ( ( Yellow ) )
                    // InternalIDSLParser.g:950:3: ( Yellow )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC4EnumLiteralDeclaration_3()); 
                    }
                    // InternalIDSLParser.g:951:3: ( Yellow )
                    // InternalIDSLParser.g:951:4: Yellow
                    {
                    match(input,Yellow,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC4EnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:955:2: ( ( Black ) )
                    {
                    // InternalIDSLParser.g:955:2: ( ( Black ) )
                    // InternalIDSLParser.g:956:3: ( Black )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC5EnumLiteralDeclaration_4()); 
                    }
                    // InternalIDSLParser.g:957:3: ( Black )
                    // InternalIDSLParser.g:957:4: Black
                    {
                    match(input,Black,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC5EnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:961:2: ( ( White ) )
                    {
                    // InternalIDSLParser.g:961:2: ( ( White ) )
                    // InternalIDSLParser.g:962:3: ( White )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC6EnumLiteralDeclaration_5()); 
                    }
                    // InternalIDSLParser.g:963:3: ( White )
                    // InternalIDSLParser.g:963:4: White
                    {
                    match(input,White,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC6EnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:967:2: ( ( Orange ) )
                    {
                    // InternalIDSLParser.g:967:2: ( ( Orange ) )
                    // InternalIDSLParser.g:968:3: ( Orange )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC7EnumLiteralDeclaration_6()); 
                    }
                    // InternalIDSLParser.g:969:3: ( Orange )
                    // InternalIDSLParser.g:969:4: Orange
                    {
                    match(input,Orange,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC7EnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalIDSLParser.g:973:2: ( ( Purple ) )
                    {
                    // InternalIDSLParser.g:973:2: ( ( Purple ) )
                    // InternalIDSLParser.g:974:3: ( Purple )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC8EnumLiteralDeclaration_7()); 
                    }
                    // InternalIDSLParser.g:975:3: ( Purple )
                    // InternalIDSLParser.g:975:4: Purple
                    {
                    match(input,Purple,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC8EnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalIDSLParser.g:979:2: ( ( Pink ) )
                    {
                    // InternalIDSLParser.g:979:2: ( ( Pink ) )
                    // InternalIDSLParser.g:980:3: ( Pink )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getColor_BasicAccess().getC9EnumLiteralDeclaration_8()); 
                    }
                    // InternalIDSLParser.g:981:3: ( Pink )
                    // InternalIDSLParser.g:981:4: Pink
                    {
                    match(input,Pink,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getColor_BasicAccess().getC9EnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color_Basic__Alternatives"


    // $ANTLR start "rule__Font_Weight__Alternatives"
    // InternalIDSLParser.g:989:1: rule__Font_Weight__Alternatives : ( ( ( Bold ) ) | ( ( DigitOneDigitZeroDigitZeroSpace ) ) | ( ( DigitTwoDigitZeroDigitZeroSpace ) ) | ( ( DigitThreeDigitZeroDigitZeroSpace ) ) | ( ( DigitFourDigitZeroDigitZeroSpace ) ) | ( ( DigitFiveDigitZeroDigitZeroSpace ) ) | ( ( DigitSixDigitZeroDigitZeroSpace ) ) | ( ( DigitSevenDigitZeroDigitZeroSpace ) ) | ( ( DigitEightDigitZeroDigitZeroSpace ) ) | ( ( DigitNineDigitZeroDigitZeroSpace ) ) );
    public final void rule__Font_Weight__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:993:1: ( ( ( Bold ) ) | ( ( DigitOneDigitZeroDigitZeroSpace ) ) | ( ( DigitTwoDigitZeroDigitZeroSpace ) ) | ( ( DigitThreeDigitZeroDigitZeroSpace ) ) | ( ( DigitFourDigitZeroDigitZeroSpace ) ) | ( ( DigitFiveDigitZeroDigitZeroSpace ) ) | ( ( DigitSixDigitZeroDigitZeroSpace ) ) | ( ( DigitSevenDigitZeroDigitZeroSpace ) ) | ( ( DigitEightDigitZeroDigitZeroSpace ) ) | ( ( DigitNineDigitZeroDigitZeroSpace ) ) )
            int alt12=10;
            switch ( input.LA(1) ) {
            case Bold:
                {
                alt12=1;
                }
                break;
            case DigitOneDigitZeroDigitZeroSpace:
                {
                alt12=2;
                }
                break;
            case DigitTwoDigitZeroDigitZeroSpace:
                {
                alt12=3;
                }
                break;
            case DigitThreeDigitZeroDigitZeroSpace:
                {
                alt12=4;
                }
                break;
            case DigitFourDigitZeroDigitZeroSpace:
                {
                alt12=5;
                }
                break;
            case DigitFiveDigitZeroDigitZeroSpace:
                {
                alt12=6;
                }
                break;
            case DigitSixDigitZeroDigitZeroSpace:
                {
                alt12=7;
                }
                break;
            case DigitSevenDigitZeroDigitZeroSpace:
                {
                alt12=8;
                }
                break;
            case DigitEightDigitZeroDigitZeroSpace:
                {
                alt12=9;
                }
                break;
            case DigitNineDigitZeroDigitZeroSpace:
                {
                alt12=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // InternalIDSLParser.g:994:2: ( ( Bold ) )
                    {
                    // InternalIDSLParser.g:994:2: ( ( Bold ) )
                    // InternalIDSLParser.g:995:3: ( Bold )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:996:3: ( Bold )
                    // InternalIDSLParser.g:996:4: Bold
                    {
                    match(input,Bold,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1000:2: ( ( DigitOneDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1000:2: ( ( DigitOneDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1001:3: ( DigitOneDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1002:3: ( DigitOneDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1002:4: DigitOneDigitZeroDigitZeroSpace
                    {
                    match(input,DigitOneDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:1006:2: ( ( DigitTwoDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1006:2: ( ( DigitTwoDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1007:3: ( DigitTwoDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB3EnumLiteralDeclaration_2()); 
                    }
                    // InternalIDSLParser.g:1008:3: ( DigitTwoDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1008:4: DigitTwoDigitZeroDigitZeroSpace
                    {
                    match(input,DigitTwoDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB3EnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:1012:2: ( ( DigitThreeDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1012:2: ( ( DigitThreeDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1013:3: ( DigitThreeDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB4EnumLiteralDeclaration_3()); 
                    }
                    // InternalIDSLParser.g:1014:3: ( DigitThreeDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1014:4: DigitThreeDigitZeroDigitZeroSpace
                    {
                    match(input,DigitThreeDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB4EnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:1018:2: ( ( DigitFourDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1018:2: ( ( DigitFourDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1019:3: ( DigitFourDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB5EnumLiteralDeclaration_4()); 
                    }
                    // InternalIDSLParser.g:1020:3: ( DigitFourDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1020:4: DigitFourDigitZeroDigitZeroSpace
                    {
                    match(input,DigitFourDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB5EnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:1024:2: ( ( DigitFiveDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1024:2: ( ( DigitFiveDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1025:3: ( DigitFiveDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB6EnumLiteralDeclaration_5()); 
                    }
                    // InternalIDSLParser.g:1026:3: ( DigitFiveDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1026:4: DigitFiveDigitZeroDigitZeroSpace
                    {
                    match(input,DigitFiveDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB6EnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:1030:2: ( ( DigitSixDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1030:2: ( ( DigitSixDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1031:3: ( DigitSixDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB7EnumLiteralDeclaration_6()); 
                    }
                    // InternalIDSLParser.g:1032:3: ( DigitSixDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1032:4: DigitSixDigitZeroDigitZeroSpace
                    {
                    match(input,DigitSixDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB7EnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    // InternalIDSLParser.g:1036:2: ( ( DigitSevenDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1036:2: ( ( DigitSevenDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1037:3: ( DigitSevenDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB8EnumLiteralDeclaration_7()); 
                    }
                    // InternalIDSLParser.g:1038:3: ( DigitSevenDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1038:4: DigitSevenDigitZeroDigitZeroSpace
                    {
                    match(input,DigitSevenDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB8EnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    // InternalIDSLParser.g:1042:2: ( ( DigitEightDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1042:2: ( ( DigitEightDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1043:3: ( DigitEightDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB9EnumLiteralDeclaration_8()); 
                    }
                    // InternalIDSLParser.g:1044:3: ( DigitEightDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1044:4: DigitEightDigitZeroDigitZeroSpace
                    {
                    match(input,DigitEightDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB9EnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;
                case 10 :
                    // InternalIDSLParser.g:1048:2: ( ( DigitNineDigitZeroDigitZeroSpace ) )
                    {
                    // InternalIDSLParser.g:1048:2: ( ( DigitNineDigitZeroDigitZeroSpace ) )
                    // InternalIDSLParser.g:1049:3: ( DigitNineDigitZeroDigitZeroSpace )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_WeightAccess().getB10EnumLiteralDeclaration_9()); 
                    }
                    // InternalIDSLParser.g:1050:3: ( DigitNineDigitZeroDigitZeroSpace )
                    // InternalIDSLParser.g:1050:4: DigitNineDigitZeroDigitZeroSpace
                    {
                    match(input,DigitNineDigitZeroDigitZeroSpace,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_WeightAccess().getB10EnumLiteralDeclaration_9()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Font_Weight__Alternatives"


    // $ANTLR start "rule__Font_Family__Alternatives"
    // InternalIDSLParser.g:1058:1: rule__Font_Family__Alternatives : ( ( ( Arial ) ) | ( ( Verdana ) ) | ( ( TimesNewRoman ) ) | ( ( SansSerif ) ) | ( ( Gotham ) ) );
    public final void rule__Font_Family__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1062:1: ( ( ( Arial ) ) | ( ( Verdana ) ) | ( ( TimesNewRoman ) ) | ( ( SansSerif ) ) | ( ( Gotham ) ) )
            int alt13=5;
            switch ( input.LA(1) ) {
            case Arial:
                {
                alt13=1;
                }
                break;
            case Verdana:
                {
                alt13=2;
                }
                break;
            case TimesNewRoman:
                {
                alt13=3;
                }
                break;
            case SansSerif:
                {
                alt13=4;
                }
                break;
            case Gotham:
                {
                alt13=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }

            switch (alt13) {
                case 1 :
                    // InternalIDSLParser.g:1063:2: ( ( Arial ) )
                    {
                    // InternalIDSLParser.g:1063:2: ( ( Arial ) )
                    // InternalIDSLParser.g:1064:3: ( Arial )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_FamilyAccess().getFont1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1065:3: ( Arial )
                    // InternalIDSLParser.g:1065:4: Arial
                    {
                    match(input,Arial,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_FamilyAccess().getFont1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1069:2: ( ( Verdana ) )
                    {
                    // InternalIDSLParser.g:1069:2: ( ( Verdana ) )
                    // InternalIDSLParser.g:1070:3: ( Verdana )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_FamilyAccess().getFont2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1071:3: ( Verdana )
                    // InternalIDSLParser.g:1071:4: Verdana
                    {
                    match(input,Verdana,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_FamilyAccess().getFont2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:1075:2: ( ( TimesNewRoman ) )
                    {
                    // InternalIDSLParser.g:1075:2: ( ( TimesNewRoman ) )
                    // InternalIDSLParser.g:1076:3: ( TimesNewRoman )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_FamilyAccess().getFont3EnumLiteralDeclaration_2()); 
                    }
                    // InternalIDSLParser.g:1077:3: ( TimesNewRoman )
                    // InternalIDSLParser.g:1077:4: TimesNewRoman
                    {
                    match(input,TimesNewRoman,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_FamilyAccess().getFont3EnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:1081:2: ( ( SansSerif ) )
                    {
                    // InternalIDSLParser.g:1081:2: ( ( SansSerif ) )
                    // InternalIDSLParser.g:1082:3: ( SansSerif )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_FamilyAccess().getFont4EnumLiteralDeclaration_3()); 
                    }
                    // InternalIDSLParser.g:1083:3: ( SansSerif )
                    // InternalIDSLParser.g:1083:4: SansSerif
                    {
                    match(input,SansSerif,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_FamilyAccess().getFont4EnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:1087:2: ( ( Gotham ) )
                    {
                    // InternalIDSLParser.g:1087:2: ( ( Gotham ) )
                    // InternalIDSLParser.g:1088:3: ( Gotham )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFont_FamilyAccess().getFont5EnumLiteralDeclaration_4()); 
                    }
                    // InternalIDSLParser.g:1089:3: ( Gotham )
                    // InternalIDSLParser.g:1089:4: Gotham
                    {
                    match(input,Gotham,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFont_FamilyAccess().getFont5EnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Font_Family__Alternatives"


    // $ANTLR start "rule__AlignPossibilities__Alternatives"
    // InternalIDSLParser.g:1097:1: rule__AlignPossibilities__Alternatives : ( ( ( Left ) ) | ( ( Right ) ) | ( ( Center ) ) );
    public final void rule__AlignPossibilities__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1101:1: ( ( ( Left ) ) | ( ( Right ) ) | ( ( Center ) ) )
            int alt14=3;
            switch ( input.LA(1) ) {
            case Left:
                {
                alt14=1;
                }
                break;
            case Right:
                {
                alt14=2;
                }
                break;
            case Center:
                {
                alt14=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // InternalIDSLParser.g:1102:2: ( ( Left ) )
                    {
                    // InternalIDSLParser.g:1102:2: ( ( Left ) )
                    // InternalIDSLParser.g:1103:3: ( Left )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAlignPossibilitiesAccess().getLeftEnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1104:3: ( Left )
                    // InternalIDSLParser.g:1104:4: Left
                    {
                    match(input,Left,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAlignPossibilitiesAccess().getLeftEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1108:2: ( ( Right ) )
                    {
                    // InternalIDSLParser.g:1108:2: ( ( Right ) )
                    // InternalIDSLParser.g:1109:3: ( Right )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAlignPossibilitiesAccess().getRightEnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1110:3: ( Right )
                    // InternalIDSLParser.g:1110:4: Right
                    {
                    match(input,Right,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAlignPossibilitiesAccess().getRightEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:1114:2: ( ( Center ) )
                    {
                    // InternalIDSLParser.g:1114:2: ( ( Center ) )
                    // InternalIDSLParser.g:1115:3: ( Center )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getAlignPossibilitiesAccess().getCenterEnumLiteralDeclaration_2()); 
                    }
                    // InternalIDSLParser.g:1116:3: ( Center )
                    // InternalIDSLParser.g:1116:4: Center
                    {
                    match(input,Center,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getAlignPossibilitiesAccess().getCenterEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__AlignPossibilities__Alternatives"


    // $ANTLR start "rule__LegendStyle__Alternatives"
    // InternalIDSLParser.g:1124:1: rule__LegendStyle__Alternatives : ( ( ( DigitOne ) ) | ( ( DigitTwo ) ) );
    public final void rule__LegendStyle__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1128:1: ( ( ( DigitOne ) ) | ( ( DigitTwo ) ) )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==DigitOne) ) {
                alt15=1;
            }
            else if ( (LA15_0==DigitTwo) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // InternalIDSLParser.g:1129:2: ( ( DigitOne ) )
                    {
                    // InternalIDSLParser.g:1129:2: ( ( DigitOne ) )
                    // InternalIDSLParser.g:1130:3: ( DigitOne )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLegendStyleAccess().getLegend1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1131:3: ( DigitOne )
                    // InternalIDSLParser.g:1131:4: DigitOne
                    {
                    match(input,DigitOne,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLegendStyleAccess().getLegend1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1135:2: ( ( DigitTwo ) )
                    {
                    // InternalIDSLParser.g:1135:2: ( ( DigitTwo ) )
                    // InternalIDSLParser.g:1136:3: ( DigitTwo )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLegendStyleAccess().getLegend2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1137:3: ( DigitTwo )
                    // InternalIDSLParser.g:1137:4: DigitTwo
                    {
                    match(input,DigitTwo,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLegendStyleAccess().getLegend2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__LegendStyle__Alternatives"


    // $ANTLR start "rule__ShowOptionsOff__Alternatives"
    // InternalIDSLParser.g:1145:1: rule__ShowOptionsOff__Alternatives : ( ( ( Off ) ) | ( ( N ) ) );
    public final void rule__ShowOptionsOff__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1149:1: ( ( ( Off ) ) | ( ( N ) ) )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==Off) ) {
                alt16=1;
            }
            else if ( (LA16_0==N) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // InternalIDSLParser.g:1150:2: ( ( Off ) )
                    {
                    // InternalIDSLParser.g:1150:2: ( ( Off ) )
                    // InternalIDSLParser.g:1151:3: ( Off )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getShowOptionsOffAccess().getShow1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1152:3: ( Off )
                    // InternalIDSLParser.g:1152:4: Off
                    {
                    match(input,Off,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getShowOptionsOffAccess().getShow1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1156:2: ( ( N ) )
                    {
                    // InternalIDSLParser.g:1156:2: ( ( N ) )
                    // InternalIDSLParser.g:1157:3: ( N )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getShowOptionsOffAccess().getShow2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1158:3: ( N )
                    // InternalIDSLParser.g:1158:4: N
                    {
                    match(input,N,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getShowOptionsOffAccess().getShow2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ShowOptionsOff__Alternatives"


    // $ANTLR start "rule__PieType__Alternatives"
    // InternalIDSLParser.g:1166:1: rule__PieType__Alternatives : ( ( ( Pie ) ) | ( ( Donut ) ) );
    public final void rule__PieType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1170:1: ( ( ( Pie ) ) | ( ( Donut ) ) )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==Pie) ) {
                alt17=1;
            }
            else if ( (LA17_0==Donut) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // InternalIDSLParser.g:1171:2: ( ( Pie ) )
                    {
                    // InternalIDSLParser.g:1171:2: ( ( Pie ) )
                    // InternalIDSLParser.g:1172:3: ( Pie )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPieTypeAccess().getType1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1173:3: ( Pie )
                    // InternalIDSLParser.g:1173:4: Pie
                    {
                    match(input,Pie,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPieTypeAccess().getType1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1177:2: ( ( Donut ) )
                    {
                    // InternalIDSLParser.g:1177:2: ( ( Donut ) )
                    // InternalIDSLParser.g:1178:3: ( Donut )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPieTypeAccess().getType2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1179:3: ( Donut )
                    // InternalIDSLParser.g:1179:4: Donut
                    {
                    match(input,Donut,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPieTypeAccess().getType2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PieType__Alternatives"


    // $ANTLR start "rule__BarType__Alternatives"
    // InternalIDSLParser.g:1187:1: rule__BarType__Alternatives : ( ( ( Horizontal ) ) | ( ( Vertical ) ) );
    public final void rule__BarType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1191:1: ( ( ( Horizontal ) ) | ( ( Vertical ) ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==Horizontal) ) {
                alt18=1;
            }
            else if ( (LA18_0==Vertical) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;
            }
            switch (alt18) {
                case 1 :
                    // InternalIDSLParser.g:1192:2: ( ( Horizontal ) )
                    {
                    // InternalIDSLParser.g:1192:2: ( ( Horizontal ) )
                    // InternalIDSLParser.g:1193:3: ( Horizontal )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarTypeAccess().getType1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1194:3: ( Horizontal )
                    // InternalIDSLParser.g:1194:4: Horizontal
                    {
                    match(input,Horizontal,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarTypeAccess().getType1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1198:2: ( ( Vertical ) )
                    {
                    // InternalIDSLParser.g:1198:2: ( ( Vertical ) )
                    // InternalIDSLParser.g:1199:3: ( Vertical )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarTypeAccess().getType2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1200:3: ( Vertical )
                    // InternalIDSLParser.g:1200:4: Vertical
                    {
                    match(input,Vertical,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarTypeAccess().getType2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__BarType__Alternatives"


    // $ANTLR start "rule__PicturegraphType__Alternatives"
    // InternalIDSLParser.g:1208:1: rule__PicturegraphType__Alternatives : ( ( ( Bin ) ) | ( ( Electric ) ) );
    public final void rule__PicturegraphType__Alternatives() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1212:1: ( ( ( Bin ) ) | ( ( Electric ) ) )
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==Bin) ) {
                alt19=1;
            }
            else if ( (LA19_0==Electric) ) {
                alt19=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;
            }
            switch (alt19) {
                case 1 :
                    // InternalIDSLParser.g:1213:2: ( ( Bin ) )
                    {
                    // InternalIDSLParser.g:1213:2: ( ( Bin ) )
                    // InternalIDSLParser.g:1214:3: ( Bin )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphTypeAccess().getType1EnumLiteralDeclaration_0()); 
                    }
                    // InternalIDSLParser.g:1215:3: ( Bin )
                    // InternalIDSLParser.g:1215:4: Bin
                    {
                    match(input,Bin,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphTypeAccess().getType1EnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:1219:2: ( ( Electric ) )
                    {
                    // InternalIDSLParser.g:1219:2: ( ( Electric ) )
                    // InternalIDSLParser.g:1220:3: ( Electric )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphTypeAccess().getType2EnumLiteralDeclaration_1()); 
                    }
                    // InternalIDSLParser.g:1221:3: ( Electric )
                    // InternalIDSLParser.g:1221:4: Electric
                    {
                    match(input,Electric,FOLLOW_2); if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphTypeAccess().getType2EnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__PicturegraphType__Alternatives"


    // $ANTLR start "rule__InfographicElementType__Group_0__0"
    // InternalIDSLParser.g:1229:1: rule__InfographicElementType__Group_0__0 : rule__InfographicElementType__Group_0__0__Impl rule__InfographicElementType__Group_0__1 ;
    public final void rule__InfographicElementType__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1233:1: ( rule__InfographicElementType__Group_0__0__Impl rule__InfographicElementType__Group_0__1 )
            // InternalIDSLParser.g:1234:2: rule__InfographicElementType__Group_0__0__Impl rule__InfographicElementType__Group_0__1
            {
            pushFollow(FOLLOW_3);
            rule__InfographicElementType__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_0__0"


    // $ANTLR start "rule__InfographicElementType__Group_0__0__Impl"
    // InternalIDSLParser.g:1241:1: rule__InfographicElementType__Group_0__0__Impl : ( Type ) ;
    public final void rule__InfographicElementType__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1245:1: ( ( Type ) )
            // InternalIDSLParser.g:1246:1: ( Type )
            {
            // InternalIDSLParser.g:1246:1: ( Type )
            // InternalIDSLParser.g:1247:2: Type
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getTypeKeyword_0_0()); 
            }
            match(input,Type,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getTypeKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_0__0__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_0__1"
    // InternalIDSLParser.g:1256:1: rule__InfographicElementType__Group_0__1 : rule__InfographicElementType__Group_0__1__Impl rule__InfographicElementType__Group_0__2 ;
    public final void rule__InfographicElementType__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1260:1: ( rule__InfographicElementType__Group_0__1__Impl rule__InfographicElementType__Group_0__2 )
            // InternalIDSLParser.g:1261:2: rule__InfographicElementType__Group_0__1__Impl rule__InfographicElementType__Group_0__2
            {
            pushFollow(FOLLOW_4);
            rule__InfographicElementType__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_0__1"


    // $ANTLR start "rule__InfographicElementType__Group_0__1__Impl"
    // InternalIDSLParser.g:1268:1: rule__InfographicElementType__Group_0__1__Impl : ( Colon ) ;
    public final void rule__InfographicElementType__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1272:1: ( ( Colon ) )
            // InternalIDSLParser.g:1273:1: ( Colon )
            {
            // InternalIDSLParser.g:1273:1: ( Colon )
            // InternalIDSLParser.g:1274:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_0__1__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_0__2"
    // InternalIDSLParser.g:1283:1: rule__InfographicElementType__Group_0__2 : rule__InfographicElementType__Group_0__2__Impl ;
    public final void rule__InfographicElementType__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1287:1: ( rule__InfographicElementType__Group_0__2__Impl )
            // InternalIDSLParser.g:1288:2: rule__InfographicElementType__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_0__2"


    // $ANTLR start "rule__InfographicElementType__Group_0__2__Impl"
    // InternalIDSLParser.g:1294:1: rule__InfographicElementType__Group_0__2__Impl : ( ( rule__InfographicElementType__TypeAssignment_0_2 ) ) ;
    public final void rule__InfographicElementType__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1298:1: ( ( ( rule__InfographicElementType__TypeAssignment_0_2 ) ) )
            // InternalIDSLParser.g:1299:1: ( ( rule__InfographicElementType__TypeAssignment_0_2 ) )
            {
            // InternalIDSLParser.g:1299:1: ( ( rule__InfographicElementType__TypeAssignment_0_2 ) )
            // InternalIDSLParser.g:1300:2: ( rule__InfographicElementType__TypeAssignment_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getTypeAssignment_0_2()); 
            }
            // InternalIDSLParser.g:1301:2: ( rule__InfographicElementType__TypeAssignment_0_2 )
            // InternalIDSLParser.g:1301:3: rule__InfographicElementType__TypeAssignment_0_2
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__TypeAssignment_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getTypeAssignment_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_0__2__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_0__0"
    // InternalIDSLParser.g:1310:1: rule__InfographicElementType__Group_1_0__0 : rule__InfographicElementType__Group_1_0__0__Impl rule__InfographicElementType__Group_1_0__1 ;
    public final void rule__InfographicElementType__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1314:1: ( rule__InfographicElementType__Group_1_0__0__Impl rule__InfographicElementType__Group_1_0__1 )
            // InternalIDSLParser.g:1315:2: rule__InfographicElementType__Group_1_0__0__Impl rule__InfographicElementType__Group_1_0__1
            {
            pushFollow(FOLLOW_3);
            rule__InfographicElementType__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_0__0"


    // $ANTLR start "rule__InfographicElementType__Group_1_0__0__Impl"
    // InternalIDSLParser.g:1322:1: rule__InfographicElementType__Group_1_0__0__Impl : ( Bgcolor ) ;
    public final void rule__InfographicElementType__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1326:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:1327:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:1327:1: ( Bgcolor )
            // InternalIDSLParser.g:1328:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgcolorKeyword_1_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgcolorKeyword_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_0__0__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_0__1"
    // InternalIDSLParser.g:1337:1: rule__InfographicElementType__Group_1_0__1 : rule__InfographicElementType__Group_1_0__1__Impl rule__InfographicElementType__Group_1_0__2 ;
    public final void rule__InfographicElementType__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1341:1: ( rule__InfographicElementType__Group_1_0__1__Impl rule__InfographicElementType__Group_1_0__2 )
            // InternalIDSLParser.g:1342:2: rule__InfographicElementType__Group_1_0__1__Impl rule__InfographicElementType__Group_1_0__2
            {
            pushFollow(FOLLOW_5);
            rule__InfographicElementType__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_0__1"


    // $ANTLR start "rule__InfographicElementType__Group_1_0__1__Impl"
    // InternalIDSLParser.g:1349:1: rule__InfographicElementType__Group_1_0__1__Impl : ( Colon ) ;
    public final void rule__InfographicElementType__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1353:1: ( ( Colon ) )
            // InternalIDSLParser.g:1354:1: ( Colon )
            {
            // InternalIDSLParser.g:1354:1: ( Colon )
            // InternalIDSLParser.g:1355:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_1_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_0__1__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_0__2"
    // InternalIDSLParser.g:1364:1: rule__InfographicElementType__Group_1_0__2 : rule__InfographicElementType__Group_1_0__2__Impl ;
    public final void rule__InfographicElementType__Group_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1368:1: ( rule__InfographicElementType__Group_1_0__2__Impl )
            // InternalIDSLParser.g:1369:2: rule__InfographicElementType__Group_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_0__2"


    // $ANTLR start "rule__InfographicElementType__Group_1_0__2__Impl"
    // InternalIDSLParser.g:1375:1: rule__InfographicElementType__Group_1_0__2__Impl : ( ( rule__InfographicElementType__BgcolorAssignment_1_0_2 ) ) ;
    public final void rule__InfographicElementType__Group_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1379:1: ( ( ( rule__InfographicElementType__BgcolorAssignment_1_0_2 ) ) )
            // InternalIDSLParser.g:1380:1: ( ( rule__InfographicElementType__BgcolorAssignment_1_0_2 ) )
            {
            // InternalIDSLParser.g:1380:1: ( ( rule__InfographicElementType__BgcolorAssignment_1_0_2 ) )
            // InternalIDSLParser.g:1381:2: ( rule__InfographicElementType__BgcolorAssignment_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgcolorAssignment_1_0_2()); 
            }
            // InternalIDSLParser.g:1382:2: ( rule__InfographicElementType__BgcolorAssignment_1_0_2 )
            // InternalIDSLParser.g:1382:3: rule__InfographicElementType__BgcolorAssignment_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__BgcolorAssignment_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgcolorAssignment_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_0__2__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_1__0"
    // InternalIDSLParser.g:1391:1: rule__InfographicElementType__Group_1_1__0 : rule__InfographicElementType__Group_1_1__0__Impl rule__InfographicElementType__Group_1_1__1 ;
    public final void rule__InfographicElementType__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1395:1: ( rule__InfographicElementType__Group_1_1__0__Impl rule__InfographicElementType__Group_1_1__1 )
            // InternalIDSLParser.g:1396:2: rule__InfographicElementType__Group_1_1__0__Impl rule__InfographicElementType__Group_1_1__1
            {
            pushFollow(FOLLOW_3);
            rule__InfographicElementType__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_1__0"


    // $ANTLR start "rule__InfographicElementType__Group_1_1__0__Impl"
    // InternalIDSLParser.g:1403:1: rule__InfographicElementType__Group_1_1__0__Impl : ( Bgpattern ) ;
    public final void rule__InfographicElementType__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1407:1: ( ( Bgpattern ) )
            // InternalIDSLParser.g:1408:1: ( Bgpattern )
            {
            // InternalIDSLParser.g:1408:1: ( Bgpattern )
            // InternalIDSLParser.g:1409:2: Bgpattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgpatternKeyword_1_1_0()); 
            }
            match(input,Bgpattern,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgpatternKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_1__0__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_1__1"
    // InternalIDSLParser.g:1418:1: rule__InfographicElementType__Group_1_1__1 : rule__InfographicElementType__Group_1_1__1__Impl rule__InfographicElementType__Group_1_1__2 ;
    public final void rule__InfographicElementType__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1422:1: ( rule__InfographicElementType__Group_1_1__1__Impl rule__InfographicElementType__Group_1_1__2 )
            // InternalIDSLParser.g:1423:2: rule__InfographicElementType__Group_1_1__1__Impl rule__InfographicElementType__Group_1_1__2
            {
            pushFollow(FOLLOW_6);
            rule__InfographicElementType__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_1__1"


    // $ANTLR start "rule__InfographicElementType__Group_1_1__1__Impl"
    // InternalIDSLParser.g:1430:1: rule__InfographicElementType__Group_1_1__1__Impl : ( Colon ) ;
    public final void rule__InfographicElementType__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1434:1: ( ( Colon ) )
            // InternalIDSLParser.g:1435:1: ( Colon )
            {
            // InternalIDSLParser.g:1435:1: ( Colon )
            // InternalIDSLParser.g:1436:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_1_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_1__1__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_1__2"
    // InternalIDSLParser.g:1445:1: rule__InfographicElementType__Group_1_1__2 : rule__InfographicElementType__Group_1_1__2__Impl ;
    public final void rule__InfographicElementType__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1449:1: ( rule__InfographicElementType__Group_1_1__2__Impl )
            // InternalIDSLParser.g:1450:2: rule__InfographicElementType__Group_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_1__2"


    // $ANTLR start "rule__InfographicElementType__Group_1_1__2__Impl"
    // InternalIDSLParser.g:1456:1: rule__InfographicElementType__Group_1_1__2__Impl : ( ( rule__InfographicElementType__BgpatternAssignment_1_1_2 ) ) ;
    public final void rule__InfographicElementType__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1460:1: ( ( ( rule__InfographicElementType__BgpatternAssignment_1_1_2 ) ) )
            // InternalIDSLParser.g:1461:1: ( ( rule__InfographicElementType__BgpatternAssignment_1_1_2 ) )
            {
            // InternalIDSLParser.g:1461:1: ( ( rule__InfographicElementType__BgpatternAssignment_1_1_2 ) )
            // InternalIDSLParser.g:1462:2: ( rule__InfographicElementType__BgpatternAssignment_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgpatternAssignment_1_1_2()); 
            }
            // InternalIDSLParser.g:1463:2: ( rule__InfographicElementType__BgpatternAssignment_1_1_2 )
            // InternalIDSLParser.g:1463:3: rule__InfographicElementType__BgpatternAssignment_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__BgpatternAssignment_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgpatternAssignment_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_1__2__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_2__0"
    // InternalIDSLParser.g:1472:1: rule__InfographicElementType__Group_1_2__0 : rule__InfographicElementType__Group_1_2__0__Impl rule__InfographicElementType__Group_1_2__1 ;
    public final void rule__InfographicElementType__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1476:1: ( rule__InfographicElementType__Group_1_2__0__Impl rule__InfographicElementType__Group_1_2__1 )
            // InternalIDSLParser.g:1477:2: rule__InfographicElementType__Group_1_2__0__Impl rule__InfographicElementType__Group_1_2__1
            {
            pushFollow(FOLLOW_3);
            rule__InfographicElementType__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_2__0"


    // $ANTLR start "rule__InfographicElementType__Group_1_2__0__Impl"
    // InternalIDSLParser.g:1484:1: rule__InfographicElementType__Group_1_2__0__Impl : ( Bgimage ) ;
    public final void rule__InfographicElementType__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1488:1: ( ( Bgimage ) )
            // InternalIDSLParser.g:1489:1: ( Bgimage )
            {
            // InternalIDSLParser.g:1489:1: ( Bgimage )
            // InternalIDSLParser.g:1490:2: Bgimage
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgimageKeyword_1_2_0()); 
            }
            match(input,Bgimage,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgimageKeyword_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_2__0__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_2__1"
    // InternalIDSLParser.g:1499:1: rule__InfographicElementType__Group_1_2__1 : rule__InfographicElementType__Group_1_2__1__Impl rule__InfographicElementType__Group_1_2__2 ;
    public final void rule__InfographicElementType__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1503:1: ( rule__InfographicElementType__Group_1_2__1__Impl rule__InfographicElementType__Group_1_2__2 )
            // InternalIDSLParser.g:1504:2: rule__InfographicElementType__Group_1_2__1__Impl rule__InfographicElementType__Group_1_2__2
            {
            pushFollow(FOLLOW_7);
            rule__InfographicElementType__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_2__1"


    // $ANTLR start "rule__InfographicElementType__Group_1_2__1__Impl"
    // InternalIDSLParser.g:1511:1: rule__InfographicElementType__Group_1_2__1__Impl : ( Colon ) ;
    public final void rule__InfographicElementType__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1515:1: ( ( Colon ) )
            // InternalIDSLParser.g:1516:1: ( Colon )
            {
            // InternalIDSLParser.g:1516:1: ( Colon )
            // InternalIDSLParser.g:1517:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_1_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_2__1__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_1_2__2"
    // InternalIDSLParser.g:1526:1: rule__InfographicElementType__Group_1_2__2 : rule__InfographicElementType__Group_1_2__2__Impl ;
    public final void rule__InfographicElementType__Group_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1530:1: ( rule__InfographicElementType__Group_1_2__2__Impl )
            // InternalIDSLParser.g:1531:2: rule__InfographicElementType__Group_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_2__2"


    // $ANTLR start "rule__InfographicElementType__Group_1_2__2__Impl"
    // InternalIDSLParser.g:1537:1: rule__InfographicElementType__Group_1_2__2__Impl : ( ( rule__InfographicElementType__BgimageAssignment_1_2_2 ) ) ;
    public final void rule__InfographicElementType__Group_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1541:1: ( ( ( rule__InfographicElementType__BgimageAssignment_1_2_2 ) ) )
            // InternalIDSLParser.g:1542:1: ( ( rule__InfographicElementType__BgimageAssignment_1_2_2 ) )
            {
            // InternalIDSLParser.g:1542:1: ( ( rule__InfographicElementType__BgimageAssignment_1_2_2 ) )
            // InternalIDSLParser.g:1543:2: ( rule__InfographicElementType__BgimageAssignment_1_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgimageAssignment_1_2_2()); 
            }
            // InternalIDSLParser.g:1544:2: ( rule__InfographicElementType__BgimageAssignment_1_2_2 )
            // InternalIDSLParser.g:1544:3: rule__InfographicElementType__BgimageAssignment_1_2_2
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__BgimageAssignment_1_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgimageAssignment_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_1_2__2__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_2__0"
    // InternalIDSLParser.g:1553:1: rule__InfographicElementType__Group_2__0 : rule__InfographicElementType__Group_2__0__Impl rule__InfographicElementType__Group_2__1 ;
    public final void rule__InfographicElementType__Group_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1557:1: ( rule__InfographicElementType__Group_2__0__Impl rule__InfographicElementType__Group_2__1 )
            // InternalIDSLParser.g:1558:2: rule__InfographicElementType__Group_2__0__Impl rule__InfographicElementType__Group_2__1
            {
            pushFollow(FOLLOW_3);
            rule__InfographicElementType__Group_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_2__0"


    // $ANTLR start "rule__InfographicElementType__Group_2__0__Impl"
    // InternalIDSLParser.g:1565:1: rule__InfographicElementType__Group_2__0__Impl : ( Bgsize ) ;
    public final void rule__InfographicElementType__Group_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1569:1: ( ( Bgsize ) )
            // InternalIDSLParser.g:1570:1: ( Bgsize )
            {
            // InternalIDSLParser.g:1570:1: ( Bgsize )
            // InternalIDSLParser.g:1571:2: Bgsize
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgsizeKeyword_2_0()); 
            }
            match(input,Bgsize,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgsizeKeyword_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_2__0__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_2__1"
    // InternalIDSLParser.g:1580:1: rule__InfographicElementType__Group_2__1 : rule__InfographicElementType__Group_2__1__Impl rule__InfographicElementType__Group_2__2 ;
    public final void rule__InfographicElementType__Group_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1584:1: ( rule__InfographicElementType__Group_2__1__Impl rule__InfographicElementType__Group_2__2 )
            // InternalIDSLParser.g:1585:2: rule__InfographicElementType__Group_2__1__Impl rule__InfographicElementType__Group_2__2
            {
            pushFollow(FOLLOW_8);
            rule__InfographicElementType__Group_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_2__1"


    // $ANTLR start "rule__InfographicElementType__Group_2__1__Impl"
    // InternalIDSLParser.g:1592:1: rule__InfographicElementType__Group_2__1__Impl : ( Colon ) ;
    public final void rule__InfographicElementType__Group_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1596:1: ( ( Colon ) )
            // InternalIDSLParser.g:1597:1: ( Colon )
            {
            // InternalIDSLParser.g:1597:1: ( Colon )
            // InternalIDSLParser.g:1598:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getColonKeyword_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_2__1__Impl"


    // $ANTLR start "rule__InfographicElementType__Group_2__2"
    // InternalIDSLParser.g:1607:1: rule__InfographicElementType__Group_2__2 : rule__InfographicElementType__Group_2__2__Impl ;
    public final void rule__InfographicElementType__Group_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1611:1: ( rule__InfographicElementType__Group_2__2__Impl )
            // InternalIDSLParser.g:1612:2: rule__InfographicElementType__Group_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__Group_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_2__2"


    // $ANTLR start "rule__InfographicElementType__Group_2__2__Impl"
    // InternalIDSLParser.g:1618:1: rule__InfographicElementType__Group_2__2__Impl : ( ( rule__InfographicElementType__BgsizeAssignment_2_2 ) ) ;
    public final void rule__InfographicElementType__Group_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1622:1: ( ( ( rule__InfographicElementType__BgsizeAssignment_2_2 ) ) )
            // InternalIDSLParser.g:1623:1: ( ( rule__InfographicElementType__BgsizeAssignment_2_2 ) )
            {
            // InternalIDSLParser.g:1623:1: ( ( rule__InfographicElementType__BgsizeAssignment_2_2 ) )
            // InternalIDSLParser.g:1624:2: ( rule__InfographicElementType__BgsizeAssignment_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgsizeAssignment_2_2()); 
            }
            // InternalIDSLParser.g:1625:2: ( rule__InfographicElementType__BgsizeAssignment_2_2 )
            // InternalIDSLParser.g:1625:3: rule__InfographicElementType__BgsizeAssignment_2_2
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__BgsizeAssignment_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgsizeAssignment_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__Group_2__2__Impl"


    // $ANTLR start "rule__Head__Group__0"
    // InternalIDSLParser.g:1634:1: rule__Head__Group__0 : rule__Head__Group__0__Impl rule__Head__Group__1 ;
    public final void rule__Head__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1638:1: ( rule__Head__Group__0__Impl rule__Head__Group__1 )
            // InternalIDSLParser.g:1639:2: rule__Head__Group__0__Impl rule__Head__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group__0"


    // $ANTLR start "rule__Head__Group__0__Impl"
    // InternalIDSLParser.g:1646:1: rule__Head__Group__0__Impl : ( ( rule__Head__NameAssignment_0 ) ) ;
    public final void rule__Head__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1650:1: ( ( ( rule__Head__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:1651:1: ( ( rule__Head__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:1651:1: ( ( rule__Head__NameAssignment_0 ) )
            // InternalIDSLParser.g:1652:2: ( rule__Head__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:1653:2: ( rule__Head__NameAssignment_0 )
            // InternalIDSLParser.g:1653:3: rule__Head__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Head__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group__0__Impl"


    // $ANTLR start "rule__Head__Group__1"
    // InternalIDSLParser.g:1661:1: rule__Head__Group__1 : rule__Head__Group__1__Impl rule__Head__Group__2 ;
    public final void rule__Head__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1665:1: ( rule__Head__Group__1__Impl rule__Head__Group__2 )
            // InternalIDSLParser.g:1666:2: rule__Head__Group__1__Impl rule__Head__Group__2
            {
            pushFollow(FOLLOW_9);
            rule__Head__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group__1"


    // $ANTLR start "rule__Head__Group__1__Impl"
    // InternalIDSLParser.g:1673:1: rule__Head__Group__1__Impl : ( Colon ) ;
    public final void rule__Head__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1677:1: ( ( Colon ) )
            // InternalIDSLParser.g:1678:1: ( Colon )
            {
            // InternalIDSLParser.g:1678:1: ( Colon )
            // InternalIDSLParser.g:1679:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group__1__Impl"


    // $ANTLR start "rule__Head__Group__2"
    // InternalIDSLParser.g:1688:1: rule__Head__Group__2 : rule__Head__Group__2__Impl ;
    public final void rule__Head__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1692:1: ( rule__Head__Group__2__Impl )
            // InternalIDSLParser.g:1693:2: rule__Head__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group__2"


    // $ANTLR start "rule__Head__Group__2__Impl"
    // InternalIDSLParser.g:1699:1: rule__Head__Group__2__Impl : ( ( rule__Head__Alternatives_2 ) ) ;
    public final void rule__Head__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1703:1: ( ( ( rule__Head__Alternatives_2 ) ) )
            // InternalIDSLParser.g:1704:1: ( ( rule__Head__Alternatives_2 ) )
            {
            // InternalIDSLParser.g:1704:1: ( ( rule__Head__Alternatives_2 ) )
            // InternalIDSLParser.g:1705:2: ( rule__Head__Alternatives_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getAlternatives_2()); 
            }
            // InternalIDSLParser.g:1706:2: ( rule__Head__Alternatives_2 )
            // InternalIDSLParser.g:1706:3: rule__Head__Alternatives_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1__0"
    // InternalIDSLParser.g:1715:1: rule__Head__Group_2_1__0 : rule__Head__Group_2_1__0__Impl rule__Head__Group_2_1__1 ;
    public final void rule__Head__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1719:1: ( rule__Head__Group_2_1__0__Impl rule__Head__Group_2_1__1 )
            // InternalIDSLParser.g:1720:2: rule__Head__Group_2_1__0__Impl rule__Head__Group_2_1__1
            {
            pushFollow(FOLLOW_10);
            rule__Head__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1__0"


    // $ANTLR start "rule__Head__Group_2_1__0__Impl"
    // InternalIDSLParser.g:1727:1: rule__Head__Group_2_1__0__Impl : ( ( rule__Head__Group_2_1_0__0 ) ) ;
    public final void rule__Head__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1731:1: ( ( ( rule__Head__Group_2_1_0__0 ) ) )
            // InternalIDSLParser.g:1732:1: ( ( rule__Head__Group_2_1_0__0 ) )
            {
            // InternalIDSLParser.g:1732:1: ( ( rule__Head__Group_2_1_0__0 ) )
            // InternalIDSLParser.g:1733:2: ( rule__Head__Group_2_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getGroup_2_1_0()); 
            }
            // InternalIDSLParser.g:1734:2: ( rule__Head__Group_2_1_0__0 )
            // InternalIDSLParser.g:1734:3: rule__Head__Group_2_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getGroup_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1__1"
    // InternalIDSLParser.g:1742:1: rule__Head__Group_2_1__1 : rule__Head__Group_2_1__1__Impl ;
    public final void rule__Head__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1746:1: ( rule__Head__Group_2_1__1__Impl )
            // InternalIDSLParser.g:1747:2: rule__Head__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1__1"


    // $ANTLR start "rule__Head__Group_2_1__1__Impl"
    // InternalIDSLParser.g:1753:1: rule__Head__Group_2_1__1__Impl : ( RULE_END ) ;
    public final void rule__Head__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1757:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:1758:1: ( RULE_END )
            {
            // InternalIDSLParser.g:1758:1: ( RULE_END )
            // InternalIDSLParser.g:1759:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getENDTerminalRuleCall_2_1_1()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getENDTerminalRuleCall_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0__0"
    // InternalIDSLParser.g:1769:1: rule__Head__Group_2_1_0__0 : rule__Head__Group_2_1_0__0__Impl rule__Head__Group_2_1_0__1 ;
    public final void rule__Head__Group_2_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1773:1: ( rule__Head__Group_2_1_0__0__Impl rule__Head__Group_2_1_0__1 )
            // InternalIDSLParser.g:1774:2: rule__Head__Group_2_1_0__0__Impl rule__Head__Group_2_1_0__1
            {
            pushFollow(FOLLOW_11);
            rule__Head__Group_2_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0__0"


    // $ANTLR start "rule__Head__Group_2_1_0__0__Impl"
    // InternalIDSLParser.g:1781:1: rule__Head__Group_2_1_0__0__Impl : ( RULE_BEGIN ) ;
    public final void rule__Head__Group_2_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1785:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:1786:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:1786:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:1787:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBEGINTerminalRuleCall_2_1_0_0()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBEGINTerminalRuleCall_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0__1"
    // InternalIDSLParser.g:1796:1: rule__Head__Group_2_1_0__1 : rule__Head__Group_2_1_0__1__Impl ;
    public final void rule__Head__Group_2_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1800:1: ( rule__Head__Group_2_1_0__1__Impl )
            // InternalIDSLParser.g:1801:2: rule__Head__Group_2_1_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0__1"


    // $ANTLR start "rule__Head__Group_2_1_0__1__Impl"
    // InternalIDSLParser.g:1807:1: rule__Head__Group_2_1_0__1__Impl : ( ( rule__Head__UnorderedGroup_2_1_0_1 ) ) ;
    public final void rule__Head__Group_2_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1811:1: ( ( ( rule__Head__UnorderedGroup_2_1_0_1 ) ) )
            // InternalIDSLParser.g:1812:1: ( ( rule__Head__UnorderedGroup_2_1_0_1 ) )
            {
            // InternalIDSLParser.g:1812:1: ( ( rule__Head__UnorderedGroup_2_1_0_1 ) )
            // InternalIDSLParser.g:1813:2: ( rule__Head__UnorderedGroup_2_1_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1()); 
            }
            // InternalIDSLParser.g:1814:2: ( rule__Head__UnorderedGroup_2_1_0_1 )
            // InternalIDSLParser.g:1814:3: rule__Head__UnorderedGroup_2_1_0_1
            {
            pushFollow(FOLLOW_2);
            rule__Head__UnorderedGroup_2_1_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_0__0"
    // InternalIDSLParser.g:1823:1: rule__Head__Group_2_1_0_1_0_0__0 : rule__Head__Group_2_1_0_1_0_0__0__Impl rule__Head__Group_2_1_0_1_0_0__1 ;
    public final void rule__Head__Group_2_1_0_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1827:1: ( rule__Head__Group_2_1_0_1_0_0__0__Impl rule__Head__Group_2_1_0_1_0_0__1 )
            // InternalIDSLParser.g:1828:2: rule__Head__Group_2_1_0_1_0_0__0__Impl rule__Head__Group_2_1_0_1_0_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_0__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_0__0__Impl"
    // InternalIDSLParser.g:1835:1: rule__Head__Group_2_1_0_1_0_0__0__Impl : ( Bgcolor ) ;
    public final void rule__Head__Group_2_1_0_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1839:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:1840:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:1840:1: ( Bgcolor )
            // InternalIDSLParser.g:1841:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgcolorKeyword_2_1_0_1_0_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgcolorKeyword_2_1_0_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_0__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_0__1"
    // InternalIDSLParser.g:1850:1: rule__Head__Group_2_1_0_1_0_0__1 : rule__Head__Group_2_1_0_1_0_0__1__Impl rule__Head__Group_2_1_0_1_0_0__2 ;
    public final void rule__Head__Group_2_1_0_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1854:1: ( rule__Head__Group_2_1_0_1_0_0__1__Impl rule__Head__Group_2_1_0_1_0_0__2 )
            // InternalIDSLParser.g:1855:2: rule__Head__Group_2_1_0_1_0_0__1__Impl rule__Head__Group_2_1_0_1_0_0__2
            {
            pushFollow(FOLLOW_5);
            rule__Head__Group_2_1_0_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_0__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_0__1__Impl"
    // InternalIDSLParser.g:1862:1: rule__Head__Group_2_1_0_1_0_0__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1866:1: ( ( Colon ) )
            // InternalIDSLParser.g:1867:1: ( Colon )
            {
            // InternalIDSLParser.g:1867:1: ( Colon )
            // InternalIDSLParser.g:1868:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_0_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_0__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_0__2"
    // InternalIDSLParser.g:1877:1: rule__Head__Group_2_1_0_1_0_0__2 : rule__Head__Group_2_1_0_1_0_0__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1881:1: ( rule__Head__Group_2_1_0_1_0_0__2__Impl )
            // InternalIDSLParser.g:1882:2: rule__Head__Group_2_1_0_1_0_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_0__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_0__2__Impl"
    // InternalIDSLParser.g:1888:1: rule__Head__Group_2_1_0_1_0_0__2__Impl : ( ( rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1892:1: ( ( ( rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 ) ) )
            // InternalIDSLParser.g:1893:1: ( ( rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 ) )
            {
            // InternalIDSLParser.g:1893:1: ( ( rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 ) )
            // InternalIDSLParser.g:1894:2: ( rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgcolorAssignment_2_1_0_1_0_0_2()); 
            }
            // InternalIDSLParser.g:1895:2: ( rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 )
            // InternalIDSLParser.g:1895:3: rule__Head__BgcolorAssignment_2_1_0_1_0_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__BgcolorAssignment_2_1_0_1_0_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgcolorAssignment_2_1_0_1_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_0__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_1__0"
    // InternalIDSLParser.g:1904:1: rule__Head__Group_2_1_0_1_0_1__0 : rule__Head__Group_2_1_0_1_0_1__0__Impl rule__Head__Group_2_1_0_1_0_1__1 ;
    public final void rule__Head__Group_2_1_0_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1908:1: ( rule__Head__Group_2_1_0_1_0_1__0__Impl rule__Head__Group_2_1_0_1_0_1__1 )
            // InternalIDSLParser.g:1909:2: rule__Head__Group_2_1_0_1_0_1__0__Impl rule__Head__Group_2_1_0_1_0_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_1__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_1__0__Impl"
    // InternalIDSLParser.g:1916:1: rule__Head__Group_2_1_0_1_0_1__0__Impl : ( Bgpattern ) ;
    public final void rule__Head__Group_2_1_0_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1920:1: ( ( Bgpattern ) )
            // InternalIDSLParser.g:1921:1: ( Bgpattern )
            {
            // InternalIDSLParser.g:1921:1: ( Bgpattern )
            // InternalIDSLParser.g:1922:2: Bgpattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgpatternKeyword_2_1_0_1_0_1_0()); 
            }
            match(input,Bgpattern,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgpatternKeyword_2_1_0_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_1__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_1__1"
    // InternalIDSLParser.g:1931:1: rule__Head__Group_2_1_0_1_0_1__1 : rule__Head__Group_2_1_0_1_0_1__1__Impl rule__Head__Group_2_1_0_1_0_1__2 ;
    public final void rule__Head__Group_2_1_0_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1935:1: ( rule__Head__Group_2_1_0_1_0_1__1__Impl rule__Head__Group_2_1_0_1_0_1__2 )
            // InternalIDSLParser.g:1936:2: rule__Head__Group_2_1_0_1_0_1__1__Impl rule__Head__Group_2_1_0_1_0_1__2
            {
            pushFollow(FOLLOW_6);
            rule__Head__Group_2_1_0_1_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_1__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_1__1__Impl"
    // InternalIDSLParser.g:1943:1: rule__Head__Group_2_1_0_1_0_1__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1947:1: ( ( Colon ) )
            // InternalIDSLParser.g:1948:1: ( Colon )
            {
            // InternalIDSLParser.g:1948:1: ( Colon )
            // InternalIDSLParser.g:1949:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_0_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_1__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_1__2"
    // InternalIDSLParser.g:1958:1: rule__Head__Group_2_1_0_1_0_1__2 : rule__Head__Group_2_1_0_1_0_1__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1962:1: ( rule__Head__Group_2_1_0_1_0_1__2__Impl )
            // InternalIDSLParser.g:1963:2: rule__Head__Group_2_1_0_1_0_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_1__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_1__2__Impl"
    // InternalIDSLParser.g:1969:1: rule__Head__Group_2_1_0_1_0_1__2__Impl : ( ( rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_0_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1973:1: ( ( ( rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 ) ) )
            // InternalIDSLParser.g:1974:1: ( ( rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 ) )
            {
            // InternalIDSLParser.g:1974:1: ( ( rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 ) )
            // InternalIDSLParser.g:1975:2: ( rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgpatternAssignment_2_1_0_1_0_1_2()); 
            }
            // InternalIDSLParser.g:1976:2: ( rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 )
            // InternalIDSLParser.g:1976:3: rule__Head__BgpatternAssignment_2_1_0_1_0_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__BgpatternAssignment_2_1_0_1_0_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgpatternAssignment_2_1_0_1_0_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_1__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_2__0"
    // InternalIDSLParser.g:1985:1: rule__Head__Group_2_1_0_1_0_2__0 : rule__Head__Group_2_1_0_1_0_2__0__Impl rule__Head__Group_2_1_0_1_0_2__1 ;
    public final void rule__Head__Group_2_1_0_1_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:1989:1: ( rule__Head__Group_2_1_0_1_0_2__0__Impl rule__Head__Group_2_1_0_1_0_2__1 )
            // InternalIDSLParser.g:1990:2: rule__Head__Group_2_1_0_1_0_2__0__Impl rule__Head__Group_2_1_0_1_0_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_2__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_2__0__Impl"
    // InternalIDSLParser.g:1997:1: rule__Head__Group_2_1_0_1_0_2__0__Impl : ( Bgimage ) ;
    public final void rule__Head__Group_2_1_0_1_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2001:1: ( ( Bgimage ) )
            // InternalIDSLParser.g:2002:1: ( Bgimage )
            {
            // InternalIDSLParser.g:2002:1: ( Bgimage )
            // InternalIDSLParser.g:2003:2: Bgimage
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgimageKeyword_2_1_0_1_0_2_0()); 
            }
            match(input,Bgimage,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgimageKeyword_2_1_0_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_2__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_2__1"
    // InternalIDSLParser.g:2012:1: rule__Head__Group_2_1_0_1_0_2__1 : rule__Head__Group_2_1_0_1_0_2__1__Impl rule__Head__Group_2_1_0_1_0_2__2 ;
    public final void rule__Head__Group_2_1_0_1_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2016:1: ( rule__Head__Group_2_1_0_1_0_2__1__Impl rule__Head__Group_2_1_0_1_0_2__2 )
            // InternalIDSLParser.g:2017:2: rule__Head__Group_2_1_0_1_0_2__1__Impl rule__Head__Group_2_1_0_1_0_2__2
            {
            pushFollow(FOLLOW_7);
            rule__Head__Group_2_1_0_1_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_2__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_2__1__Impl"
    // InternalIDSLParser.g:2024:1: rule__Head__Group_2_1_0_1_0_2__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2028:1: ( ( Colon ) )
            // InternalIDSLParser.g:2029:1: ( Colon )
            {
            // InternalIDSLParser.g:2029:1: ( Colon )
            // InternalIDSLParser.g:2030:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_0_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_2__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_2__2"
    // InternalIDSLParser.g:2039:1: rule__Head__Group_2_1_0_1_0_2__2 : rule__Head__Group_2_1_0_1_0_2__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_0_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2043:1: ( rule__Head__Group_2_1_0_1_0_2__2__Impl )
            // InternalIDSLParser.g:2044:2: rule__Head__Group_2_1_0_1_0_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_0_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_2__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_0_2__2__Impl"
    // InternalIDSLParser.g:2050:1: rule__Head__Group_2_1_0_1_0_2__2__Impl : ( ( rule__Head__BgimageAssignment_2_1_0_1_0_2_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_0_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2054:1: ( ( ( rule__Head__BgimageAssignment_2_1_0_1_0_2_2 ) ) )
            // InternalIDSLParser.g:2055:1: ( ( rule__Head__BgimageAssignment_2_1_0_1_0_2_2 ) )
            {
            // InternalIDSLParser.g:2055:1: ( ( rule__Head__BgimageAssignment_2_1_0_1_0_2_2 ) )
            // InternalIDSLParser.g:2056:2: ( rule__Head__BgimageAssignment_2_1_0_1_0_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgimageAssignment_2_1_0_1_0_2_2()); 
            }
            // InternalIDSLParser.g:2057:2: ( rule__Head__BgimageAssignment_2_1_0_1_0_2_2 )
            // InternalIDSLParser.g:2057:3: rule__Head__BgimageAssignment_2_1_0_1_0_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__BgimageAssignment_2_1_0_1_0_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgimageAssignment_2_1_0_1_0_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_0_2__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_1__0"
    // InternalIDSLParser.g:2066:1: rule__Head__Group_2_1_0_1_1__0 : rule__Head__Group_2_1_0_1_1__0__Impl rule__Head__Group_2_1_0_1_1__1 ;
    public final void rule__Head__Group_2_1_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2070:1: ( rule__Head__Group_2_1_0_1_1__0__Impl rule__Head__Group_2_1_0_1_1__1 )
            // InternalIDSLParser.g:2071:2: rule__Head__Group_2_1_0_1_1__0__Impl rule__Head__Group_2_1_0_1_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_1__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_1__0__Impl"
    // InternalIDSLParser.g:2078:1: rule__Head__Group_2_1_0_1_1__0__Impl : ( Size ) ;
    public final void rule__Head__Group_2_1_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2082:1: ( ( Size ) )
            // InternalIDSLParser.g:2083:1: ( Size )
            {
            // InternalIDSLParser.g:2083:1: ( Size )
            // InternalIDSLParser.g:2084:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getSizeKeyword_2_1_0_1_1_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getSizeKeyword_2_1_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_1__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_1__1"
    // InternalIDSLParser.g:2093:1: rule__Head__Group_2_1_0_1_1__1 : rule__Head__Group_2_1_0_1_1__1__Impl rule__Head__Group_2_1_0_1_1__2 ;
    public final void rule__Head__Group_2_1_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2097:1: ( rule__Head__Group_2_1_0_1_1__1__Impl rule__Head__Group_2_1_0_1_1__2 )
            // InternalIDSLParser.g:2098:2: rule__Head__Group_2_1_0_1_1__1__Impl rule__Head__Group_2_1_0_1_1__2
            {
            pushFollow(FOLLOW_8);
            rule__Head__Group_2_1_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_1__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_1__1__Impl"
    // InternalIDSLParser.g:2105:1: rule__Head__Group_2_1_0_1_1__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2109:1: ( ( Colon ) )
            // InternalIDSLParser.g:2110:1: ( Colon )
            {
            // InternalIDSLParser.g:2110:1: ( Colon )
            // InternalIDSLParser.g:2111:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_1__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_1__2"
    // InternalIDSLParser.g:2120:1: rule__Head__Group_2_1_0_1_1__2 : rule__Head__Group_2_1_0_1_1__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2124:1: ( rule__Head__Group_2_1_0_1_1__2__Impl )
            // InternalIDSLParser.g:2125:2: rule__Head__Group_2_1_0_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_1__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_1__2__Impl"
    // InternalIDSLParser.g:2131:1: rule__Head__Group_2_1_0_1_1__2__Impl : ( ( rule__Head__SizeAssignment_2_1_0_1_1_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2135:1: ( ( ( rule__Head__SizeAssignment_2_1_0_1_1_2 ) ) )
            // InternalIDSLParser.g:2136:1: ( ( rule__Head__SizeAssignment_2_1_0_1_1_2 ) )
            {
            // InternalIDSLParser.g:2136:1: ( ( rule__Head__SizeAssignment_2_1_0_1_1_2 ) )
            // InternalIDSLParser.g:2137:2: ( rule__Head__SizeAssignment_2_1_0_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getSizeAssignment_2_1_0_1_1_2()); 
            }
            // InternalIDSLParser.g:2138:2: ( rule__Head__SizeAssignment_2_1_0_1_1_2 )
            // InternalIDSLParser.g:2138:3: rule__Head__SizeAssignment_2_1_0_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__SizeAssignment_2_1_0_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getSizeAssignment_2_1_0_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_1__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_2__0"
    // InternalIDSLParser.g:2147:1: rule__Head__Group_2_1_0_1_2__0 : rule__Head__Group_2_1_0_1_2__0__Impl rule__Head__Group_2_1_0_1_2__1 ;
    public final void rule__Head__Group_2_1_0_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2151:1: ( rule__Head__Group_2_1_0_1_2__0__Impl rule__Head__Group_2_1_0_1_2__1 )
            // InternalIDSLParser.g:2152:2: rule__Head__Group_2_1_0_1_2__0__Impl rule__Head__Group_2_1_0_1_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_2__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_2__0__Impl"
    // InternalIDSLParser.g:2159:1: rule__Head__Group_2_1_0_1_2__0__Impl : ( Position ) ;
    public final void rule__Head__Group_2_1_0_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2163:1: ( ( Position ) )
            // InternalIDSLParser.g:2164:1: ( Position )
            {
            // InternalIDSLParser.g:2164:1: ( Position )
            // InternalIDSLParser.g:2165:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getPositionKeyword_2_1_0_1_2_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getPositionKeyword_2_1_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_2__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_2__1"
    // InternalIDSLParser.g:2174:1: rule__Head__Group_2_1_0_1_2__1 : rule__Head__Group_2_1_0_1_2__1__Impl rule__Head__Group_2_1_0_1_2__2 ;
    public final void rule__Head__Group_2_1_0_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2178:1: ( rule__Head__Group_2_1_0_1_2__1__Impl rule__Head__Group_2_1_0_1_2__2 )
            // InternalIDSLParser.g:2179:2: rule__Head__Group_2_1_0_1_2__1__Impl rule__Head__Group_2_1_0_1_2__2
            {
            pushFollow(FOLLOW_8);
            rule__Head__Group_2_1_0_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_2__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_2__1__Impl"
    // InternalIDSLParser.g:2186:1: rule__Head__Group_2_1_0_1_2__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2190:1: ( ( Colon ) )
            // InternalIDSLParser.g:2191:1: ( Colon )
            {
            // InternalIDSLParser.g:2191:1: ( Colon )
            // InternalIDSLParser.g:2192:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_2__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_2__2"
    // InternalIDSLParser.g:2201:1: rule__Head__Group_2_1_0_1_2__2 : rule__Head__Group_2_1_0_1_2__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2205:1: ( rule__Head__Group_2_1_0_1_2__2__Impl )
            // InternalIDSLParser.g:2206:2: rule__Head__Group_2_1_0_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_2__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_2__2__Impl"
    // InternalIDSLParser.g:2212:1: rule__Head__Group_2_1_0_1_2__2__Impl : ( ( rule__Head__PositionAssignment_2_1_0_1_2_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2216:1: ( ( ( rule__Head__PositionAssignment_2_1_0_1_2_2 ) ) )
            // InternalIDSLParser.g:2217:1: ( ( rule__Head__PositionAssignment_2_1_0_1_2_2 ) )
            {
            // InternalIDSLParser.g:2217:1: ( ( rule__Head__PositionAssignment_2_1_0_1_2_2 ) )
            // InternalIDSLParser.g:2218:2: ( rule__Head__PositionAssignment_2_1_0_1_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getPositionAssignment_2_1_0_1_2_2()); 
            }
            // InternalIDSLParser.g:2219:2: ( rule__Head__PositionAssignment_2_1_0_1_2_2 )
            // InternalIDSLParser.g:2219:3: rule__Head__PositionAssignment_2_1_0_1_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__PositionAssignment_2_1_0_1_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getPositionAssignment_2_1_0_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_2__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_3__0"
    // InternalIDSLParser.g:2228:1: rule__Head__Group_2_1_0_1_3__0 : rule__Head__Group_2_1_0_1_3__0__Impl rule__Head__Group_2_1_0_1_3__1 ;
    public final void rule__Head__Group_2_1_0_1_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2232:1: ( rule__Head__Group_2_1_0_1_3__0__Impl rule__Head__Group_2_1_0_1_3__1 )
            // InternalIDSLParser.g:2233:2: rule__Head__Group_2_1_0_1_3__0__Impl rule__Head__Group_2_1_0_1_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_3__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_3__0__Impl"
    // InternalIDSLParser.g:2240:1: rule__Head__Group_2_1_0_1_3__0__Impl : ( Logo ) ;
    public final void rule__Head__Group_2_1_0_1_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2244:1: ( ( Logo ) )
            // InternalIDSLParser.g:2245:1: ( Logo )
            {
            // InternalIDSLParser.g:2245:1: ( Logo )
            // InternalIDSLParser.g:2246:2: Logo
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getLogoKeyword_2_1_0_1_3_0()); 
            }
            match(input,Logo,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getLogoKeyword_2_1_0_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_3__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_3__1"
    // InternalIDSLParser.g:2255:1: rule__Head__Group_2_1_0_1_3__1 : rule__Head__Group_2_1_0_1_3__1__Impl rule__Head__Group_2_1_0_1_3__2 ;
    public final void rule__Head__Group_2_1_0_1_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2259:1: ( rule__Head__Group_2_1_0_1_3__1__Impl rule__Head__Group_2_1_0_1_3__2 )
            // InternalIDSLParser.g:2260:2: rule__Head__Group_2_1_0_1_3__1__Impl rule__Head__Group_2_1_0_1_3__2
            {
            pushFollow(FOLLOW_12);
            rule__Head__Group_2_1_0_1_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_3__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_3__1__Impl"
    // InternalIDSLParser.g:2267:1: rule__Head__Group_2_1_0_1_3__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2271:1: ( ( Colon ) )
            // InternalIDSLParser.g:2272:1: ( Colon )
            {
            // InternalIDSLParser.g:2272:1: ( Colon )
            // InternalIDSLParser.g:2273:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_3__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_3__2"
    // InternalIDSLParser.g:2282:1: rule__Head__Group_2_1_0_1_3__2 : rule__Head__Group_2_1_0_1_3__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2286:1: ( rule__Head__Group_2_1_0_1_3__2__Impl )
            // InternalIDSLParser.g:2287:2: rule__Head__Group_2_1_0_1_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_3__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_3__2__Impl"
    // InternalIDSLParser.g:2293:1: rule__Head__Group_2_1_0_1_3__2__Impl : ( ( rule__Head__LogoAssignment_2_1_0_1_3_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2297:1: ( ( ( rule__Head__LogoAssignment_2_1_0_1_3_2 ) ) )
            // InternalIDSLParser.g:2298:1: ( ( rule__Head__LogoAssignment_2_1_0_1_3_2 ) )
            {
            // InternalIDSLParser.g:2298:1: ( ( rule__Head__LogoAssignment_2_1_0_1_3_2 ) )
            // InternalIDSLParser.g:2299:2: ( rule__Head__LogoAssignment_2_1_0_1_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getLogoAssignment_2_1_0_1_3_2()); 
            }
            // InternalIDSLParser.g:2300:2: ( rule__Head__LogoAssignment_2_1_0_1_3_2 )
            // InternalIDSLParser.g:2300:3: rule__Head__LogoAssignment_2_1_0_1_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__LogoAssignment_2_1_0_1_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getLogoAssignment_2_1_0_1_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_3__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_4__0"
    // InternalIDSLParser.g:2309:1: rule__Head__Group_2_1_0_1_4__0 : rule__Head__Group_2_1_0_1_4__0__Impl rule__Head__Group_2_1_0_1_4__1 ;
    public final void rule__Head__Group_2_1_0_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2313:1: ( rule__Head__Group_2_1_0_1_4__0__Impl rule__Head__Group_2_1_0_1_4__1 )
            // InternalIDSLParser.g:2314:2: rule__Head__Group_2_1_0_1_4__0__Impl rule__Head__Group_2_1_0_1_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_4__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_4__0__Impl"
    // InternalIDSLParser.g:2321:1: rule__Head__Group_2_1_0_1_4__0__Impl : ( Title ) ;
    public final void rule__Head__Group_2_1_0_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2325:1: ( ( Title ) )
            // InternalIDSLParser.g:2326:1: ( Title )
            {
            // InternalIDSLParser.g:2326:1: ( Title )
            // InternalIDSLParser.g:2327:2: Title
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getTitleKeyword_2_1_0_1_4_0()); 
            }
            match(input,Title,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getTitleKeyword_2_1_0_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_4__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_4__1"
    // InternalIDSLParser.g:2336:1: rule__Head__Group_2_1_0_1_4__1 : rule__Head__Group_2_1_0_1_4__1__Impl rule__Head__Group_2_1_0_1_4__2 ;
    public final void rule__Head__Group_2_1_0_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2340:1: ( rule__Head__Group_2_1_0_1_4__1__Impl rule__Head__Group_2_1_0_1_4__2 )
            // InternalIDSLParser.g:2341:2: rule__Head__Group_2_1_0_1_4__1__Impl rule__Head__Group_2_1_0_1_4__2
            {
            pushFollow(FOLLOW_9);
            rule__Head__Group_2_1_0_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_4__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_4__1__Impl"
    // InternalIDSLParser.g:2348:1: rule__Head__Group_2_1_0_1_4__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2352:1: ( ( Colon ) )
            // InternalIDSLParser.g:2353:1: ( Colon )
            {
            // InternalIDSLParser.g:2353:1: ( Colon )
            // InternalIDSLParser.g:2354:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_4__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_4__2"
    // InternalIDSLParser.g:2363:1: rule__Head__Group_2_1_0_1_4__2 : rule__Head__Group_2_1_0_1_4__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2367:1: ( rule__Head__Group_2_1_0_1_4__2__Impl )
            // InternalIDSLParser.g:2368:2: rule__Head__Group_2_1_0_1_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_4__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_4__2__Impl"
    // InternalIDSLParser.g:2374:1: rule__Head__Group_2_1_0_1_4__2__Impl : ( ( rule__Head__TitleAssignment_2_1_0_1_4_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2378:1: ( ( ( rule__Head__TitleAssignment_2_1_0_1_4_2 ) ) )
            // InternalIDSLParser.g:2379:1: ( ( rule__Head__TitleAssignment_2_1_0_1_4_2 ) )
            {
            // InternalIDSLParser.g:2379:1: ( ( rule__Head__TitleAssignment_2_1_0_1_4_2 ) )
            // InternalIDSLParser.g:2380:2: ( rule__Head__TitleAssignment_2_1_0_1_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getTitleAssignment_2_1_0_1_4_2()); 
            }
            // InternalIDSLParser.g:2381:2: ( rule__Head__TitleAssignment_2_1_0_1_4_2 )
            // InternalIDSLParser.g:2381:3: rule__Head__TitleAssignment_2_1_0_1_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__TitleAssignment_2_1_0_1_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getTitleAssignment_2_1_0_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_4__2__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_5__0"
    // InternalIDSLParser.g:2390:1: rule__Head__Group_2_1_0_1_5__0 : rule__Head__Group_2_1_0_1_5__0__Impl rule__Head__Group_2_1_0_1_5__1 ;
    public final void rule__Head__Group_2_1_0_1_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2394:1: ( rule__Head__Group_2_1_0_1_5__0__Impl rule__Head__Group_2_1_0_1_5__1 )
            // InternalIDSLParser.g:2395:2: rule__Head__Group_2_1_0_1_5__0__Impl rule__Head__Group_2_1_0_1_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Head__Group_2_1_0_1_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_5__0"


    // $ANTLR start "rule__Head__Group_2_1_0_1_5__0__Impl"
    // InternalIDSLParser.g:2402:1: rule__Head__Group_2_1_0_1_5__0__Impl : ( Subtitle ) ;
    public final void rule__Head__Group_2_1_0_1_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2406:1: ( ( Subtitle ) )
            // InternalIDSLParser.g:2407:1: ( Subtitle )
            {
            // InternalIDSLParser.g:2407:1: ( Subtitle )
            // InternalIDSLParser.g:2408:2: Subtitle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getSubtitleKeyword_2_1_0_1_5_0()); 
            }
            match(input,Subtitle,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getSubtitleKeyword_2_1_0_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_5__0__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_5__1"
    // InternalIDSLParser.g:2417:1: rule__Head__Group_2_1_0_1_5__1 : rule__Head__Group_2_1_0_1_5__1__Impl rule__Head__Group_2_1_0_1_5__2 ;
    public final void rule__Head__Group_2_1_0_1_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2421:1: ( rule__Head__Group_2_1_0_1_5__1__Impl rule__Head__Group_2_1_0_1_5__2 )
            // InternalIDSLParser.g:2422:2: rule__Head__Group_2_1_0_1_5__1__Impl rule__Head__Group_2_1_0_1_5__2
            {
            pushFollow(FOLLOW_9);
            rule__Head__Group_2_1_0_1_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_5__1"


    // $ANTLR start "rule__Head__Group_2_1_0_1_5__1__Impl"
    // InternalIDSLParser.g:2429:1: rule__Head__Group_2_1_0_1_5__1__Impl : ( Colon ) ;
    public final void rule__Head__Group_2_1_0_1_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2433:1: ( ( Colon ) )
            // InternalIDSLParser.g:2434:1: ( Colon )
            {
            // InternalIDSLParser.g:2434:1: ( Colon )
            // InternalIDSLParser.g:2435:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getColonKeyword_2_1_0_1_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_5__1__Impl"


    // $ANTLR start "rule__Head__Group_2_1_0_1_5__2"
    // InternalIDSLParser.g:2444:1: rule__Head__Group_2_1_0_1_5__2 : rule__Head__Group_2_1_0_1_5__2__Impl ;
    public final void rule__Head__Group_2_1_0_1_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2448:1: ( rule__Head__Group_2_1_0_1_5__2__Impl )
            // InternalIDSLParser.g:2449:2: rule__Head__Group_2_1_0_1_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__Group_2_1_0_1_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_5__2"


    // $ANTLR start "rule__Head__Group_2_1_0_1_5__2__Impl"
    // InternalIDSLParser.g:2455:1: rule__Head__Group_2_1_0_1_5__2__Impl : ( ( rule__Head__SubtitleAssignment_2_1_0_1_5_2 ) ) ;
    public final void rule__Head__Group_2_1_0_1_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2459:1: ( ( ( rule__Head__SubtitleAssignment_2_1_0_1_5_2 ) ) )
            // InternalIDSLParser.g:2460:1: ( ( rule__Head__SubtitleAssignment_2_1_0_1_5_2 ) )
            {
            // InternalIDSLParser.g:2460:1: ( ( rule__Head__SubtitleAssignment_2_1_0_1_5_2 ) )
            // InternalIDSLParser.g:2461:2: ( rule__Head__SubtitleAssignment_2_1_0_1_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getSubtitleAssignment_2_1_0_1_5_2()); 
            }
            // InternalIDSLParser.g:2462:2: ( rule__Head__SubtitleAssignment_2_1_0_1_5_2 )
            // InternalIDSLParser.g:2462:3: rule__Head__SubtitleAssignment_2_1_0_1_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Head__SubtitleAssignment_2_1_0_1_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getSubtitleAssignment_2_1_0_1_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__Group_2_1_0_1_5__2__Impl"


    // $ANTLR start "rule__Title__Group_0__0"
    // InternalIDSLParser.g:2471:1: rule__Title__Group_0__0 : rule__Title__Group_0__0__Impl rule__Title__Group_0__1 ;
    public final void rule__Title__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2475:1: ( rule__Title__Group_0__0__Impl rule__Title__Group_0__1 )
            // InternalIDSLParser.g:2476:2: rule__Title__Group_0__0__Impl rule__Title__Group_0__1
            {
            pushFollow(FOLLOW_13);
            rule__Title__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_0__0"


    // $ANTLR start "rule__Title__Group_0__0__Impl"
    // InternalIDSLParser.g:2483:1: rule__Title__Group_0__0__Impl : ( () ) ;
    public final void rule__Title__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2487:1: ( ( () ) )
            // InternalIDSLParser.g:2488:1: ( () )
            {
            // InternalIDSLParser.g:2488:1: ( () )
            // InternalIDSLParser.g:2489:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getTitleAction_0_0()); 
            }
            // InternalIDSLParser.g:2490:2: ()
            // InternalIDSLParser.g:2490:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getTitleAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_0__0__Impl"


    // $ANTLR start "rule__Title__Group_0__1"
    // InternalIDSLParser.g:2498:1: rule__Title__Group_0__1 : rule__Title__Group_0__1__Impl ;
    public final void rule__Title__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2502:1: ( rule__Title__Group_0__1__Impl )
            // InternalIDSLParser.g:2503:2: rule__Title__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_0__1"


    // $ANTLR start "rule__Title__Group_0__1__Impl"
    // InternalIDSLParser.g:2509:1: rule__Title__Group_0__1__Impl : ( Off ) ;
    public final void rule__Title__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2513:1: ( ( Off ) )
            // InternalIDSLParser.g:2514:1: ( Off )
            {
            // InternalIDSLParser.g:2514:1: ( Off )
            // InternalIDSLParser.g:2515:2: Off
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getOffKeyword_0_1()); 
            }
            match(input,Off,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getOffKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_0__1__Impl"


    // $ANTLR start "rule__Title__Group_1__0"
    // InternalIDSLParser.g:2525:1: rule__Title__Group_1__0 : rule__Title__Group_1__0__Impl rule__Title__Group_1__1 ;
    public final void rule__Title__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2529:1: ( rule__Title__Group_1__0__Impl rule__Title__Group_1__1 )
            // InternalIDSLParser.g:2530:2: rule__Title__Group_1__0__Impl rule__Title__Group_1__1
            {
            pushFollow(FOLLOW_10);
            rule__Title__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1__0"


    // $ANTLR start "rule__Title__Group_1__0__Impl"
    // InternalIDSLParser.g:2537:1: rule__Title__Group_1__0__Impl : ( ( rule__Title__Group_1_0__0 ) ) ;
    public final void rule__Title__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2541:1: ( ( ( rule__Title__Group_1_0__0 ) ) )
            // InternalIDSLParser.g:2542:1: ( ( rule__Title__Group_1_0__0 ) )
            {
            // InternalIDSLParser.g:2542:1: ( ( rule__Title__Group_1_0__0 ) )
            // InternalIDSLParser.g:2543:2: ( rule__Title__Group_1_0__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getGroup_1_0()); 
            }
            // InternalIDSLParser.g:2544:2: ( rule__Title__Group_1_0__0 )
            // InternalIDSLParser.g:2544:3: rule__Title__Group_1_0__0
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getGroup_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1__0__Impl"


    // $ANTLR start "rule__Title__Group_1__1"
    // InternalIDSLParser.g:2552:1: rule__Title__Group_1__1 : rule__Title__Group_1__1__Impl ;
    public final void rule__Title__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2556:1: ( rule__Title__Group_1__1__Impl )
            // InternalIDSLParser.g:2557:2: rule__Title__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1__1"


    // $ANTLR start "rule__Title__Group_1__1__Impl"
    // InternalIDSLParser.g:2563:1: rule__Title__Group_1__1__Impl : ( RULE_END ) ;
    public final void rule__Title__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2567:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:2568:1: ( RULE_END )
            {
            // InternalIDSLParser.g:2568:1: ( RULE_END )
            // InternalIDSLParser.g:2569:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getENDTerminalRuleCall_1_1()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getENDTerminalRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0__0"
    // InternalIDSLParser.g:2579:1: rule__Title__Group_1_0__0 : rule__Title__Group_1_0__0__Impl rule__Title__Group_1_0__1 ;
    public final void rule__Title__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2583:1: ( rule__Title__Group_1_0__0__Impl rule__Title__Group_1_0__1 )
            // InternalIDSLParser.g:2584:2: rule__Title__Group_1_0__0__Impl rule__Title__Group_1_0__1
            {
            pushFollow(FOLLOW_14);
            rule__Title__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0__0"


    // $ANTLR start "rule__Title__Group_1_0__0__Impl"
    // InternalIDSLParser.g:2591:1: rule__Title__Group_1_0__0__Impl : ( RULE_BEGIN ) ;
    public final void rule__Title__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2595:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:2596:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:2596:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:2597:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getBEGINTerminalRuleCall_1_0_0()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getBEGINTerminalRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0__1"
    // InternalIDSLParser.g:2606:1: rule__Title__Group_1_0__1 : rule__Title__Group_1_0__1__Impl rule__Title__Group_1_0__2 ;
    public final void rule__Title__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2610:1: ( rule__Title__Group_1_0__1__Impl rule__Title__Group_1_0__2 )
            // InternalIDSLParser.g:2611:2: rule__Title__Group_1_0__1__Impl rule__Title__Group_1_0__2
            {
            pushFollow(FOLLOW_14);
            rule__Title__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0__1"


    // $ANTLR start "rule__Title__Group_1_0__1__Impl"
    // InternalIDSLParser.g:2618:1: rule__Title__Group_1_0__1__Impl : ( () ) ;
    public final void rule__Title__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2622:1: ( ( () ) )
            // InternalIDSLParser.g:2623:1: ( () )
            {
            // InternalIDSLParser.g:2623:1: ( () )
            // InternalIDSLParser.g:2624:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getTitleAction_1_0_1()); 
            }
            // InternalIDSLParser.g:2625:2: ()
            // InternalIDSLParser.g:2625:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getTitleAction_1_0_1()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0__2"
    // InternalIDSLParser.g:2633:1: rule__Title__Group_1_0__2 : rule__Title__Group_1_0__2__Impl ;
    public final void rule__Title__Group_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2637:1: ( rule__Title__Group_1_0__2__Impl )
            // InternalIDSLParser.g:2638:2: rule__Title__Group_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0__2"


    // $ANTLR start "rule__Title__Group_1_0__2__Impl"
    // InternalIDSLParser.g:2644:1: rule__Title__Group_1_0__2__Impl : ( ( rule__Title__UnorderedGroup_1_0_2 ) ) ;
    public final void rule__Title__Group_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2648:1: ( ( ( rule__Title__UnorderedGroup_1_0_2 ) ) )
            // InternalIDSLParser.g:2649:1: ( ( rule__Title__UnorderedGroup_1_0_2 ) )
            {
            // InternalIDSLParser.g:2649:1: ( ( rule__Title__UnorderedGroup_1_0_2 ) )
            // InternalIDSLParser.g:2650:2: ( rule__Title__UnorderedGroup_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2()); 
            }
            // InternalIDSLParser.g:2651:2: ( rule__Title__UnorderedGroup_1_0_2 )
            // InternalIDSLParser.g:2651:3: rule__Title__UnorderedGroup_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__UnorderedGroup_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0__2__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_0__0"
    // InternalIDSLParser.g:2660:1: rule__Title__Group_1_0_2_0__0 : rule__Title__Group_1_0_2_0__0__Impl rule__Title__Group_1_0_2_0__1 ;
    public final void rule__Title__Group_1_0_2_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2664:1: ( rule__Title__Group_1_0_2_0__0__Impl rule__Title__Group_1_0_2_0__1 )
            // InternalIDSLParser.g:2665:2: rule__Title__Group_1_0_2_0__0__Impl rule__Title__Group_1_0_2_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Title__Group_1_0_2_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_0__0"


    // $ANTLR start "rule__Title__Group_1_0_2_0__0__Impl"
    // InternalIDSLParser.g:2672:1: rule__Title__Group_1_0_2_0__0__Impl : ( Align ) ;
    public final void rule__Title__Group_1_0_2_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2676:1: ( ( Align ) )
            // InternalIDSLParser.g:2677:1: ( Align )
            {
            // InternalIDSLParser.g:2677:1: ( Align )
            // InternalIDSLParser.g:2678:2: Align
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getAlignKeyword_1_0_2_0_0()); 
            }
            match(input,Align,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getAlignKeyword_1_0_2_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_0__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_0__1"
    // InternalIDSLParser.g:2687:1: rule__Title__Group_1_0_2_0__1 : rule__Title__Group_1_0_2_0__1__Impl rule__Title__Group_1_0_2_0__2 ;
    public final void rule__Title__Group_1_0_2_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2691:1: ( rule__Title__Group_1_0_2_0__1__Impl rule__Title__Group_1_0_2_0__2 )
            // InternalIDSLParser.g:2692:2: rule__Title__Group_1_0_2_0__1__Impl rule__Title__Group_1_0_2_0__2
            {
            pushFollow(FOLLOW_15);
            rule__Title__Group_1_0_2_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_0__1"


    // $ANTLR start "rule__Title__Group_1_0_2_0__1__Impl"
    // InternalIDSLParser.g:2699:1: rule__Title__Group_1_0_2_0__1__Impl : ( Colon ) ;
    public final void rule__Title__Group_1_0_2_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2703:1: ( ( Colon ) )
            // InternalIDSLParser.g:2704:1: ( Colon )
            {
            // InternalIDSLParser.g:2704:1: ( Colon )
            // InternalIDSLParser.g:2705:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_0__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_0__2"
    // InternalIDSLParser.g:2714:1: rule__Title__Group_1_0_2_0__2 : rule__Title__Group_1_0_2_0__2__Impl ;
    public final void rule__Title__Group_1_0_2_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2718:1: ( rule__Title__Group_1_0_2_0__2__Impl )
            // InternalIDSLParser.g:2719:2: rule__Title__Group_1_0_2_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_0__2"


    // $ANTLR start "rule__Title__Group_1_0_2_0__2__Impl"
    // InternalIDSLParser.g:2725:1: rule__Title__Group_1_0_2_0__2__Impl : ( ( rule__Title__AlignAssignment_1_0_2_0_2 ) ) ;
    public final void rule__Title__Group_1_0_2_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2729:1: ( ( ( rule__Title__AlignAssignment_1_0_2_0_2 ) ) )
            // InternalIDSLParser.g:2730:1: ( ( rule__Title__AlignAssignment_1_0_2_0_2 ) )
            {
            // InternalIDSLParser.g:2730:1: ( ( rule__Title__AlignAssignment_1_0_2_0_2 ) )
            // InternalIDSLParser.g:2731:2: ( rule__Title__AlignAssignment_1_0_2_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getAlignAssignment_1_0_2_0_2()); 
            }
            // InternalIDSLParser.g:2732:2: ( rule__Title__AlignAssignment_1_0_2_0_2 )
            // InternalIDSLParser.g:2732:3: rule__Title__AlignAssignment_1_0_2_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__AlignAssignment_1_0_2_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getAlignAssignment_1_0_2_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_0__2__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_1__0"
    // InternalIDSLParser.g:2741:1: rule__Title__Group_1_0_2_1__0 : rule__Title__Group_1_0_2_1__0__Impl rule__Title__Group_1_0_2_1__1 ;
    public final void rule__Title__Group_1_0_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2745:1: ( rule__Title__Group_1_0_2_1__0__Impl rule__Title__Group_1_0_2_1__1 )
            // InternalIDSLParser.g:2746:2: rule__Title__Group_1_0_2_1__0__Impl rule__Title__Group_1_0_2_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Title__Group_1_0_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_1__0"


    // $ANTLR start "rule__Title__Group_1_0_2_1__0__Impl"
    // InternalIDSLParser.g:2753:1: rule__Title__Group_1_0_2_1__0__Impl : ( Color ) ;
    public final void rule__Title__Group_1_0_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2757:1: ( ( Color ) )
            // InternalIDSLParser.g:2758:1: ( Color )
            {
            // InternalIDSLParser.g:2758:1: ( Color )
            // InternalIDSLParser.g:2759:2: Color
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColorKeyword_1_0_2_1_0()); 
            }
            match(input,Color,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColorKeyword_1_0_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_1__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_1__1"
    // InternalIDSLParser.g:2768:1: rule__Title__Group_1_0_2_1__1 : rule__Title__Group_1_0_2_1__1__Impl rule__Title__Group_1_0_2_1__2 ;
    public final void rule__Title__Group_1_0_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2772:1: ( rule__Title__Group_1_0_2_1__1__Impl rule__Title__Group_1_0_2_1__2 )
            // InternalIDSLParser.g:2773:2: rule__Title__Group_1_0_2_1__1__Impl rule__Title__Group_1_0_2_1__2
            {
            pushFollow(FOLLOW_5);
            rule__Title__Group_1_0_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_1__1"


    // $ANTLR start "rule__Title__Group_1_0_2_1__1__Impl"
    // InternalIDSLParser.g:2780:1: rule__Title__Group_1_0_2_1__1__Impl : ( Colon ) ;
    public final void rule__Title__Group_1_0_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2784:1: ( ( Colon ) )
            // InternalIDSLParser.g:2785:1: ( Colon )
            {
            // InternalIDSLParser.g:2785:1: ( Colon )
            // InternalIDSLParser.g:2786:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_1__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_1__2"
    // InternalIDSLParser.g:2795:1: rule__Title__Group_1_0_2_1__2 : rule__Title__Group_1_0_2_1__2__Impl ;
    public final void rule__Title__Group_1_0_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2799:1: ( rule__Title__Group_1_0_2_1__2__Impl )
            // InternalIDSLParser.g:2800:2: rule__Title__Group_1_0_2_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_1__2"


    // $ANTLR start "rule__Title__Group_1_0_2_1__2__Impl"
    // InternalIDSLParser.g:2806:1: rule__Title__Group_1_0_2_1__2__Impl : ( ( rule__Title__ColorAssignment_1_0_2_1_2 ) ) ;
    public final void rule__Title__Group_1_0_2_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2810:1: ( ( ( rule__Title__ColorAssignment_1_0_2_1_2 ) ) )
            // InternalIDSLParser.g:2811:1: ( ( rule__Title__ColorAssignment_1_0_2_1_2 ) )
            {
            // InternalIDSLParser.g:2811:1: ( ( rule__Title__ColorAssignment_1_0_2_1_2 ) )
            // InternalIDSLParser.g:2812:2: ( rule__Title__ColorAssignment_1_0_2_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColorAssignment_1_0_2_1_2()); 
            }
            // InternalIDSLParser.g:2813:2: ( rule__Title__ColorAssignment_1_0_2_1_2 )
            // InternalIDSLParser.g:2813:3: rule__Title__ColorAssignment_1_0_2_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__ColorAssignment_1_0_2_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColorAssignment_1_0_2_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_1__2__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_2__0"
    // InternalIDSLParser.g:2822:1: rule__Title__Group_1_0_2_2__0 : rule__Title__Group_1_0_2_2__0__Impl rule__Title__Group_1_0_2_2__1 ;
    public final void rule__Title__Group_1_0_2_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2826:1: ( rule__Title__Group_1_0_2_2__0__Impl rule__Title__Group_1_0_2_2__1 )
            // InternalIDSLParser.g:2827:2: rule__Title__Group_1_0_2_2__0__Impl rule__Title__Group_1_0_2_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Title__Group_1_0_2_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_2__0"


    // $ANTLR start "rule__Title__Group_1_0_2_2__0__Impl"
    // InternalIDSLParser.g:2834:1: rule__Title__Group_1_0_2_2__0__Impl : ( Font ) ;
    public final void rule__Title__Group_1_0_2_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2838:1: ( ( Font ) )
            // InternalIDSLParser.g:2839:1: ( Font )
            {
            // InternalIDSLParser.g:2839:1: ( Font )
            // InternalIDSLParser.g:2840:2: Font
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getFontKeyword_1_0_2_2_0()); 
            }
            match(input,Font,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getFontKeyword_1_0_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_2__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_2__1"
    // InternalIDSLParser.g:2849:1: rule__Title__Group_1_0_2_2__1 : rule__Title__Group_1_0_2_2__1__Impl rule__Title__Group_1_0_2_2__2 ;
    public final void rule__Title__Group_1_0_2_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2853:1: ( rule__Title__Group_1_0_2_2__1__Impl rule__Title__Group_1_0_2_2__2 )
            // InternalIDSLParser.g:2854:2: rule__Title__Group_1_0_2_2__1__Impl rule__Title__Group_1_0_2_2__2
            {
            pushFollow(FOLLOW_16);
            rule__Title__Group_1_0_2_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_2__1"


    // $ANTLR start "rule__Title__Group_1_0_2_2__1__Impl"
    // InternalIDSLParser.g:2861:1: rule__Title__Group_1_0_2_2__1__Impl : ( Colon ) ;
    public final void rule__Title__Group_1_0_2_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2865:1: ( ( Colon ) )
            // InternalIDSLParser.g:2866:1: ( Colon )
            {
            // InternalIDSLParser.g:2866:1: ( Colon )
            // InternalIDSLParser.g:2867:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_2__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_2__2"
    // InternalIDSLParser.g:2876:1: rule__Title__Group_1_0_2_2__2 : rule__Title__Group_1_0_2_2__2__Impl ;
    public final void rule__Title__Group_1_0_2_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2880:1: ( rule__Title__Group_1_0_2_2__2__Impl )
            // InternalIDSLParser.g:2881:2: rule__Title__Group_1_0_2_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_2__2"


    // $ANTLR start "rule__Title__Group_1_0_2_2__2__Impl"
    // InternalIDSLParser.g:2887:1: rule__Title__Group_1_0_2_2__2__Impl : ( ( rule__Title__FontAssignment_1_0_2_2_2 ) ) ;
    public final void rule__Title__Group_1_0_2_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2891:1: ( ( ( rule__Title__FontAssignment_1_0_2_2_2 ) ) )
            // InternalIDSLParser.g:2892:1: ( ( rule__Title__FontAssignment_1_0_2_2_2 ) )
            {
            // InternalIDSLParser.g:2892:1: ( ( rule__Title__FontAssignment_1_0_2_2_2 ) )
            // InternalIDSLParser.g:2893:2: ( rule__Title__FontAssignment_1_0_2_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getFontAssignment_1_0_2_2_2()); 
            }
            // InternalIDSLParser.g:2894:2: ( rule__Title__FontAssignment_1_0_2_2_2 )
            // InternalIDSLParser.g:2894:3: rule__Title__FontAssignment_1_0_2_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__FontAssignment_1_0_2_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getFontAssignment_1_0_2_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_2__2__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_3__0"
    // InternalIDSLParser.g:2903:1: rule__Title__Group_1_0_2_3__0 : rule__Title__Group_1_0_2_3__0__Impl rule__Title__Group_1_0_2_3__1 ;
    public final void rule__Title__Group_1_0_2_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2907:1: ( rule__Title__Group_1_0_2_3__0__Impl rule__Title__Group_1_0_2_3__1 )
            // InternalIDSLParser.g:2908:2: rule__Title__Group_1_0_2_3__0__Impl rule__Title__Group_1_0_2_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Title__Group_1_0_2_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_3__0"


    // $ANTLR start "rule__Title__Group_1_0_2_3__0__Impl"
    // InternalIDSLParser.g:2915:1: rule__Title__Group_1_0_2_3__0__Impl : ( Position ) ;
    public final void rule__Title__Group_1_0_2_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2919:1: ( ( Position ) )
            // InternalIDSLParser.g:2920:1: ( Position )
            {
            // InternalIDSLParser.g:2920:1: ( Position )
            // InternalIDSLParser.g:2921:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getPositionKeyword_1_0_2_3_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getPositionKeyword_1_0_2_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_3__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_3__1"
    // InternalIDSLParser.g:2930:1: rule__Title__Group_1_0_2_3__1 : rule__Title__Group_1_0_2_3__1__Impl rule__Title__Group_1_0_2_3__2 ;
    public final void rule__Title__Group_1_0_2_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2934:1: ( rule__Title__Group_1_0_2_3__1__Impl rule__Title__Group_1_0_2_3__2 )
            // InternalIDSLParser.g:2935:2: rule__Title__Group_1_0_2_3__1__Impl rule__Title__Group_1_0_2_3__2
            {
            pushFollow(FOLLOW_8);
            rule__Title__Group_1_0_2_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_3__1"


    // $ANTLR start "rule__Title__Group_1_0_2_3__1__Impl"
    // InternalIDSLParser.g:2942:1: rule__Title__Group_1_0_2_3__1__Impl : ( Colon ) ;
    public final void rule__Title__Group_1_0_2_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2946:1: ( ( Colon ) )
            // InternalIDSLParser.g:2947:1: ( Colon )
            {
            // InternalIDSLParser.g:2947:1: ( Colon )
            // InternalIDSLParser.g:2948:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_3__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_3__2"
    // InternalIDSLParser.g:2957:1: rule__Title__Group_1_0_2_3__2 : rule__Title__Group_1_0_2_3__2__Impl ;
    public final void rule__Title__Group_1_0_2_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2961:1: ( rule__Title__Group_1_0_2_3__2__Impl )
            // InternalIDSLParser.g:2962:2: rule__Title__Group_1_0_2_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_3__2"


    // $ANTLR start "rule__Title__Group_1_0_2_3__2__Impl"
    // InternalIDSLParser.g:2968:1: rule__Title__Group_1_0_2_3__2__Impl : ( ( rule__Title__PositionAssignment_1_0_2_3_2 ) ) ;
    public final void rule__Title__Group_1_0_2_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2972:1: ( ( ( rule__Title__PositionAssignment_1_0_2_3_2 ) ) )
            // InternalIDSLParser.g:2973:1: ( ( rule__Title__PositionAssignment_1_0_2_3_2 ) )
            {
            // InternalIDSLParser.g:2973:1: ( ( rule__Title__PositionAssignment_1_0_2_3_2 ) )
            // InternalIDSLParser.g:2974:2: ( rule__Title__PositionAssignment_1_0_2_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getPositionAssignment_1_0_2_3_2()); 
            }
            // InternalIDSLParser.g:2975:2: ( rule__Title__PositionAssignment_1_0_2_3_2 )
            // InternalIDSLParser.g:2975:3: rule__Title__PositionAssignment_1_0_2_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__PositionAssignment_1_0_2_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getPositionAssignment_1_0_2_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_3__2__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_4__0"
    // InternalIDSLParser.g:2984:1: rule__Title__Group_1_0_2_4__0 : rule__Title__Group_1_0_2_4__0__Impl rule__Title__Group_1_0_2_4__1 ;
    public final void rule__Title__Group_1_0_2_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:2988:1: ( rule__Title__Group_1_0_2_4__0__Impl rule__Title__Group_1_0_2_4__1 )
            // InternalIDSLParser.g:2989:2: rule__Title__Group_1_0_2_4__0__Impl rule__Title__Group_1_0_2_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Title__Group_1_0_2_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_4__0"


    // $ANTLR start "rule__Title__Group_1_0_2_4__0__Impl"
    // InternalIDSLParser.g:2996:1: rule__Title__Group_1_0_2_4__0__Impl : ( Maxwidth ) ;
    public final void rule__Title__Group_1_0_2_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3000:1: ( ( Maxwidth ) )
            // InternalIDSLParser.g:3001:1: ( Maxwidth )
            {
            // InternalIDSLParser.g:3001:1: ( Maxwidth )
            // InternalIDSLParser.g:3002:2: Maxwidth
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getMaxwidthKeyword_1_0_2_4_0()); 
            }
            match(input,Maxwidth,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getMaxwidthKeyword_1_0_2_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_4__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_4__1"
    // InternalIDSLParser.g:3011:1: rule__Title__Group_1_0_2_4__1 : rule__Title__Group_1_0_2_4__1__Impl rule__Title__Group_1_0_2_4__2 ;
    public final void rule__Title__Group_1_0_2_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3015:1: ( rule__Title__Group_1_0_2_4__1__Impl rule__Title__Group_1_0_2_4__2 )
            // InternalIDSLParser.g:3016:2: rule__Title__Group_1_0_2_4__1__Impl rule__Title__Group_1_0_2_4__2
            {
            pushFollow(FOLLOW_17);
            rule__Title__Group_1_0_2_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_4__1"


    // $ANTLR start "rule__Title__Group_1_0_2_4__1__Impl"
    // InternalIDSLParser.g:3023:1: rule__Title__Group_1_0_2_4__1__Impl : ( Colon ) ;
    public final void rule__Title__Group_1_0_2_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3027:1: ( ( Colon ) )
            // InternalIDSLParser.g:3028:1: ( Colon )
            {
            // InternalIDSLParser.g:3028:1: ( Colon )
            // InternalIDSLParser.g:3029:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_4__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_4__2"
    // InternalIDSLParser.g:3038:1: rule__Title__Group_1_0_2_4__2 : rule__Title__Group_1_0_2_4__2__Impl ;
    public final void rule__Title__Group_1_0_2_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3042:1: ( rule__Title__Group_1_0_2_4__2__Impl )
            // InternalIDSLParser.g:3043:2: rule__Title__Group_1_0_2_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_4__2"


    // $ANTLR start "rule__Title__Group_1_0_2_4__2__Impl"
    // InternalIDSLParser.g:3049:1: rule__Title__Group_1_0_2_4__2__Impl : ( ( rule__Title__MaxwidthAssignment_1_0_2_4_2 ) ) ;
    public final void rule__Title__Group_1_0_2_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3053:1: ( ( ( rule__Title__MaxwidthAssignment_1_0_2_4_2 ) ) )
            // InternalIDSLParser.g:3054:1: ( ( rule__Title__MaxwidthAssignment_1_0_2_4_2 ) )
            {
            // InternalIDSLParser.g:3054:1: ( ( rule__Title__MaxwidthAssignment_1_0_2_4_2 ) )
            // InternalIDSLParser.g:3055:2: ( rule__Title__MaxwidthAssignment_1_0_2_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getMaxwidthAssignment_1_0_2_4_2()); 
            }
            // InternalIDSLParser.g:3056:2: ( rule__Title__MaxwidthAssignment_1_0_2_4_2 )
            // InternalIDSLParser.g:3056:3: rule__Title__MaxwidthAssignment_1_0_2_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__MaxwidthAssignment_1_0_2_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getMaxwidthAssignment_1_0_2_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_4__2__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_5__0"
    // InternalIDSLParser.g:3065:1: rule__Title__Group_1_0_2_5__0 : rule__Title__Group_1_0_2_5__0__Impl rule__Title__Group_1_0_2_5__1 ;
    public final void rule__Title__Group_1_0_2_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3069:1: ( rule__Title__Group_1_0_2_5__0__Impl rule__Title__Group_1_0_2_5__1 )
            // InternalIDSLParser.g:3070:2: rule__Title__Group_1_0_2_5__0__Impl rule__Title__Group_1_0_2_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Title__Group_1_0_2_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_5__0"


    // $ANTLR start "rule__Title__Group_1_0_2_5__0__Impl"
    // InternalIDSLParser.g:3077:1: rule__Title__Group_1_0_2_5__0__Impl : ( Value ) ;
    public final void rule__Title__Group_1_0_2_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3081:1: ( ( Value ) )
            // InternalIDSLParser.g:3082:1: ( Value )
            {
            // InternalIDSLParser.g:3082:1: ( Value )
            // InternalIDSLParser.g:3083:2: Value
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getValueKeyword_1_0_2_5_0()); 
            }
            match(input,Value,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getValueKeyword_1_0_2_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_5__0__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_5__1"
    // InternalIDSLParser.g:3092:1: rule__Title__Group_1_0_2_5__1 : rule__Title__Group_1_0_2_5__1__Impl rule__Title__Group_1_0_2_5__2 ;
    public final void rule__Title__Group_1_0_2_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3096:1: ( rule__Title__Group_1_0_2_5__1__Impl rule__Title__Group_1_0_2_5__2 )
            // InternalIDSLParser.g:3097:2: rule__Title__Group_1_0_2_5__1__Impl rule__Title__Group_1_0_2_5__2
            {
            pushFollow(FOLLOW_7);
            rule__Title__Group_1_0_2_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_5__1"


    // $ANTLR start "rule__Title__Group_1_0_2_5__1__Impl"
    // InternalIDSLParser.g:3104:1: rule__Title__Group_1_0_2_5__1__Impl : ( Colon ) ;
    public final void rule__Title__Group_1_0_2_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3108:1: ( ( Colon ) )
            // InternalIDSLParser.g:3109:1: ( Colon )
            {
            // InternalIDSLParser.g:3109:1: ( Colon )
            // InternalIDSLParser.g:3110:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColonKeyword_1_0_2_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_5__1__Impl"


    // $ANTLR start "rule__Title__Group_1_0_2_5__2"
    // InternalIDSLParser.g:3119:1: rule__Title__Group_1_0_2_5__2 : rule__Title__Group_1_0_2_5__2__Impl ;
    public final void rule__Title__Group_1_0_2_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3123:1: ( rule__Title__Group_1_0_2_5__2__Impl )
            // InternalIDSLParser.g:3124:2: rule__Title__Group_1_0_2_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__Group_1_0_2_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_5__2"


    // $ANTLR start "rule__Title__Group_1_0_2_5__2__Impl"
    // InternalIDSLParser.g:3130:1: rule__Title__Group_1_0_2_5__2__Impl : ( ( rule__Title__ValueAssignment_1_0_2_5_2 ) ) ;
    public final void rule__Title__Group_1_0_2_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3134:1: ( ( ( rule__Title__ValueAssignment_1_0_2_5_2 ) ) )
            // InternalIDSLParser.g:3135:1: ( ( rule__Title__ValueAssignment_1_0_2_5_2 ) )
            {
            // InternalIDSLParser.g:3135:1: ( ( rule__Title__ValueAssignment_1_0_2_5_2 ) )
            // InternalIDSLParser.g:3136:2: ( rule__Title__ValueAssignment_1_0_2_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getValueAssignment_1_0_2_5_2()); 
            }
            // InternalIDSLParser.g:3137:2: ( rule__Title__ValueAssignment_1_0_2_5_2 )
            // InternalIDSLParser.g:3137:3: rule__Title__ValueAssignment_1_0_2_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Title__ValueAssignment_1_0_2_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getValueAssignment_1_0_2_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__Group_1_0_2_5__2__Impl"


    // $ANTLR start "rule__Logo__Group__0"
    // InternalIDSLParser.g:3146:1: rule__Logo__Group__0 : rule__Logo__Group__0__Impl rule__Logo__Group__1 ;
    public final void rule__Logo__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3150:1: ( rule__Logo__Group__0__Impl rule__Logo__Group__1 )
            // InternalIDSLParser.g:3151:2: rule__Logo__Group__0__Impl rule__Logo__Group__1
            {
            pushFollow(FOLLOW_18);
            rule__Logo__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Logo__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group__0"


    // $ANTLR start "rule__Logo__Group__0__Impl"
    // InternalIDSLParser.g:3158:1: rule__Logo__Group__0__Impl : ( RULE_BEGIN ) ;
    public final void rule__Logo__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3162:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:3163:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:3163:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:3164:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getBEGINTerminalRuleCall_0()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getBEGINTerminalRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group__0__Impl"


    // $ANTLR start "rule__Logo__Group__1"
    // InternalIDSLParser.g:3173:1: rule__Logo__Group__1 : rule__Logo__Group__1__Impl rule__Logo__Group__2 ;
    public final void rule__Logo__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3177:1: ( rule__Logo__Group__1__Impl rule__Logo__Group__2 )
            // InternalIDSLParser.g:3178:2: rule__Logo__Group__1__Impl rule__Logo__Group__2
            {
            pushFollow(FOLLOW_10);
            rule__Logo__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Logo__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group__1"


    // $ANTLR start "rule__Logo__Group__1__Impl"
    // InternalIDSLParser.g:3185:1: rule__Logo__Group__1__Impl : ( ( rule__Logo__UnorderedGroup_1 ) ) ;
    public final void rule__Logo__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3189:1: ( ( ( rule__Logo__UnorderedGroup_1 ) ) )
            // InternalIDSLParser.g:3190:1: ( ( rule__Logo__UnorderedGroup_1 ) )
            {
            // InternalIDSLParser.g:3190:1: ( ( rule__Logo__UnorderedGroup_1 ) )
            // InternalIDSLParser.g:3191:2: ( rule__Logo__UnorderedGroup_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getUnorderedGroup_1()); 
            }
            // InternalIDSLParser.g:3192:2: ( rule__Logo__UnorderedGroup_1 )
            // InternalIDSLParser.g:3192:3: rule__Logo__UnorderedGroup_1
            {
            pushFollow(FOLLOW_2);
            rule__Logo__UnorderedGroup_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getUnorderedGroup_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group__1__Impl"


    // $ANTLR start "rule__Logo__Group__2"
    // InternalIDSLParser.g:3200:1: rule__Logo__Group__2 : rule__Logo__Group__2__Impl ;
    public final void rule__Logo__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3204:1: ( rule__Logo__Group__2__Impl )
            // InternalIDSLParser.g:3205:2: rule__Logo__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Logo__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group__2"


    // $ANTLR start "rule__Logo__Group__2__Impl"
    // InternalIDSLParser.g:3211:1: rule__Logo__Group__2__Impl : ( RULE_END ) ;
    public final void rule__Logo__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3215:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:3216:1: ( RULE_END )
            {
            // InternalIDSLParser.g:3216:1: ( RULE_END )
            // InternalIDSLParser.g:3217:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getENDTerminalRuleCall_2()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getENDTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group__2__Impl"


    // $ANTLR start "rule__Logo__Group_1_0__0"
    // InternalIDSLParser.g:3227:1: rule__Logo__Group_1_0__0 : rule__Logo__Group_1_0__0__Impl rule__Logo__Group_1_0__1 ;
    public final void rule__Logo__Group_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3231:1: ( rule__Logo__Group_1_0__0__Impl rule__Logo__Group_1_0__1 )
            // InternalIDSLParser.g:3232:2: rule__Logo__Group_1_0__0__Impl rule__Logo__Group_1_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Logo__Group_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Logo__Group_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_0__0"


    // $ANTLR start "rule__Logo__Group_1_0__0__Impl"
    // InternalIDSLParser.g:3239:1: rule__Logo__Group_1_0__0__Impl : ( Size ) ;
    public final void rule__Logo__Group_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3243:1: ( ( Size ) )
            // InternalIDSLParser.g:3244:1: ( Size )
            {
            // InternalIDSLParser.g:3244:1: ( Size )
            // InternalIDSLParser.g:3245:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getSizeKeyword_1_0_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getSizeKeyword_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_0__0__Impl"


    // $ANTLR start "rule__Logo__Group_1_0__1"
    // InternalIDSLParser.g:3254:1: rule__Logo__Group_1_0__1 : rule__Logo__Group_1_0__1__Impl rule__Logo__Group_1_0__2 ;
    public final void rule__Logo__Group_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3258:1: ( rule__Logo__Group_1_0__1__Impl rule__Logo__Group_1_0__2 )
            // InternalIDSLParser.g:3259:2: rule__Logo__Group_1_0__1__Impl rule__Logo__Group_1_0__2
            {
            pushFollow(FOLLOW_8);
            rule__Logo__Group_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Logo__Group_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_0__1"


    // $ANTLR start "rule__Logo__Group_1_0__1__Impl"
    // InternalIDSLParser.g:3266:1: rule__Logo__Group_1_0__1__Impl : ( Colon ) ;
    public final void rule__Logo__Group_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3270:1: ( ( Colon ) )
            // InternalIDSLParser.g:3271:1: ( Colon )
            {
            // InternalIDSLParser.g:3271:1: ( Colon )
            // InternalIDSLParser.g:3272:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getColonKeyword_1_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getColonKeyword_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_0__1__Impl"


    // $ANTLR start "rule__Logo__Group_1_0__2"
    // InternalIDSLParser.g:3281:1: rule__Logo__Group_1_0__2 : rule__Logo__Group_1_0__2__Impl ;
    public final void rule__Logo__Group_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3285:1: ( rule__Logo__Group_1_0__2__Impl )
            // InternalIDSLParser.g:3286:2: rule__Logo__Group_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Logo__Group_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_0__2"


    // $ANTLR start "rule__Logo__Group_1_0__2__Impl"
    // InternalIDSLParser.g:3292:1: rule__Logo__Group_1_0__2__Impl : ( ( rule__Logo__SizeAssignment_1_0_2 ) ) ;
    public final void rule__Logo__Group_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3296:1: ( ( ( rule__Logo__SizeAssignment_1_0_2 ) ) )
            // InternalIDSLParser.g:3297:1: ( ( rule__Logo__SizeAssignment_1_0_2 ) )
            {
            // InternalIDSLParser.g:3297:1: ( ( rule__Logo__SizeAssignment_1_0_2 ) )
            // InternalIDSLParser.g:3298:2: ( rule__Logo__SizeAssignment_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getSizeAssignment_1_0_2()); 
            }
            // InternalIDSLParser.g:3299:2: ( rule__Logo__SizeAssignment_1_0_2 )
            // InternalIDSLParser.g:3299:3: rule__Logo__SizeAssignment_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Logo__SizeAssignment_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getSizeAssignment_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_0__2__Impl"


    // $ANTLR start "rule__Logo__Group_1_1__0"
    // InternalIDSLParser.g:3308:1: rule__Logo__Group_1_1__0 : rule__Logo__Group_1_1__0__Impl rule__Logo__Group_1_1__1 ;
    public final void rule__Logo__Group_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3312:1: ( rule__Logo__Group_1_1__0__Impl rule__Logo__Group_1_1__1 )
            // InternalIDSLParser.g:3313:2: rule__Logo__Group_1_1__0__Impl rule__Logo__Group_1_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Logo__Group_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Logo__Group_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_1__0"


    // $ANTLR start "rule__Logo__Group_1_1__0__Impl"
    // InternalIDSLParser.g:3320:1: rule__Logo__Group_1_1__0__Impl : ( Position ) ;
    public final void rule__Logo__Group_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3324:1: ( ( Position ) )
            // InternalIDSLParser.g:3325:1: ( Position )
            {
            // InternalIDSLParser.g:3325:1: ( Position )
            // InternalIDSLParser.g:3326:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getPositionKeyword_1_1_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getPositionKeyword_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_1__0__Impl"


    // $ANTLR start "rule__Logo__Group_1_1__1"
    // InternalIDSLParser.g:3335:1: rule__Logo__Group_1_1__1 : rule__Logo__Group_1_1__1__Impl rule__Logo__Group_1_1__2 ;
    public final void rule__Logo__Group_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3339:1: ( rule__Logo__Group_1_1__1__Impl rule__Logo__Group_1_1__2 )
            // InternalIDSLParser.g:3340:2: rule__Logo__Group_1_1__1__Impl rule__Logo__Group_1_1__2
            {
            pushFollow(FOLLOW_8);
            rule__Logo__Group_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Logo__Group_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_1__1"


    // $ANTLR start "rule__Logo__Group_1_1__1__Impl"
    // InternalIDSLParser.g:3347:1: rule__Logo__Group_1_1__1__Impl : ( Colon ) ;
    public final void rule__Logo__Group_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3351:1: ( ( Colon ) )
            // InternalIDSLParser.g:3352:1: ( Colon )
            {
            // InternalIDSLParser.g:3352:1: ( Colon )
            // InternalIDSLParser.g:3353:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getColonKeyword_1_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getColonKeyword_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_1__1__Impl"


    // $ANTLR start "rule__Logo__Group_1_1__2"
    // InternalIDSLParser.g:3362:1: rule__Logo__Group_1_1__2 : rule__Logo__Group_1_1__2__Impl ;
    public final void rule__Logo__Group_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3366:1: ( rule__Logo__Group_1_1__2__Impl )
            // InternalIDSLParser.g:3367:2: rule__Logo__Group_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Logo__Group_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_1__2"


    // $ANTLR start "rule__Logo__Group_1_1__2__Impl"
    // InternalIDSLParser.g:3373:1: rule__Logo__Group_1_1__2__Impl : ( ( rule__Logo__PositionAssignment_1_1_2 ) ) ;
    public final void rule__Logo__Group_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3377:1: ( ( ( rule__Logo__PositionAssignment_1_1_2 ) ) )
            // InternalIDSLParser.g:3378:1: ( ( rule__Logo__PositionAssignment_1_1_2 ) )
            {
            // InternalIDSLParser.g:3378:1: ( ( rule__Logo__PositionAssignment_1_1_2 ) )
            // InternalIDSLParser.g:3379:2: ( rule__Logo__PositionAssignment_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getPositionAssignment_1_1_2()); 
            }
            // InternalIDSLParser.g:3380:2: ( rule__Logo__PositionAssignment_1_1_2 )
            // InternalIDSLParser.g:3380:3: rule__Logo__PositionAssignment_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Logo__PositionAssignment_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getPositionAssignment_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__Group_1_1__2__Impl"


    // $ANTLR start "rule__Box__Group__0"
    // InternalIDSLParser.g:3389:1: rule__Box__Group__0 : rule__Box__Group__0__Impl rule__Box__Group__1 ;
    public final void rule__Box__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3393:1: ( rule__Box__Group__0__Impl rule__Box__Group__1 )
            // InternalIDSLParser.g:3394:2: rule__Box__Group__0__Impl rule__Box__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Box__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__0"


    // $ANTLR start "rule__Box__Group__0__Impl"
    // InternalIDSLParser.g:3401:1: rule__Box__Group__0__Impl : ( ( rule__Box__NameAssignment_0 ) ) ;
    public final void rule__Box__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3405:1: ( ( ( rule__Box__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:3406:1: ( ( rule__Box__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:3406:1: ( ( rule__Box__NameAssignment_0 ) )
            // InternalIDSLParser.g:3407:2: ( rule__Box__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:3408:2: ( rule__Box__NameAssignment_0 )
            // InternalIDSLParser.g:3408:3: rule__Box__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Box__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__0__Impl"


    // $ANTLR start "rule__Box__Group__1"
    // InternalIDSLParser.g:3416:1: rule__Box__Group__1 : rule__Box__Group__1__Impl rule__Box__Group__2 ;
    public final void rule__Box__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3420:1: ( rule__Box__Group__1__Impl rule__Box__Group__2 )
            // InternalIDSLParser.g:3421:2: rule__Box__Group__1__Impl rule__Box__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__Box__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__1"


    // $ANTLR start "rule__Box__Group__1__Impl"
    // InternalIDSLParser.g:3428:1: rule__Box__Group__1__Impl : ( Colon ) ;
    public final void rule__Box__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3432:1: ( ( Colon ) )
            // InternalIDSLParser.g:3433:1: ( Colon )
            {
            // InternalIDSLParser.g:3433:1: ( Colon )
            // InternalIDSLParser.g:3434:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__1__Impl"


    // $ANTLR start "rule__Box__Group__2"
    // InternalIDSLParser.g:3443:1: rule__Box__Group__2 : rule__Box__Group__2__Impl rule__Box__Group__3 ;
    public final void rule__Box__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3447:1: ( rule__Box__Group__2__Impl rule__Box__Group__3 )
            // InternalIDSLParser.g:3448:2: rule__Box__Group__2__Impl rule__Box__Group__3
            {
            pushFollow(FOLLOW_19);
            rule__Box__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__2"


    // $ANTLR start "rule__Box__Group__2__Impl"
    // InternalIDSLParser.g:3455:1: rule__Box__Group__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Box__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3459:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:3460:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:3460:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:3461:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBEGINTerminalRuleCall_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBEGINTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__2__Impl"


    // $ANTLR start "rule__Box__Group__3"
    // InternalIDSLParser.g:3470:1: rule__Box__Group__3 : rule__Box__Group__3__Impl rule__Box__Group__4 ;
    public final void rule__Box__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3474:1: ( rule__Box__Group__3__Impl rule__Box__Group__4 )
            // InternalIDSLParser.g:3475:2: rule__Box__Group__3__Impl rule__Box__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__Box__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__3"


    // $ANTLR start "rule__Box__Group__3__Impl"
    // InternalIDSLParser.g:3482:1: rule__Box__Group__3__Impl : ( ( rule__Box__UnorderedGroup_3 ) ) ;
    public final void rule__Box__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3486:1: ( ( ( rule__Box__UnorderedGroup_3 ) ) )
            // InternalIDSLParser.g:3487:1: ( ( rule__Box__UnorderedGroup_3 ) )
            {
            // InternalIDSLParser.g:3487:1: ( ( rule__Box__UnorderedGroup_3 ) )
            // InternalIDSLParser.g:3488:2: ( rule__Box__UnorderedGroup_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getUnorderedGroup_3()); 
            }
            // InternalIDSLParser.g:3489:2: ( rule__Box__UnorderedGroup_3 )
            // InternalIDSLParser.g:3489:3: rule__Box__UnorderedGroup_3
            {
            pushFollow(FOLLOW_2);
            rule__Box__UnorderedGroup_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getUnorderedGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__3__Impl"


    // $ANTLR start "rule__Box__Group__4"
    // InternalIDSLParser.g:3497:1: rule__Box__Group__4 : rule__Box__Group__4__Impl ;
    public final void rule__Box__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3501:1: ( rule__Box__Group__4__Impl )
            // InternalIDSLParser.g:3502:2: rule__Box__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__4"


    // $ANTLR start "rule__Box__Group__4__Impl"
    // InternalIDSLParser.g:3508:1: rule__Box__Group__4__Impl : ( RULE_END ) ;
    public final void rule__Box__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3512:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:3513:1: ( RULE_END )
            {
            // InternalIDSLParser.g:3513:1: ( RULE_END )
            // InternalIDSLParser.g:3514:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getENDTerminalRuleCall_4()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getENDTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group__4__Impl"


    // $ANTLR start "rule__Box__Group_3_0_0__0"
    // InternalIDSLParser.g:3524:1: rule__Box__Group_3_0_0__0 : rule__Box__Group_3_0_0__0__Impl rule__Box__Group_3_0_0__1 ;
    public final void rule__Box__Group_3_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3528:1: ( rule__Box__Group_3_0_0__0__Impl rule__Box__Group_3_0_0__1 )
            // InternalIDSLParser.g:3529:2: rule__Box__Group_3_0_0__0__Impl rule__Box__Group_3_0_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Box__Group_3_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_0__0"


    // $ANTLR start "rule__Box__Group_3_0_0__0__Impl"
    // InternalIDSLParser.g:3536:1: rule__Box__Group_3_0_0__0__Impl : ( Bgcolor ) ;
    public final void rule__Box__Group_3_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3540:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:3541:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:3541:1: ( Bgcolor )
            // InternalIDSLParser.g:3542:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgcolorKeyword_3_0_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgcolorKeyword_3_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_0__0__Impl"


    // $ANTLR start "rule__Box__Group_3_0_0__1"
    // InternalIDSLParser.g:3551:1: rule__Box__Group_3_0_0__1 : rule__Box__Group_3_0_0__1__Impl rule__Box__Group_3_0_0__2 ;
    public final void rule__Box__Group_3_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3555:1: ( rule__Box__Group_3_0_0__1__Impl rule__Box__Group_3_0_0__2 )
            // InternalIDSLParser.g:3556:2: rule__Box__Group_3_0_0__1__Impl rule__Box__Group_3_0_0__2
            {
            pushFollow(FOLLOW_5);
            rule__Box__Group_3_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_0__1"


    // $ANTLR start "rule__Box__Group_3_0_0__1__Impl"
    // InternalIDSLParser.g:3563:1: rule__Box__Group_3_0_0__1__Impl : ( Colon ) ;
    public final void rule__Box__Group_3_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3567:1: ( ( Colon ) )
            // InternalIDSLParser.g:3568:1: ( Colon )
            {
            // InternalIDSLParser.g:3568:1: ( Colon )
            // InternalIDSLParser.g:3569:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getColonKeyword_3_0_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getColonKeyword_3_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_0__1__Impl"


    // $ANTLR start "rule__Box__Group_3_0_0__2"
    // InternalIDSLParser.g:3578:1: rule__Box__Group_3_0_0__2 : rule__Box__Group_3_0_0__2__Impl ;
    public final void rule__Box__Group_3_0_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3582:1: ( rule__Box__Group_3_0_0__2__Impl )
            // InternalIDSLParser.g:3583:2: rule__Box__Group_3_0_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_0__2"


    // $ANTLR start "rule__Box__Group_3_0_0__2__Impl"
    // InternalIDSLParser.g:3589:1: rule__Box__Group_3_0_0__2__Impl : ( ( rule__Box__BgcolorAssignment_3_0_0_2 ) ) ;
    public final void rule__Box__Group_3_0_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3593:1: ( ( ( rule__Box__BgcolorAssignment_3_0_0_2 ) ) )
            // InternalIDSLParser.g:3594:1: ( ( rule__Box__BgcolorAssignment_3_0_0_2 ) )
            {
            // InternalIDSLParser.g:3594:1: ( ( rule__Box__BgcolorAssignment_3_0_0_2 ) )
            // InternalIDSLParser.g:3595:2: ( rule__Box__BgcolorAssignment_3_0_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgcolorAssignment_3_0_0_2()); 
            }
            // InternalIDSLParser.g:3596:2: ( rule__Box__BgcolorAssignment_3_0_0_2 )
            // InternalIDSLParser.g:3596:3: rule__Box__BgcolorAssignment_3_0_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Box__BgcolorAssignment_3_0_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgcolorAssignment_3_0_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_0__2__Impl"


    // $ANTLR start "rule__Box__Group_3_0_1__0"
    // InternalIDSLParser.g:3605:1: rule__Box__Group_3_0_1__0 : rule__Box__Group_3_0_1__0__Impl rule__Box__Group_3_0_1__1 ;
    public final void rule__Box__Group_3_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3609:1: ( rule__Box__Group_3_0_1__0__Impl rule__Box__Group_3_0_1__1 )
            // InternalIDSLParser.g:3610:2: rule__Box__Group_3_0_1__0__Impl rule__Box__Group_3_0_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Box__Group_3_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_1__0"


    // $ANTLR start "rule__Box__Group_3_0_1__0__Impl"
    // InternalIDSLParser.g:3617:1: rule__Box__Group_3_0_1__0__Impl : ( Bgpattern ) ;
    public final void rule__Box__Group_3_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3621:1: ( ( Bgpattern ) )
            // InternalIDSLParser.g:3622:1: ( Bgpattern )
            {
            // InternalIDSLParser.g:3622:1: ( Bgpattern )
            // InternalIDSLParser.g:3623:2: Bgpattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgpatternKeyword_3_0_1_0()); 
            }
            match(input,Bgpattern,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgpatternKeyword_3_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_1__0__Impl"


    // $ANTLR start "rule__Box__Group_3_0_1__1"
    // InternalIDSLParser.g:3632:1: rule__Box__Group_3_0_1__1 : rule__Box__Group_3_0_1__1__Impl rule__Box__Group_3_0_1__2 ;
    public final void rule__Box__Group_3_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3636:1: ( rule__Box__Group_3_0_1__1__Impl rule__Box__Group_3_0_1__2 )
            // InternalIDSLParser.g:3637:2: rule__Box__Group_3_0_1__1__Impl rule__Box__Group_3_0_1__2
            {
            pushFollow(FOLLOW_6);
            rule__Box__Group_3_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_1__1"


    // $ANTLR start "rule__Box__Group_3_0_1__1__Impl"
    // InternalIDSLParser.g:3644:1: rule__Box__Group_3_0_1__1__Impl : ( Colon ) ;
    public final void rule__Box__Group_3_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3648:1: ( ( Colon ) )
            // InternalIDSLParser.g:3649:1: ( Colon )
            {
            // InternalIDSLParser.g:3649:1: ( Colon )
            // InternalIDSLParser.g:3650:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getColonKeyword_3_0_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getColonKeyword_3_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_1__1__Impl"


    // $ANTLR start "rule__Box__Group_3_0_1__2"
    // InternalIDSLParser.g:3659:1: rule__Box__Group_3_0_1__2 : rule__Box__Group_3_0_1__2__Impl ;
    public final void rule__Box__Group_3_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3663:1: ( rule__Box__Group_3_0_1__2__Impl )
            // InternalIDSLParser.g:3664:2: rule__Box__Group_3_0_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_1__2"


    // $ANTLR start "rule__Box__Group_3_0_1__2__Impl"
    // InternalIDSLParser.g:3670:1: rule__Box__Group_3_0_1__2__Impl : ( ( rule__Box__BgpatternAssignment_3_0_1_2 ) ) ;
    public final void rule__Box__Group_3_0_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3674:1: ( ( ( rule__Box__BgpatternAssignment_3_0_1_2 ) ) )
            // InternalIDSLParser.g:3675:1: ( ( rule__Box__BgpatternAssignment_3_0_1_2 ) )
            {
            // InternalIDSLParser.g:3675:1: ( ( rule__Box__BgpatternAssignment_3_0_1_2 ) )
            // InternalIDSLParser.g:3676:2: ( rule__Box__BgpatternAssignment_3_0_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgpatternAssignment_3_0_1_2()); 
            }
            // InternalIDSLParser.g:3677:2: ( rule__Box__BgpatternAssignment_3_0_1_2 )
            // InternalIDSLParser.g:3677:3: rule__Box__BgpatternAssignment_3_0_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Box__BgpatternAssignment_3_0_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgpatternAssignment_3_0_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_1__2__Impl"


    // $ANTLR start "rule__Box__Group_3_0_2__0"
    // InternalIDSLParser.g:3686:1: rule__Box__Group_3_0_2__0 : rule__Box__Group_3_0_2__0__Impl rule__Box__Group_3_0_2__1 ;
    public final void rule__Box__Group_3_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3690:1: ( rule__Box__Group_3_0_2__0__Impl rule__Box__Group_3_0_2__1 )
            // InternalIDSLParser.g:3691:2: rule__Box__Group_3_0_2__0__Impl rule__Box__Group_3_0_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Box__Group_3_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_2__0"


    // $ANTLR start "rule__Box__Group_3_0_2__0__Impl"
    // InternalIDSLParser.g:3698:1: rule__Box__Group_3_0_2__0__Impl : ( Bgimage ) ;
    public final void rule__Box__Group_3_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3702:1: ( ( Bgimage ) )
            // InternalIDSLParser.g:3703:1: ( Bgimage )
            {
            // InternalIDSLParser.g:3703:1: ( Bgimage )
            // InternalIDSLParser.g:3704:2: Bgimage
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgimageKeyword_3_0_2_0()); 
            }
            match(input,Bgimage,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgimageKeyword_3_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_2__0__Impl"


    // $ANTLR start "rule__Box__Group_3_0_2__1"
    // InternalIDSLParser.g:3713:1: rule__Box__Group_3_0_2__1 : rule__Box__Group_3_0_2__1__Impl rule__Box__Group_3_0_2__2 ;
    public final void rule__Box__Group_3_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3717:1: ( rule__Box__Group_3_0_2__1__Impl rule__Box__Group_3_0_2__2 )
            // InternalIDSLParser.g:3718:2: rule__Box__Group_3_0_2__1__Impl rule__Box__Group_3_0_2__2
            {
            pushFollow(FOLLOW_7);
            rule__Box__Group_3_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_2__1"


    // $ANTLR start "rule__Box__Group_3_0_2__1__Impl"
    // InternalIDSLParser.g:3725:1: rule__Box__Group_3_0_2__1__Impl : ( Colon ) ;
    public final void rule__Box__Group_3_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3729:1: ( ( Colon ) )
            // InternalIDSLParser.g:3730:1: ( Colon )
            {
            // InternalIDSLParser.g:3730:1: ( Colon )
            // InternalIDSLParser.g:3731:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getColonKeyword_3_0_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getColonKeyword_3_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_2__1__Impl"


    // $ANTLR start "rule__Box__Group_3_0_2__2"
    // InternalIDSLParser.g:3740:1: rule__Box__Group_3_0_2__2 : rule__Box__Group_3_0_2__2__Impl ;
    public final void rule__Box__Group_3_0_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3744:1: ( rule__Box__Group_3_0_2__2__Impl )
            // InternalIDSLParser.g:3745:2: rule__Box__Group_3_0_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_0_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_2__2"


    // $ANTLR start "rule__Box__Group_3_0_2__2__Impl"
    // InternalIDSLParser.g:3751:1: rule__Box__Group_3_0_2__2__Impl : ( ( rule__Box__BgimageAssignment_3_0_2_2 ) ) ;
    public final void rule__Box__Group_3_0_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3755:1: ( ( ( rule__Box__BgimageAssignment_3_0_2_2 ) ) )
            // InternalIDSLParser.g:3756:1: ( ( rule__Box__BgimageAssignment_3_0_2_2 ) )
            {
            // InternalIDSLParser.g:3756:1: ( ( rule__Box__BgimageAssignment_3_0_2_2 ) )
            // InternalIDSLParser.g:3757:2: ( rule__Box__BgimageAssignment_3_0_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgimageAssignment_3_0_2_2()); 
            }
            // InternalIDSLParser.g:3758:2: ( rule__Box__BgimageAssignment_3_0_2_2 )
            // InternalIDSLParser.g:3758:3: rule__Box__BgimageAssignment_3_0_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Box__BgimageAssignment_3_0_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgimageAssignment_3_0_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_0_2__2__Impl"


    // $ANTLR start "rule__Box__Group_3_1__0"
    // InternalIDSLParser.g:3767:1: rule__Box__Group_3_1__0 : rule__Box__Group_3_1__0__Impl rule__Box__Group_3_1__1 ;
    public final void rule__Box__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3771:1: ( rule__Box__Group_3_1__0__Impl rule__Box__Group_3_1__1 )
            // InternalIDSLParser.g:3772:2: rule__Box__Group_3_1__0__Impl rule__Box__Group_3_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Box__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_1__0"


    // $ANTLR start "rule__Box__Group_3_1__0__Impl"
    // InternalIDSLParser.g:3779:1: rule__Box__Group_3_1__0__Impl : ( Size ) ;
    public final void rule__Box__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3783:1: ( ( Size ) )
            // InternalIDSLParser.g:3784:1: ( Size )
            {
            // InternalIDSLParser.g:3784:1: ( Size )
            // InternalIDSLParser.g:3785:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getSizeKeyword_3_1_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getSizeKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_1__0__Impl"


    // $ANTLR start "rule__Box__Group_3_1__1"
    // InternalIDSLParser.g:3794:1: rule__Box__Group_3_1__1 : rule__Box__Group_3_1__1__Impl rule__Box__Group_3_1__2 ;
    public final void rule__Box__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3798:1: ( rule__Box__Group_3_1__1__Impl rule__Box__Group_3_1__2 )
            // InternalIDSLParser.g:3799:2: rule__Box__Group_3_1__1__Impl rule__Box__Group_3_1__2
            {
            pushFollow(FOLLOW_8);
            rule__Box__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_1__1"


    // $ANTLR start "rule__Box__Group_3_1__1__Impl"
    // InternalIDSLParser.g:3806:1: rule__Box__Group_3_1__1__Impl : ( Colon ) ;
    public final void rule__Box__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3810:1: ( ( Colon ) )
            // InternalIDSLParser.g:3811:1: ( Colon )
            {
            // InternalIDSLParser.g:3811:1: ( Colon )
            // InternalIDSLParser.g:3812:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getColonKeyword_3_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getColonKeyword_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_1__1__Impl"


    // $ANTLR start "rule__Box__Group_3_1__2"
    // InternalIDSLParser.g:3821:1: rule__Box__Group_3_1__2 : rule__Box__Group_3_1__2__Impl ;
    public final void rule__Box__Group_3_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3825:1: ( rule__Box__Group_3_1__2__Impl )
            // InternalIDSLParser.g:3826:2: rule__Box__Group_3_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_1__2"


    // $ANTLR start "rule__Box__Group_3_1__2__Impl"
    // InternalIDSLParser.g:3832:1: rule__Box__Group_3_1__2__Impl : ( ( rule__Box__SizeAssignment_3_1_2 ) ) ;
    public final void rule__Box__Group_3_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3836:1: ( ( ( rule__Box__SizeAssignment_3_1_2 ) ) )
            // InternalIDSLParser.g:3837:1: ( ( rule__Box__SizeAssignment_3_1_2 ) )
            {
            // InternalIDSLParser.g:3837:1: ( ( rule__Box__SizeAssignment_3_1_2 ) )
            // InternalIDSLParser.g:3838:2: ( rule__Box__SizeAssignment_3_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getSizeAssignment_3_1_2()); 
            }
            // InternalIDSLParser.g:3839:2: ( rule__Box__SizeAssignment_3_1_2 )
            // InternalIDSLParser.g:3839:3: rule__Box__SizeAssignment_3_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Box__SizeAssignment_3_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getSizeAssignment_3_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_1__2__Impl"


    // $ANTLR start "rule__Box__Group_3_2__0"
    // InternalIDSLParser.g:3848:1: rule__Box__Group_3_2__0 : rule__Box__Group_3_2__0__Impl rule__Box__Group_3_2__1 ;
    public final void rule__Box__Group_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3852:1: ( rule__Box__Group_3_2__0__Impl rule__Box__Group_3_2__1 )
            // InternalIDSLParser.g:3853:2: rule__Box__Group_3_2__0__Impl rule__Box__Group_3_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Box__Group_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_2__0"


    // $ANTLR start "rule__Box__Group_3_2__0__Impl"
    // InternalIDSLParser.g:3860:1: rule__Box__Group_3_2__0__Impl : ( Position ) ;
    public final void rule__Box__Group_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3864:1: ( ( Position ) )
            // InternalIDSLParser.g:3865:1: ( Position )
            {
            // InternalIDSLParser.g:3865:1: ( Position )
            // InternalIDSLParser.g:3866:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getPositionKeyword_3_2_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getPositionKeyword_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_2__0__Impl"


    // $ANTLR start "rule__Box__Group_3_2__1"
    // InternalIDSLParser.g:3875:1: rule__Box__Group_3_2__1 : rule__Box__Group_3_2__1__Impl rule__Box__Group_3_2__2 ;
    public final void rule__Box__Group_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3879:1: ( rule__Box__Group_3_2__1__Impl rule__Box__Group_3_2__2 )
            // InternalIDSLParser.g:3880:2: rule__Box__Group_3_2__1__Impl rule__Box__Group_3_2__2
            {
            pushFollow(FOLLOW_8);
            rule__Box__Group_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_2__1"


    // $ANTLR start "rule__Box__Group_3_2__1__Impl"
    // InternalIDSLParser.g:3887:1: rule__Box__Group_3_2__1__Impl : ( Colon ) ;
    public final void rule__Box__Group_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3891:1: ( ( Colon ) )
            // InternalIDSLParser.g:3892:1: ( Colon )
            {
            // InternalIDSLParser.g:3892:1: ( Colon )
            // InternalIDSLParser.g:3893:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getColonKeyword_3_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getColonKeyword_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_2__1__Impl"


    // $ANTLR start "rule__Box__Group_3_2__2"
    // InternalIDSLParser.g:3902:1: rule__Box__Group_3_2__2 : rule__Box__Group_3_2__2__Impl ;
    public final void rule__Box__Group_3_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3906:1: ( rule__Box__Group_3_2__2__Impl )
            // InternalIDSLParser.g:3907:2: rule__Box__Group_3_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__Group_3_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_2__2"


    // $ANTLR start "rule__Box__Group_3_2__2__Impl"
    // InternalIDSLParser.g:3913:1: rule__Box__Group_3_2__2__Impl : ( ( rule__Box__PositionAssignment_3_2_2 ) ) ;
    public final void rule__Box__Group_3_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3917:1: ( ( ( rule__Box__PositionAssignment_3_2_2 ) ) )
            // InternalIDSLParser.g:3918:1: ( ( rule__Box__PositionAssignment_3_2_2 ) )
            {
            // InternalIDSLParser.g:3918:1: ( ( rule__Box__PositionAssignment_3_2_2 ) )
            // InternalIDSLParser.g:3919:2: ( rule__Box__PositionAssignment_3_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getPositionAssignment_3_2_2()); 
            }
            // InternalIDSLParser.g:3920:2: ( rule__Box__PositionAssignment_3_2_2 )
            // InternalIDSLParser.g:3920:3: rule__Box__PositionAssignment_3_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Box__PositionAssignment_3_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getPositionAssignment_3_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__Group_3_2__2__Impl"


    // $ANTLR start "rule__Text__Group_0__0"
    // InternalIDSLParser.g:3929:1: rule__Text__Group_0__0 : rule__Text__Group_0__0__Impl rule__Text__Group_0__1 ;
    public final void rule__Text__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3933:1: ( rule__Text__Group_0__0__Impl rule__Text__Group_0__1 )
            // InternalIDSLParser.g:3934:2: rule__Text__Group_0__0__Impl rule__Text__Group_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0__0"


    // $ANTLR start "rule__Text__Group_0__0__Impl"
    // InternalIDSLParser.g:3941:1: rule__Text__Group_0__0__Impl : ( ( rule__Text__NameAssignment_0_0 ) ) ;
    public final void rule__Text__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3945:1: ( ( ( rule__Text__NameAssignment_0_0 ) ) )
            // InternalIDSLParser.g:3946:1: ( ( rule__Text__NameAssignment_0_0 ) )
            {
            // InternalIDSLParser.g:3946:1: ( ( rule__Text__NameAssignment_0_0 ) )
            // InternalIDSLParser.g:3947:2: ( rule__Text__NameAssignment_0_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getNameAssignment_0_0()); 
            }
            // InternalIDSLParser.g:3948:2: ( rule__Text__NameAssignment_0_0 )
            // InternalIDSLParser.g:3948:3: rule__Text__NameAssignment_0_0
            {
            pushFollow(FOLLOW_2);
            rule__Text__NameAssignment_0_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getNameAssignment_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0__0__Impl"


    // $ANTLR start "rule__Text__Group_0__1"
    // InternalIDSLParser.g:3956:1: rule__Text__Group_0__1 : rule__Text__Group_0__1__Impl rule__Text__Group_0__2 ;
    public final void rule__Text__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3960:1: ( rule__Text__Group_0__1__Impl rule__Text__Group_0__2 )
            // InternalIDSLParser.g:3961:2: rule__Text__Group_0__1__Impl rule__Text__Group_0__2
            {
            pushFollow(FOLLOW_12);
            rule__Text__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0__1"


    // $ANTLR start "rule__Text__Group_0__1__Impl"
    // InternalIDSLParser.g:3968:1: rule__Text__Group_0__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3972:1: ( ( Colon ) )
            // InternalIDSLParser.g:3973:1: ( Colon )
            {
            // InternalIDSLParser.g:3973:1: ( Colon )
            // InternalIDSLParser.g:3974:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0__1__Impl"


    // $ANTLR start "rule__Text__Group_0__2"
    // InternalIDSLParser.g:3983:1: rule__Text__Group_0__2 : rule__Text__Group_0__2__Impl ;
    public final void rule__Text__Group_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3987:1: ( rule__Text__Group_0__2__Impl )
            // InternalIDSLParser.g:3988:2: rule__Text__Group_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0__2"


    // $ANTLR start "rule__Text__Group_0__2__Impl"
    // InternalIDSLParser.g:3994:1: rule__Text__Group_0__2__Impl : ( ( rule__Text__Group_0_2__0 ) ) ;
    public final void rule__Text__Group_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:3998:1: ( ( ( rule__Text__Group_0_2__0 ) ) )
            // InternalIDSLParser.g:3999:1: ( ( rule__Text__Group_0_2__0 ) )
            {
            // InternalIDSLParser.g:3999:1: ( ( rule__Text__Group_0_2__0 ) )
            // InternalIDSLParser.g:4000:2: ( rule__Text__Group_0_2__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getGroup_0_2()); 
            }
            // InternalIDSLParser.g:4001:2: ( rule__Text__Group_0_2__0 )
            // InternalIDSLParser.g:4001:3: rule__Text__Group_0_2__0
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getGroup_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2__0"
    // InternalIDSLParser.g:4010:1: rule__Text__Group_0_2__0 : rule__Text__Group_0_2__0__Impl rule__Text__Group_0_2__1 ;
    public final void rule__Text__Group_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4014:1: ( rule__Text__Group_0_2__0__Impl rule__Text__Group_0_2__1 )
            // InternalIDSLParser.g:4015:2: rule__Text__Group_0_2__0__Impl rule__Text__Group_0_2__1
            {
            pushFollow(FOLLOW_20);
            rule__Text__Group_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2__0"


    // $ANTLR start "rule__Text__Group_0_2__0__Impl"
    // InternalIDSLParser.g:4022:1: rule__Text__Group_0_2__0__Impl : ( RULE_BEGIN ) ;
    public final void rule__Text__Group_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4026:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:4027:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:4027:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:4028:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getBEGINTerminalRuleCall_0_2_0()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getBEGINTerminalRuleCall_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2__1"
    // InternalIDSLParser.g:4037:1: rule__Text__Group_0_2__1 : rule__Text__Group_0_2__1__Impl rule__Text__Group_0_2__2 ;
    public final void rule__Text__Group_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4041:1: ( rule__Text__Group_0_2__1__Impl rule__Text__Group_0_2__2 )
            // InternalIDSLParser.g:4042:2: rule__Text__Group_0_2__1__Impl rule__Text__Group_0_2__2
            {
            pushFollow(FOLLOW_10);
            rule__Text__Group_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2__1"


    // $ANTLR start "rule__Text__Group_0_2__1__Impl"
    // InternalIDSLParser.g:4049:1: rule__Text__Group_0_2__1__Impl : ( ( rule__Text__UnorderedGroup_0_2_1 ) ) ;
    public final void rule__Text__Group_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4053:1: ( ( ( rule__Text__UnorderedGroup_0_2_1 ) ) )
            // InternalIDSLParser.g:4054:1: ( ( rule__Text__UnorderedGroup_0_2_1 ) )
            {
            // InternalIDSLParser.g:4054:1: ( ( rule__Text__UnorderedGroup_0_2_1 ) )
            // InternalIDSLParser.g:4055:2: ( rule__Text__UnorderedGroup_0_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1()); 
            }
            // InternalIDSLParser.g:4056:2: ( rule__Text__UnorderedGroup_0_2_1 )
            // InternalIDSLParser.g:4056:3: rule__Text__UnorderedGroup_0_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Text__UnorderedGroup_0_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2__2"
    // InternalIDSLParser.g:4064:1: rule__Text__Group_0_2__2 : rule__Text__Group_0_2__2__Impl ;
    public final void rule__Text__Group_0_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4068:1: ( rule__Text__Group_0_2__2__Impl )
            // InternalIDSLParser.g:4069:2: rule__Text__Group_0_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2__2"


    // $ANTLR start "rule__Text__Group_0_2__2__Impl"
    // InternalIDSLParser.g:4075:1: rule__Text__Group_0_2__2__Impl : ( RULE_END ) ;
    public final void rule__Text__Group_0_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4079:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:4080:1: ( RULE_END )
            {
            // InternalIDSLParser.g:4080:1: ( RULE_END )
            // InternalIDSLParser.g:4081:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getENDTerminalRuleCall_0_2_2()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getENDTerminalRuleCall_0_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_0__0"
    // InternalIDSLParser.g:4091:1: rule__Text__Group_0_2_1_0__0 : rule__Text__Group_0_2_1_0__0__Impl rule__Text__Group_0_2_1_0__1 ;
    public final void rule__Text__Group_0_2_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4095:1: ( rule__Text__Group_0_2_1_0__0__Impl rule__Text__Group_0_2_1_0__1 )
            // InternalIDSLParser.g:4096:2: rule__Text__Group_0_2_1_0__0__Impl rule__Text__Group_0_2_1_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_0__0"


    // $ANTLR start "rule__Text__Group_0_2_1_0__0__Impl"
    // InternalIDSLParser.g:4103:1: rule__Text__Group_0_2_1_0__0__Impl : ( Align ) ;
    public final void rule__Text__Group_0_2_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4107:1: ( ( Align ) )
            // InternalIDSLParser.g:4108:1: ( Align )
            {
            // InternalIDSLParser.g:4108:1: ( Align )
            // InternalIDSLParser.g:4109:2: Align
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlignKeyword_0_2_1_0_0()); 
            }
            match(input,Align,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlignKeyword_0_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_0__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_0__1"
    // InternalIDSLParser.g:4118:1: rule__Text__Group_0_2_1_0__1 : rule__Text__Group_0_2_1_0__1__Impl rule__Text__Group_0_2_1_0__2 ;
    public final void rule__Text__Group_0_2_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4122:1: ( rule__Text__Group_0_2_1_0__1__Impl rule__Text__Group_0_2_1_0__2 )
            // InternalIDSLParser.g:4123:2: rule__Text__Group_0_2_1_0__1__Impl rule__Text__Group_0_2_1_0__2
            {
            pushFollow(FOLLOW_15);
            rule__Text__Group_0_2_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_0__1"


    // $ANTLR start "rule__Text__Group_0_2_1_0__1__Impl"
    // InternalIDSLParser.g:4130:1: rule__Text__Group_0_2_1_0__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4134:1: ( ( Colon ) )
            // InternalIDSLParser.g:4135:1: ( Colon )
            {
            // InternalIDSLParser.g:4135:1: ( Colon )
            // InternalIDSLParser.g:4136:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_0__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_0__2"
    // InternalIDSLParser.g:4145:1: rule__Text__Group_0_2_1_0__2 : rule__Text__Group_0_2_1_0__2__Impl ;
    public final void rule__Text__Group_0_2_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4149:1: ( rule__Text__Group_0_2_1_0__2__Impl )
            // InternalIDSLParser.g:4150:2: rule__Text__Group_0_2_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_0__2"


    // $ANTLR start "rule__Text__Group_0_2_1_0__2__Impl"
    // InternalIDSLParser.g:4156:1: rule__Text__Group_0_2_1_0__2__Impl : ( ( rule__Text__AlignAssignment_0_2_1_0_2 ) ) ;
    public final void rule__Text__Group_0_2_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4160:1: ( ( ( rule__Text__AlignAssignment_0_2_1_0_2 ) ) )
            // InternalIDSLParser.g:4161:1: ( ( rule__Text__AlignAssignment_0_2_1_0_2 ) )
            {
            // InternalIDSLParser.g:4161:1: ( ( rule__Text__AlignAssignment_0_2_1_0_2 ) )
            // InternalIDSLParser.g:4162:2: ( rule__Text__AlignAssignment_0_2_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlignAssignment_0_2_1_0_2()); 
            }
            // InternalIDSLParser.g:4163:2: ( rule__Text__AlignAssignment_0_2_1_0_2 )
            // InternalIDSLParser.g:4163:3: rule__Text__AlignAssignment_0_2_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__AlignAssignment_0_2_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlignAssignment_0_2_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_0__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_1__0"
    // InternalIDSLParser.g:4172:1: rule__Text__Group_0_2_1_1__0 : rule__Text__Group_0_2_1_1__0__Impl rule__Text__Group_0_2_1_1__1 ;
    public final void rule__Text__Group_0_2_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4176:1: ( rule__Text__Group_0_2_1_1__0__Impl rule__Text__Group_0_2_1_1__1 )
            // InternalIDSLParser.g:4177:2: rule__Text__Group_0_2_1_1__0__Impl rule__Text__Group_0_2_1_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_1__0"


    // $ANTLR start "rule__Text__Group_0_2_1_1__0__Impl"
    // InternalIDSLParser.g:4184:1: rule__Text__Group_0_2_1_1__0__Impl : ( Color ) ;
    public final void rule__Text__Group_0_2_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4188:1: ( ( Color ) )
            // InternalIDSLParser.g:4189:1: ( Color )
            {
            // InternalIDSLParser.g:4189:1: ( Color )
            // InternalIDSLParser.g:4190:2: Color
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColorKeyword_0_2_1_1_0()); 
            }
            match(input,Color,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColorKeyword_0_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_1__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_1__1"
    // InternalIDSLParser.g:4199:1: rule__Text__Group_0_2_1_1__1 : rule__Text__Group_0_2_1_1__1__Impl rule__Text__Group_0_2_1_1__2 ;
    public final void rule__Text__Group_0_2_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4203:1: ( rule__Text__Group_0_2_1_1__1__Impl rule__Text__Group_0_2_1_1__2 )
            // InternalIDSLParser.g:4204:2: rule__Text__Group_0_2_1_1__1__Impl rule__Text__Group_0_2_1_1__2
            {
            pushFollow(FOLLOW_5);
            rule__Text__Group_0_2_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_1__1"


    // $ANTLR start "rule__Text__Group_0_2_1_1__1__Impl"
    // InternalIDSLParser.g:4211:1: rule__Text__Group_0_2_1_1__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4215:1: ( ( Colon ) )
            // InternalIDSLParser.g:4216:1: ( Colon )
            {
            // InternalIDSLParser.g:4216:1: ( Colon )
            // InternalIDSLParser.g:4217:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_1__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_1__2"
    // InternalIDSLParser.g:4226:1: rule__Text__Group_0_2_1_1__2 : rule__Text__Group_0_2_1_1__2__Impl ;
    public final void rule__Text__Group_0_2_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4230:1: ( rule__Text__Group_0_2_1_1__2__Impl )
            // InternalIDSLParser.g:4231:2: rule__Text__Group_0_2_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_1__2"


    // $ANTLR start "rule__Text__Group_0_2_1_1__2__Impl"
    // InternalIDSLParser.g:4237:1: rule__Text__Group_0_2_1_1__2__Impl : ( ( rule__Text__ColorAssignment_0_2_1_1_2 ) ) ;
    public final void rule__Text__Group_0_2_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4241:1: ( ( ( rule__Text__ColorAssignment_0_2_1_1_2 ) ) )
            // InternalIDSLParser.g:4242:1: ( ( rule__Text__ColorAssignment_0_2_1_1_2 ) )
            {
            // InternalIDSLParser.g:4242:1: ( ( rule__Text__ColorAssignment_0_2_1_1_2 ) )
            // InternalIDSLParser.g:4243:2: ( rule__Text__ColorAssignment_0_2_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColorAssignment_0_2_1_1_2()); 
            }
            // InternalIDSLParser.g:4244:2: ( rule__Text__ColorAssignment_0_2_1_1_2 )
            // InternalIDSLParser.g:4244:3: rule__Text__ColorAssignment_0_2_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__ColorAssignment_0_2_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColorAssignment_0_2_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_1__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_2__0"
    // InternalIDSLParser.g:4253:1: rule__Text__Group_0_2_1_2__0 : rule__Text__Group_0_2_1_2__0__Impl rule__Text__Group_0_2_1_2__1 ;
    public final void rule__Text__Group_0_2_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4257:1: ( rule__Text__Group_0_2_1_2__0__Impl rule__Text__Group_0_2_1_2__1 )
            // InternalIDSLParser.g:4258:2: rule__Text__Group_0_2_1_2__0__Impl rule__Text__Group_0_2_1_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_2__0"


    // $ANTLR start "rule__Text__Group_0_2_1_2__0__Impl"
    // InternalIDSLParser.g:4265:1: rule__Text__Group_0_2_1_2__0__Impl : ( Font ) ;
    public final void rule__Text__Group_0_2_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4269:1: ( ( Font ) )
            // InternalIDSLParser.g:4270:1: ( Font )
            {
            // InternalIDSLParser.g:4270:1: ( Font )
            // InternalIDSLParser.g:4271:2: Font
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getFontKeyword_0_2_1_2_0()); 
            }
            match(input,Font,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getFontKeyword_0_2_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_2__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_2__1"
    // InternalIDSLParser.g:4280:1: rule__Text__Group_0_2_1_2__1 : rule__Text__Group_0_2_1_2__1__Impl rule__Text__Group_0_2_1_2__2 ;
    public final void rule__Text__Group_0_2_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4284:1: ( rule__Text__Group_0_2_1_2__1__Impl rule__Text__Group_0_2_1_2__2 )
            // InternalIDSLParser.g:4285:2: rule__Text__Group_0_2_1_2__1__Impl rule__Text__Group_0_2_1_2__2
            {
            pushFollow(FOLLOW_16);
            rule__Text__Group_0_2_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_2__1"


    // $ANTLR start "rule__Text__Group_0_2_1_2__1__Impl"
    // InternalIDSLParser.g:4292:1: rule__Text__Group_0_2_1_2__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4296:1: ( ( Colon ) )
            // InternalIDSLParser.g:4297:1: ( Colon )
            {
            // InternalIDSLParser.g:4297:1: ( Colon )
            // InternalIDSLParser.g:4298:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_2__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_2__2"
    // InternalIDSLParser.g:4307:1: rule__Text__Group_0_2_1_2__2 : rule__Text__Group_0_2_1_2__2__Impl ;
    public final void rule__Text__Group_0_2_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4311:1: ( rule__Text__Group_0_2_1_2__2__Impl )
            // InternalIDSLParser.g:4312:2: rule__Text__Group_0_2_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_2__2"


    // $ANTLR start "rule__Text__Group_0_2_1_2__2__Impl"
    // InternalIDSLParser.g:4318:1: rule__Text__Group_0_2_1_2__2__Impl : ( ( rule__Text__FontAssignment_0_2_1_2_2 ) ) ;
    public final void rule__Text__Group_0_2_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4322:1: ( ( ( rule__Text__FontAssignment_0_2_1_2_2 ) ) )
            // InternalIDSLParser.g:4323:1: ( ( rule__Text__FontAssignment_0_2_1_2_2 ) )
            {
            // InternalIDSLParser.g:4323:1: ( ( rule__Text__FontAssignment_0_2_1_2_2 ) )
            // InternalIDSLParser.g:4324:2: ( rule__Text__FontAssignment_0_2_1_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getFontAssignment_0_2_1_2_2()); 
            }
            // InternalIDSLParser.g:4325:2: ( rule__Text__FontAssignment_0_2_1_2_2 )
            // InternalIDSLParser.g:4325:3: rule__Text__FontAssignment_0_2_1_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__FontAssignment_0_2_1_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getFontAssignment_0_2_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_2__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_3__0"
    // InternalIDSLParser.g:4334:1: rule__Text__Group_0_2_1_3__0 : rule__Text__Group_0_2_1_3__0__Impl rule__Text__Group_0_2_1_3__1 ;
    public final void rule__Text__Group_0_2_1_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4338:1: ( rule__Text__Group_0_2_1_3__0__Impl rule__Text__Group_0_2_1_3__1 )
            // InternalIDSLParser.g:4339:2: rule__Text__Group_0_2_1_3__0__Impl rule__Text__Group_0_2_1_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_3__0"


    // $ANTLR start "rule__Text__Group_0_2_1_3__0__Impl"
    // InternalIDSLParser.g:4346:1: rule__Text__Group_0_2_1_3__0__Impl : ( Lineheight ) ;
    public final void rule__Text__Group_0_2_1_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4350:1: ( ( Lineheight ) )
            // InternalIDSLParser.g:4351:1: ( Lineheight )
            {
            // InternalIDSLParser.g:4351:1: ( Lineheight )
            // InternalIDSLParser.g:4352:2: Lineheight
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getLineheightKeyword_0_2_1_3_0()); 
            }
            match(input,Lineheight,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getLineheightKeyword_0_2_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_3__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_3__1"
    // InternalIDSLParser.g:4361:1: rule__Text__Group_0_2_1_3__1 : rule__Text__Group_0_2_1_3__1__Impl rule__Text__Group_0_2_1_3__2 ;
    public final void rule__Text__Group_0_2_1_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4365:1: ( rule__Text__Group_0_2_1_3__1__Impl rule__Text__Group_0_2_1_3__2 )
            // InternalIDSLParser.g:4366:2: rule__Text__Group_0_2_1_3__1__Impl rule__Text__Group_0_2_1_3__2
            {
            pushFollow(FOLLOW_17);
            rule__Text__Group_0_2_1_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_3__1"


    // $ANTLR start "rule__Text__Group_0_2_1_3__1__Impl"
    // InternalIDSLParser.g:4373:1: rule__Text__Group_0_2_1_3__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4377:1: ( ( Colon ) )
            // InternalIDSLParser.g:4378:1: ( Colon )
            {
            // InternalIDSLParser.g:4378:1: ( Colon )
            // InternalIDSLParser.g:4379:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_3__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_3__2"
    // InternalIDSLParser.g:4388:1: rule__Text__Group_0_2_1_3__2 : rule__Text__Group_0_2_1_3__2__Impl ;
    public final void rule__Text__Group_0_2_1_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4392:1: ( rule__Text__Group_0_2_1_3__2__Impl )
            // InternalIDSLParser.g:4393:2: rule__Text__Group_0_2_1_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_3__2"


    // $ANTLR start "rule__Text__Group_0_2_1_3__2__Impl"
    // InternalIDSLParser.g:4399:1: rule__Text__Group_0_2_1_3__2__Impl : ( ( rule__Text__LineheightAssignment_0_2_1_3_2 ) ) ;
    public final void rule__Text__Group_0_2_1_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4403:1: ( ( ( rule__Text__LineheightAssignment_0_2_1_3_2 ) ) )
            // InternalIDSLParser.g:4404:1: ( ( rule__Text__LineheightAssignment_0_2_1_3_2 ) )
            {
            // InternalIDSLParser.g:4404:1: ( ( rule__Text__LineheightAssignment_0_2_1_3_2 ) )
            // InternalIDSLParser.g:4405:2: ( rule__Text__LineheightAssignment_0_2_1_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getLineheightAssignment_0_2_1_3_2()); 
            }
            // InternalIDSLParser.g:4406:2: ( rule__Text__LineheightAssignment_0_2_1_3_2 )
            // InternalIDSLParser.g:4406:3: rule__Text__LineheightAssignment_0_2_1_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__LineheightAssignment_0_2_1_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getLineheightAssignment_0_2_1_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_3__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_4__0"
    // InternalIDSLParser.g:4415:1: rule__Text__Group_0_2_1_4__0 : rule__Text__Group_0_2_1_4__0__Impl rule__Text__Group_0_2_1_4__1 ;
    public final void rule__Text__Group_0_2_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4419:1: ( rule__Text__Group_0_2_1_4__0__Impl rule__Text__Group_0_2_1_4__1 )
            // InternalIDSLParser.g:4420:2: rule__Text__Group_0_2_1_4__0__Impl rule__Text__Group_0_2_1_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_4__0"


    // $ANTLR start "rule__Text__Group_0_2_1_4__0__Impl"
    // InternalIDSLParser.g:4427:1: rule__Text__Group_0_2_1_4__0__Impl : ( Position ) ;
    public final void rule__Text__Group_0_2_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4431:1: ( ( Position ) )
            // InternalIDSLParser.g:4432:1: ( Position )
            {
            // InternalIDSLParser.g:4432:1: ( Position )
            // InternalIDSLParser.g:4433:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getPositionKeyword_0_2_1_4_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getPositionKeyword_0_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_4__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_4__1"
    // InternalIDSLParser.g:4442:1: rule__Text__Group_0_2_1_4__1 : rule__Text__Group_0_2_1_4__1__Impl rule__Text__Group_0_2_1_4__2 ;
    public final void rule__Text__Group_0_2_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4446:1: ( rule__Text__Group_0_2_1_4__1__Impl rule__Text__Group_0_2_1_4__2 )
            // InternalIDSLParser.g:4447:2: rule__Text__Group_0_2_1_4__1__Impl rule__Text__Group_0_2_1_4__2
            {
            pushFollow(FOLLOW_8);
            rule__Text__Group_0_2_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_4__1"


    // $ANTLR start "rule__Text__Group_0_2_1_4__1__Impl"
    // InternalIDSLParser.g:4454:1: rule__Text__Group_0_2_1_4__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4458:1: ( ( Colon ) )
            // InternalIDSLParser.g:4459:1: ( Colon )
            {
            // InternalIDSLParser.g:4459:1: ( Colon )
            // InternalIDSLParser.g:4460:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_4__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_4__2"
    // InternalIDSLParser.g:4469:1: rule__Text__Group_0_2_1_4__2 : rule__Text__Group_0_2_1_4__2__Impl ;
    public final void rule__Text__Group_0_2_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4473:1: ( rule__Text__Group_0_2_1_4__2__Impl )
            // InternalIDSLParser.g:4474:2: rule__Text__Group_0_2_1_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_4__2"


    // $ANTLR start "rule__Text__Group_0_2_1_4__2__Impl"
    // InternalIDSLParser.g:4480:1: rule__Text__Group_0_2_1_4__2__Impl : ( ( rule__Text__PositionAssignment_0_2_1_4_2 ) ) ;
    public final void rule__Text__Group_0_2_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4484:1: ( ( ( rule__Text__PositionAssignment_0_2_1_4_2 ) ) )
            // InternalIDSLParser.g:4485:1: ( ( rule__Text__PositionAssignment_0_2_1_4_2 ) )
            {
            // InternalIDSLParser.g:4485:1: ( ( rule__Text__PositionAssignment_0_2_1_4_2 ) )
            // InternalIDSLParser.g:4486:2: ( rule__Text__PositionAssignment_0_2_1_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getPositionAssignment_0_2_1_4_2()); 
            }
            // InternalIDSLParser.g:4487:2: ( rule__Text__PositionAssignment_0_2_1_4_2 )
            // InternalIDSLParser.g:4487:3: rule__Text__PositionAssignment_0_2_1_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__PositionAssignment_0_2_1_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getPositionAssignment_0_2_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_4__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_5__0"
    // InternalIDSLParser.g:4496:1: rule__Text__Group_0_2_1_5__0 : rule__Text__Group_0_2_1_5__0__Impl rule__Text__Group_0_2_1_5__1 ;
    public final void rule__Text__Group_0_2_1_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4500:1: ( rule__Text__Group_0_2_1_5__0__Impl rule__Text__Group_0_2_1_5__1 )
            // InternalIDSLParser.g:4501:2: rule__Text__Group_0_2_1_5__0__Impl rule__Text__Group_0_2_1_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_5__0"


    // $ANTLR start "rule__Text__Group_0_2_1_5__0__Impl"
    // InternalIDSLParser.g:4508:1: rule__Text__Group_0_2_1_5__0__Impl : ( Maxwidth ) ;
    public final void rule__Text__Group_0_2_1_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4512:1: ( ( Maxwidth ) )
            // InternalIDSLParser.g:4513:1: ( Maxwidth )
            {
            // InternalIDSLParser.g:4513:1: ( Maxwidth )
            // InternalIDSLParser.g:4514:2: Maxwidth
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getMaxwidthKeyword_0_2_1_5_0()); 
            }
            match(input,Maxwidth,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getMaxwidthKeyword_0_2_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_5__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_5__1"
    // InternalIDSLParser.g:4523:1: rule__Text__Group_0_2_1_5__1 : rule__Text__Group_0_2_1_5__1__Impl rule__Text__Group_0_2_1_5__2 ;
    public final void rule__Text__Group_0_2_1_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4527:1: ( rule__Text__Group_0_2_1_5__1__Impl rule__Text__Group_0_2_1_5__2 )
            // InternalIDSLParser.g:4528:2: rule__Text__Group_0_2_1_5__1__Impl rule__Text__Group_0_2_1_5__2
            {
            pushFollow(FOLLOW_17);
            rule__Text__Group_0_2_1_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_5__1"


    // $ANTLR start "rule__Text__Group_0_2_1_5__1__Impl"
    // InternalIDSLParser.g:4535:1: rule__Text__Group_0_2_1_5__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4539:1: ( ( Colon ) )
            // InternalIDSLParser.g:4540:1: ( Colon )
            {
            // InternalIDSLParser.g:4540:1: ( Colon )
            // InternalIDSLParser.g:4541:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_5__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_5__2"
    // InternalIDSLParser.g:4550:1: rule__Text__Group_0_2_1_5__2 : rule__Text__Group_0_2_1_5__2__Impl ;
    public final void rule__Text__Group_0_2_1_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4554:1: ( rule__Text__Group_0_2_1_5__2__Impl )
            // InternalIDSLParser.g:4555:2: rule__Text__Group_0_2_1_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_5__2"


    // $ANTLR start "rule__Text__Group_0_2_1_5__2__Impl"
    // InternalIDSLParser.g:4561:1: rule__Text__Group_0_2_1_5__2__Impl : ( ( rule__Text__MaxwidthAssignment_0_2_1_5_2 ) ) ;
    public final void rule__Text__Group_0_2_1_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4565:1: ( ( ( rule__Text__MaxwidthAssignment_0_2_1_5_2 ) ) )
            // InternalIDSLParser.g:4566:1: ( ( rule__Text__MaxwidthAssignment_0_2_1_5_2 ) )
            {
            // InternalIDSLParser.g:4566:1: ( ( rule__Text__MaxwidthAssignment_0_2_1_5_2 ) )
            // InternalIDSLParser.g:4567:2: ( rule__Text__MaxwidthAssignment_0_2_1_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getMaxwidthAssignment_0_2_1_5_2()); 
            }
            // InternalIDSLParser.g:4568:2: ( rule__Text__MaxwidthAssignment_0_2_1_5_2 )
            // InternalIDSLParser.g:4568:3: rule__Text__MaxwidthAssignment_0_2_1_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__MaxwidthAssignment_0_2_1_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getMaxwidthAssignment_0_2_1_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_5__2__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_6__0"
    // InternalIDSLParser.g:4577:1: rule__Text__Group_0_2_1_6__0 : rule__Text__Group_0_2_1_6__0__Impl rule__Text__Group_0_2_1_6__1 ;
    public final void rule__Text__Group_0_2_1_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4581:1: ( rule__Text__Group_0_2_1_6__0__Impl rule__Text__Group_0_2_1_6__1 )
            // InternalIDSLParser.g:4582:2: rule__Text__Group_0_2_1_6__0__Impl rule__Text__Group_0_2_1_6__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_0_2_1_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_6__0"


    // $ANTLR start "rule__Text__Group_0_2_1_6__0__Impl"
    // InternalIDSLParser.g:4589:1: rule__Text__Group_0_2_1_6__0__Impl : ( Value ) ;
    public final void rule__Text__Group_0_2_1_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4593:1: ( ( Value ) )
            // InternalIDSLParser.g:4594:1: ( Value )
            {
            // InternalIDSLParser.g:4594:1: ( Value )
            // InternalIDSLParser.g:4595:2: Value
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getValueKeyword_0_2_1_6_0()); 
            }
            match(input,Value,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getValueKeyword_0_2_1_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_6__0__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_6__1"
    // InternalIDSLParser.g:4604:1: rule__Text__Group_0_2_1_6__1 : rule__Text__Group_0_2_1_6__1__Impl rule__Text__Group_0_2_1_6__2 ;
    public final void rule__Text__Group_0_2_1_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4608:1: ( rule__Text__Group_0_2_1_6__1__Impl rule__Text__Group_0_2_1_6__2 )
            // InternalIDSLParser.g:4609:2: rule__Text__Group_0_2_1_6__1__Impl rule__Text__Group_0_2_1_6__2
            {
            pushFollow(FOLLOW_7);
            rule__Text__Group_0_2_1_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_6__1"


    // $ANTLR start "rule__Text__Group_0_2_1_6__1__Impl"
    // InternalIDSLParser.g:4616:1: rule__Text__Group_0_2_1_6__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_0_2_1_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4620:1: ( ( Colon ) )
            // InternalIDSLParser.g:4621:1: ( Colon )
            {
            // InternalIDSLParser.g:4621:1: ( Colon )
            // InternalIDSLParser.g:4622:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_0_2_1_6_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_0_2_1_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_6__1__Impl"


    // $ANTLR start "rule__Text__Group_0_2_1_6__2"
    // InternalIDSLParser.g:4631:1: rule__Text__Group_0_2_1_6__2 : rule__Text__Group_0_2_1_6__2__Impl ;
    public final void rule__Text__Group_0_2_1_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4635:1: ( rule__Text__Group_0_2_1_6__2__Impl )
            // InternalIDSLParser.g:4636:2: rule__Text__Group_0_2_1_6__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_0_2_1_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_6__2"


    // $ANTLR start "rule__Text__Group_0_2_1_6__2__Impl"
    // InternalIDSLParser.g:4642:1: rule__Text__Group_0_2_1_6__2__Impl : ( ( rule__Text__ValueAssignment_0_2_1_6_2 ) ) ;
    public final void rule__Text__Group_0_2_1_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4646:1: ( ( ( rule__Text__ValueAssignment_0_2_1_6_2 ) ) )
            // InternalIDSLParser.g:4647:1: ( ( rule__Text__ValueAssignment_0_2_1_6_2 ) )
            {
            // InternalIDSLParser.g:4647:1: ( ( rule__Text__ValueAssignment_0_2_1_6_2 ) )
            // InternalIDSLParser.g:4648:2: ( rule__Text__ValueAssignment_0_2_1_6_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getValueAssignment_0_2_1_6_2()); 
            }
            // InternalIDSLParser.g:4649:2: ( rule__Text__ValueAssignment_0_2_1_6_2 )
            // InternalIDSLParser.g:4649:3: rule__Text__ValueAssignment_0_2_1_6_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__ValueAssignment_0_2_1_6_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getValueAssignment_0_2_1_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_0_2_1_6__2__Impl"


    // $ANTLR start "rule__Text__Group_1__0"
    // InternalIDSLParser.g:4658:1: rule__Text__Group_1__0 : rule__Text__Group_1__0__Impl rule__Text__Group_1__1 ;
    public final void rule__Text__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4662:1: ( rule__Text__Group_1__0__Impl rule__Text__Group_1__1 )
            // InternalIDSLParser.g:4663:2: rule__Text__Group_1__0__Impl rule__Text__Group_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1__0"


    // $ANTLR start "rule__Text__Group_1__0__Impl"
    // InternalIDSLParser.g:4670:1: rule__Text__Group_1__0__Impl : ( ( rule__Text__NameAssignment_1_0 ) ) ;
    public final void rule__Text__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4674:1: ( ( ( rule__Text__NameAssignment_1_0 ) ) )
            // InternalIDSLParser.g:4675:1: ( ( rule__Text__NameAssignment_1_0 ) )
            {
            // InternalIDSLParser.g:4675:1: ( ( rule__Text__NameAssignment_1_0 ) )
            // InternalIDSLParser.g:4676:2: ( rule__Text__NameAssignment_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getNameAssignment_1_0()); 
            }
            // InternalIDSLParser.g:4677:2: ( rule__Text__NameAssignment_1_0 )
            // InternalIDSLParser.g:4677:3: rule__Text__NameAssignment_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Text__NameAssignment_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getNameAssignment_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1__0__Impl"


    // $ANTLR start "rule__Text__Group_1__1"
    // InternalIDSLParser.g:4685:1: rule__Text__Group_1__1 : rule__Text__Group_1__1__Impl rule__Text__Group_1__2 ;
    public final void rule__Text__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4689:1: ( rule__Text__Group_1__1__Impl rule__Text__Group_1__2 )
            // InternalIDSLParser.g:4690:2: rule__Text__Group_1__1__Impl rule__Text__Group_1__2
            {
            pushFollow(FOLLOW_12);
            rule__Text__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1__1"


    // $ANTLR start "rule__Text__Group_1__1__Impl"
    // InternalIDSLParser.g:4697:1: rule__Text__Group_1__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4701:1: ( ( Colon ) )
            // InternalIDSLParser.g:4702:1: ( Colon )
            {
            // InternalIDSLParser.g:4702:1: ( Colon )
            // InternalIDSLParser.g:4703:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1__1__Impl"


    // $ANTLR start "rule__Text__Group_1__2"
    // InternalIDSLParser.g:4712:1: rule__Text__Group_1__2 : rule__Text__Group_1__2__Impl ;
    public final void rule__Text__Group_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4716:1: ( rule__Text__Group_1__2__Impl )
            // InternalIDSLParser.g:4717:2: rule__Text__Group_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1__2"


    // $ANTLR start "rule__Text__Group_1__2__Impl"
    // InternalIDSLParser.g:4723:1: rule__Text__Group_1__2__Impl : ( ( rule__Text__Group_1_2__0 ) ) ;
    public final void rule__Text__Group_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4727:1: ( ( ( rule__Text__Group_1_2__0 ) ) )
            // InternalIDSLParser.g:4728:1: ( ( rule__Text__Group_1_2__0 ) )
            {
            // InternalIDSLParser.g:4728:1: ( ( rule__Text__Group_1_2__0 ) )
            // InternalIDSLParser.g:4729:2: ( rule__Text__Group_1_2__0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getGroup_1_2()); 
            }
            // InternalIDSLParser.g:4730:2: ( rule__Text__Group_1_2__0 )
            // InternalIDSLParser.g:4730:3: rule__Text__Group_1_2__0
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2__0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getGroup_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2__0"
    // InternalIDSLParser.g:4739:1: rule__Text__Group_1_2__0 : rule__Text__Group_1_2__0__Impl rule__Text__Group_1_2__1 ;
    public final void rule__Text__Group_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4743:1: ( rule__Text__Group_1_2__0__Impl rule__Text__Group_1_2__1 )
            // InternalIDSLParser.g:4744:2: rule__Text__Group_1_2__0__Impl rule__Text__Group_1_2__1
            {
            pushFollow(FOLLOW_14);
            rule__Text__Group_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2__0"


    // $ANTLR start "rule__Text__Group_1_2__0__Impl"
    // InternalIDSLParser.g:4751:1: rule__Text__Group_1_2__0__Impl : ( RULE_BEGIN ) ;
    public final void rule__Text__Group_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4755:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:4756:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:4756:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:4757:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getBEGINTerminalRuleCall_1_2_0()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getBEGINTerminalRuleCall_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2__1"
    // InternalIDSLParser.g:4766:1: rule__Text__Group_1_2__1 : rule__Text__Group_1_2__1__Impl rule__Text__Group_1_2__2 ;
    public final void rule__Text__Group_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4770:1: ( rule__Text__Group_1_2__1__Impl rule__Text__Group_1_2__2 )
            // InternalIDSLParser.g:4771:2: rule__Text__Group_1_2__1__Impl rule__Text__Group_1_2__2
            {
            pushFollow(FOLLOW_10);
            rule__Text__Group_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2__1"


    // $ANTLR start "rule__Text__Group_1_2__1__Impl"
    // InternalIDSLParser.g:4778:1: rule__Text__Group_1_2__1__Impl : ( ( rule__Text__UnorderedGroup_1_2_1 ) ) ;
    public final void rule__Text__Group_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4782:1: ( ( ( rule__Text__UnorderedGroup_1_2_1 ) ) )
            // InternalIDSLParser.g:4783:1: ( ( rule__Text__UnorderedGroup_1_2_1 ) )
            {
            // InternalIDSLParser.g:4783:1: ( ( rule__Text__UnorderedGroup_1_2_1 ) )
            // InternalIDSLParser.g:4784:2: ( rule__Text__UnorderedGroup_1_2_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1()); 
            }
            // InternalIDSLParser.g:4785:2: ( rule__Text__UnorderedGroup_1_2_1 )
            // InternalIDSLParser.g:4785:3: rule__Text__UnorderedGroup_1_2_1
            {
            pushFollow(FOLLOW_2);
            rule__Text__UnorderedGroup_1_2_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2__2"
    // InternalIDSLParser.g:4793:1: rule__Text__Group_1_2__2 : rule__Text__Group_1_2__2__Impl ;
    public final void rule__Text__Group_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4797:1: ( rule__Text__Group_1_2__2__Impl )
            // InternalIDSLParser.g:4798:2: rule__Text__Group_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2__2"


    // $ANTLR start "rule__Text__Group_1_2__2__Impl"
    // InternalIDSLParser.g:4804:1: rule__Text__Group_1_2__2__Impl : ( RULE_END ) ;
    public final void rule__Text__Group_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4808:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:4809:1: ( RULE_END )
            {
            // InternalIDSLParser.g:4809:1: ( RULE_END )
            // InternalIDSLParser.g:4810:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getENDTerminalRuleCall_1_2_2()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getENDTerminalRuleCall_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_0__0"
    // InternalIDSLParser.g:4820:1: rule__Text__Group_1_2_1_0__0 : rule__Text__Group_1_2_1_0__0__Impl rule__Text__Group_1_2_1_0__1 ;
    public final void rule__Text__Group_1_2_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4824:1: ( rule__Text__Group_1_2_1_0__0__Impl rule__Text__Group_1_2_1_0__1 )
            // InternalIDSLParser.g:4825:2: rule__Text__Group_1_2_1_0__0__Impl rule__Text__Group_1_2_1_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1_2_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_0__0"


    // $ANTLR start "rule__Text__Group_1_2_1_0__0__Impl"
    // InternalIDSLParser.g:4832:1: rule__Text__Group_1_2_1_0__0__Impl : ( Align ) ;
    public final void rule__Text__Group_1_2_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4836:1: ( ( Align ) )
            // InternalIDSLParser.g:4837:1: ( Align )
            {
            // InternalIDSLParser.g:4837:1: ( Align )
            // InternalIDSLParser.g:4838:2: Align
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlignKeyword_1_2_1_0_0()); 
            }
            match(input,Align,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlignKeyword_1_2_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_0__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_0__1"
    // InternalIDSLParser.g:4847:1: rule__Text__Group_1_2_1_0__1 : rule__Text__Group_1_2_1_0__1__Impl rule__Text__Group_1_2_1_0__2 ;
    public final void rule__Text__Group_1_2_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4851:1: ( rule__Text__Group_1_2_1_0__1__Impl rule__Text__Group_1_2_1_0__2 )
            // InternalIDSLParser.g:4852:2: rule__Text__Group_1_2_1_0__1__Impl rule__Text__Group_1_2_1_0__2
            {
            pushFollow(FOLLOW_15);
            rule__Text__Group_1_2_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_0__1"


    // $ANTLR start "rule__Text__Group_1_2_1_0__1__Impl"
    // InternalIDSLParser.g:4859:1: rule__Text__Group_1_2_1_0__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1_2_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4863:1: ( ( Colon ) )
            // InternalIDSLParser.g:4864:1: ( Colon )
            {
            // InternalIDSLParser.g:4864:1: ( Colon )
            // InternalIDSLParser.g:4865:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_2_1_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_2_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_0__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_0__2"
    // InternalIDSLParser.g:4874:1: rule__Text__Group_1_2_1_0__2 : rule__Text__Group_1_2_1_0__2__Impl ;
    public final void rule__Text__Group_1_2_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4878:1: ( rule__Text__Group_1_2_1_0__2__Impl )
            // InternalIDSLParser.g:4879:2: rule__Text__Group_1_2_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_0__2"


    // $ANTLR start "rule__Text__Group_1_2_1_0__2__Impl"
    // InternalIDSLParser.g:4885:1: rule__Text__Group_1_2_1_0__2__Impl : ( ( rule__Text__AlignAssignment_1_2_1_0_2 ) ) ;
    public final void rule__Text__Group_1_2_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4889:1: ( ( ( rule__Text__AlignAssignment_1_2_1_0_2 ) ) )
            // InternalIDSLParser.g:4890:1: ( ( rule__Text__AlignAssignment_1_2_1_0_2 ) )
            {
            // InternalIDSLParser.g:4890:1: ( ( rule__Text__AlignAssignment_1_2_1_0_2 ) )
            // InternalIDSLParser.g:4891:2: ( rule__Text__AlignAssignment_1_2_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlignAssignment_1_2_1_0_2()); 
            }
            // InternalIDSLParser.g:4892:2: ( rule__Text__AlignAssignment_1_2_1_0_2 )
            // InternalIDSLParser.g:4892:3: rule__Text__AlignAssignment_1_2_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__AlignAssignment_1_2_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlignAssignment_1_2_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_0__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_1__0"
    // InternalIDSLParser.g:4901:1: rule__Text__Group_1_2_1_1__0 : rule__Text__Group_1_2_1_1__0__Impl rule__Text__Group_1_2_1_1__1 ;
    public final void rule__Text__Group_1_2_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4905:1: ( rule__Text__Group_1_2_1_1__0__Impl rule__Text__Group_1_2_1_1__1 )
            // InternalIDSLParser.g:4906:2: rule__Text__Group_1_2_1_1__0__Impl rule__Text__Group_1_2_1_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1_2_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_1__0"


    // $ANTLR start "rule__Text__Group_1_2_1_1__0__Impl"
    // InternalIDSLParser.g:4913:1: rule__Text__Group_1_2_1_1__0__Impl : ( Color ) ;
    public final void rule__Text__Group_1_2_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4917:1: ( ( Color ) )
            // InternalIDSLParser.g:4918:1: ( Color )
            {
            // InternalIDSLParser.g:4918:1: ( Color )
            // InternalIDSLParser.g:4919:2: Color
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColorKeyword_1_2_1_1_0()); 
            }
            match(input,Color,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColorKeyword_1_2_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_1__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_1__1"
    // InternalIDSLParser.g:4928:1: rule__Text__Group_1_2_1_1__1 : rule__Text__Group_1_2_1_1__1__Impl rule__Text__Group_1_2_1_1__2 ;
    public final void rule__Text__Group_1_2_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4932:1: ( rule__Text__Group_1_2_1_1__1__Impl rule__Text__Group_1_2_1_1__2 )
            // InternalIDSLParser.g:4933:2: rule__Text__Group_1_2_1_1__1__Impl rule__Text__Group_1_2_1_1__2
            {
            pushFollow(FOLLOW_5);
            rule__Text__Group_1_2_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_1__1"


    // $ANTLR start "rule__Text__Group_1_2_1_1__1__Impl"
    // InternalIDSLParser.g:4940:1: rule__Text__Group_1_2_1_1__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1_2_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4944:1: ( ( Colon ) )
            // InternalIDSLParser.g:4945:1: ( Colon )
            {
            // InternalIDSLParser.g:4945:1: ( Colon )
            // InternalIDSLParser.g:4946:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_2_1_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_2_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_1__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_1__2"
    // InternalIDSLParser.g:4955:1: rule__Text__Group_1_2_1_1__2 : rule__Text__Group_1_2_1_1__2__Impl ;
    public final void rule__Text__Group_1_2_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4959:1: ( rule__Text__Group_1_2_1_1__2__Impl )
            // InternalIDSLParser.g:4960:2: rule__Text__Group_1_2_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_1__2"


    // $ANTLR start "rule__Text__Group_1_2_1_1__2__Impl"
    // InternalIDSLParser.g:4966:1: rule__Text__Group_1_2_1_1__2__Impl : ( ( rule__Text__ColorAssignment_1_2_1_1_2 ) ) ;
    public final void rule__Text__Group_1_2_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4970:1: ( ( ( rule__Text__ColorAssignment_1_2_1_1_2 ) ) )
            // InternalIDSLParser.g:4971:1: ( ( rule__Text__ColorAssignment_1_2_1_1_2 ) )
            {
            // InternalIDSLParser.g:4971:1: ( ( rule__Text__ColorAssignment_1_2_1_1_2 ) )
            // InternalIDSLParser.g:4972:2: ( rule__Text__ColorAssignment_1_2_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColorAssignment_1_2_1_1_2()); 
            }
            // InternalIDSLParser.g:4973:2: ( rule__Text__ColorAssignment_1_2_1_1_2 )
            // InternalIDSLParser.g:4973:3: rule__Text__ColorAssignment_1_2_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__ColorAssignment_1_2_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColorAssignment_1_2_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_1__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_2__0"
    // InternalIDSLParser.g:4982:1: rule__Text__Group_1_2_1_2__0 : rule__Text__Group_1_2_1_2__0__Impl rule__Text__Group_1_2_1_2__1 ;
    public final void rule__Text__Group_1_2_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4986:1: ( rule__Text__Group_1_2_1_2__0__Impl rule__Text__Group_1_2_1_2__1 )
            // InternalIDSLParser.g:4987:2: rule__Text__Group_1_2_1_2__0__Impl rule__Text__Group_1_2_1_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1_2_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_2__0"


    // $ANTLR start "rule__Text__Group_1_2_1_2__0__Impl"
    // InternalIDSLParser.g:4994:1: rule__Text__Group_1_2_1_2__0__Impl : ( Font ) ;
    public final void rule__Text__Group_1_2_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:4998:1: ( ( Font ) )
            // InternalIDSLParser.g:4999:1: ( Font )
            {
            // InternalIDSLParser.g:4999:1: ( Font )
            // InternalIDSLParser.g:5000:2: Font
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getFontKeyword_1_2_1_2_0()); 
            }
            match(input,Font,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getFontKeyword_1_2_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_2__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_2__1"
    // InternalIDSLParser.g:5009:1: rule__Text__Group_1_2_1_2__1 : rule__Text__Group_1_2_1_2__1__Impl rule__Text__Group_1_2_1_2__2 ;
    public final void rule__Text__Group_1_2_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5013:1: ( rule__Text__Group_1_2_1_2__1__Impl rule__Text__Group_1_2_1_2__2 )
            // InternalIDSLParser.g:5014:2: rule__Text__Group_1_2_1_2__1__Impl rule__Text__Group_1_2_1_2__2
            {
            pushFollow(FOLLOW_16);
            rule__Text__Group_1_2_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_2__1"


    // $ANTLR start "rule__Text__Group_1_2_1_2__1__Impl"
    // InternalIDSLParser.g:5021:1: rule__Text__Group_1_2_1_2__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1_2_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5025:1: ( ( Colon ) )
            // InternalIDSLParser.g:5026:1: ( Colon )
            {
            // InternalIDSLParser.g:5026:1: ( Colon )
            // InternalIDSLParser.g:5027:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_2_1_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_2_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_2__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_2__2"
    // InternalIDSLParser.g:5036:1: rule__Text__Group_1_2_1_2__2 : rule__Text__Group_1_2_1_2__2__Impl ;
    public final void rule__Text__Group_1_2_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5040:1: ( rule__Text__Group_1_2_1_2__2__Impl )
            // InternalIDSLParser.g:5041:2: rule__Text__Group_1_2_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_2__2"


    // $ANTLR start "rule__Text__Group_1_2_1_2__2__Impl"
    // InternalIDSLParser.g:5047:1: rule__Text__Group_1_2_1_2__2__Impl : ( ( rule__Text__FontAssignment_1_2_1_2_2 ) ) ;
    public final void rule__Text__Group_1_2_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5051:1: ( ( ( rule__Text__FontAssignment_1_2_1_2_2 ) ) )
            // InternalIDSLParser.g:5052:1: ( ( rule__Text__FontAssignment_1_2_1_2_2 ) )
            {
            // InternalIDSLParser.g:5052:1: ( ( rule__Text__FontAssignment_1_2_1_2_2 ) )
            // InternalIDSLParser.g:5053:2: ( rule__Text__FontAssignment_1_2_1_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getFontAssignment_1_2_1_2_2()); 
            }
            // InternalIDSLParser.g:5054:2: ( rule__Text__FontAssignment_1_2_1_2_2 )
            // InternalIDSLParser.g:5054:3: rule__Text__FontAssignment_1_2_1_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__FontAssignment_1_2_1_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getFontAssignment_1_2_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_2__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_3__0"
    // InternalIDSLParser.g:5063:1: rule__Text__Group_1_2_1_3__0 : rule__Text__Group_1_2_1_3__0__Impl rule__Text__Group_1_2_1_3__1 ;
    public final void rule__Text__Group_1_2_1_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5067:1: ( rule__Text__Group_1_2_1_3__0__Impl rule__Text__Group_1_2_1_3__1 )
            // InternalIDSLParser.g:5068:2: rule__Text__Group_1_2_1_3__0__Impl rule__Text__Group_1_2_1_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1_2_1_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_3__0"


    // $ANTLR start "rule__Text__Group_1_2_1_3__0__Impl"
    // InternalIDSLParser.g:5075:1: rule__Text__Group_1_2_1_3__0__Impl : ( Position ) ;
    public final void rule__Text__Group_1_2_1_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5079:1: ( ( Position ) )
            // InternalIDSLParser.g:5080:1: ( Position )
            {
            // InternalIDSLParser.g:5080:1: ( Position )
            // InternalIDSLParser.g:5081:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getPositionKeyword_1_2_1_3_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getPositionKeyword_1_2_1_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_3__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_3__1"
    // InternalIDSLParser.g:5090:1: rule__Text__Group_1_2_1_3__1 : rule__Text__Group_1_2_1_3__1__Impl rule__Text__Group_1_2_1_3__2 ;
    public final void rule__Text__Group_1_2_1_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5094:1: ( rule__Text__Group_1_2_1_3__1__Impl rule__Text__Group_1_2_1_3__2 )
            // InternalIDSLParser.g:5095:2: rule__Text__Group_1_2_1_3__1__Impl rule__Text__Group_1_2_1_3__2
            {
            pushFollow(FOLLOW_8);
            rule__Text__Group_1_2_1_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_3__1"


    // $ANTLR start "rule__Text__Group_1_2_1_3__1__Impl"
    // InternalIDSLParser.g:5102:1: rule__Text__Group_1_2_1_3__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1_2_1_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5106:1: ( ( Colon ) )
            // InternalIDSLParser.g:5107:1: ( Colon )
            {
            // InternalIDSLParser.g:5107:1: ( Colon )
            // InternalIDSLParser.g:5108:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_2_1_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_2_1_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_3__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_3__2"
    // InternalIDSLParser.g:5117:1: rule__Text__Group_1_2_1_3__2 : rule__Text__Group_1_2_1_3__2__Impl ;
    public final void rule__Text__Group_1_2_1_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5121:1: ( rule__Text__Group_1_2_1_3__2__Impl )
            // InternalIDSLParser.g:5122:2: rule__Text__Group_1_2_1_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_3__2"


    // $ANTLR start "rule__Text__Group_1_2_1_3__2__Impl"
    // InternalIDSLParser.g:5128:1: rule__Text__Group_1_2_1_3__2__Impl : ( ( rule__Text__PositionAssignment_1_2_1_3_2 ) ) ;
    public final void rule__Text__Group_1_2_1_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5132:1: ( ( ( rule__Text__PositionAssignment_1_2_1_3_2 ) ) )
            // InternalIDSLParser.g:5133:1: ( ( rule__Text__PositionAssignment_1_2_1_3_2 ) )
            {
            // InternalIDSLParser.g:5133:1: ( ( rule__Text__PositionAssignment_1_2_1_3_2 ) )
            // InternalIDSLParser.g:5134:2: ( rule__Text__PositionAssignment_1_2_1_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getPositionAssignment_1_2_1_3_2()); 
            }
            // InternalIDSLParser.g:5135:2: ( rule__Text__PositionAssignment_1_2_1_3_2 )
            // InternalIDSLParser.g:5135:3: rule__Text__PositionAssignment_1_2_1_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__PositionAssignment_1_2_1_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getPositionAssignment_1_2_1_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_3__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_4__0"
    // InternalIDSLParser.g:5144:1: rule__Text__Group_1_2_1_4__0 : rule__Text__Group_1_2_1_4__0__Impl rule__Text__Group_1_2_1_4__1 ;
    public final void rule__Text__Group_1_2_1_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5148:1: ( rule__Text__Group_1_2_1_4__0__Impl rule__Text__Group_1_2_1_4__1 )
            // InternalIDSLParser.g:5149:2: rule__Text__Group_1_2_1_4__0__Impl rule__Text__Group_1_2_1_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1_2_1_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_4__0"


    // $ANTLR start "rule__Text__Group_1_2_1_4__0__Impl"
    // InternalIDSLParser.g:5156:1: rule__Text__Group_1_2_1_4__0__Impl : ( Maxwidth ) ;
    public final void rule__Text__Group_1_2_1_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5160:1: ( ( Maxwidth ) )
            // InternalIDSLParser.g:5161:1: ( Maxwidth )
            {
            // InternalIDSLParser.g:5161:1: ( Maxwidth )
            // InternalIDSLParser.g:5162:2: Maxwidth
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getMaxwidthKeyword_1_2_1_4_0()); 
            }
            match(input,Maxwidth,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getMaxwidthKeyword_1_2_1_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_4__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_4__1"
    // InternalIDSLParser.g:5171:1: rule__Text__Group_1_2_1_4__1 : rule__Text__Group_1_2_1_4__1__Impl rule__Text__Group_1_2_1_4__2 ;
    public final void rule__Text__Group_1_2_1_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5175:1: ( rule__Text__Group_1_2_1_4__1__Impl rule__Text__Group_1_2_1_4__2 )
            // InternalIDSLParser.g:5176:2: rule__Text__Group_1_2_1_4__1__Impl rule__Text__Group_1_2_1_4__2
            {
            pushFollow(FOLLOW_17);
            rule__Text__Group_1_2_1_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_4__1"


    // $ANTLR start "rule__Text__Group_1_2_1_4__1__Impl"
    // InternalIDSLParser.g:5183:1: rule__Text__Group_1_2_1_4__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1_2_1_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5187:1: ( ( Colon ) )
            // InternalIDSLParser.g:5188:1: ( Colon )
            {
            // InternalIDSLParser.g:5188:1: ( Colon )
            // InternalIDSLParser.g:5189:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_2_1_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_2_1_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_4__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_4__2"
    // InternalIDSLParser.g:5198:1: rule__Text__Group_1_2_1_4__2 : rule__Text__Group_1_2_1_4__2__Impl ;
    public final void rule__Text__Group_1_2_1_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5202:1: ( rule__Text__Group_1_2_1_4__2__Impl )
            // InternalIDSLParser.g:5203:2: rule__Text__Group_1_2_1_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_4__2"


    // $ANTLR start "rule__Text__Group_1_2_1_4__2__Impl"
    // InternalIDSLParser.g:5209:1: rule__Text__Group_1_2_1_4__2__Impl : ( ( rule__Text__MaxwidthAssignment_1_2_1_4_2 ) ) ;
    public final void rule__Text__Group_1_2_1_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5213:1: ( ( ( rule__Text__MaxwidthAssignment_1_2_1_4_2 ) ) )
            // InternalIDSLParser.g:5214:1: ( ( rule__Text__MaxwidthAssignment_1_2_1_4_2 ) )
            {
            // InternalIDSLParser.g:5214:1: ( ( rule__Text__MaxwidthAssignment_1_2_1_4_2 ) )
            // InternalIDSLParser.g:5215:2: ( rule__Text__MaxwidthAssignment_1_2_1_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getMaxwidthAssignment_1_2_1_4_2()); 
            }
            // InternalIDSLParser.g:5216:2: ( rule__Text__MaxwidthAssignment_1_2_1_4_2 )
            // InternalIDSLParser.g:5216:3: rule__Text__MaxwidthAssignment_1_2_1_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__MaxwidthAssignment_1_2_1_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getMaxwidthAssignment_1_2_1_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_4__2__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_5__0"
    // InternalIDSLParser.g:5225:1: rule__Text__Group_1_2_1_5__0 : rule__Text__Group_1_2_1_5__0__Impl rule__Text__Group_1_2_1_5__1 ;
    public final void rule__Text__Group_1_2_1_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5229:1: ( rule__Text__Group_1_2_1_5__0__Impl rule__Text__Group_1_2_1_5__1 )
            // InternalIDSLParser.g:5230:2: rule__Text__Group_1_2_1_5__0__Impl rule__Text__Group_1_2_1_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Text__Group_1_2_1_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_5__0"


    // $ANTLR start "rule__Text__Group_1_2_1_5__0__Impl"
    // InternalIDSLParser.g:5237:1: rule__Text__Group_1_2_1_5__0__Impl : ( Value ) ;
    public final void rule__Text__Group_1_2_1_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5241:1: ( ( Value ) )
            // InternalIDSLParser.g:5242:1: ( Value )
            {
            // InternalIDSLParser.g:5242:1: ( Value )
            // InternalIDSLParser.g:5243:2: Value
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getValueKeyword_1_2_1_5_0()); 
            }
            match(input,Value,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getValueKeyword_1_2_1_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_5__0__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_5__1"
    // InternalIDSLParser.g:5252:1: rule__Text__Group_1_2_1_5__1 : rule__Text__Group_1_2_1_5__1__Impl rule__Text__Group_1_2_1_5__2 ;
    public final void rule__Text__Group_1_2_1_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5256:1: ( rule__Text__Group_1_2_1_5__1__Impl rule__Text__Group_1_2_1_5__2 )
            // InternalIDSLParser.g:5257:2: rule__Text__Group_1_2_1_5__1__Impl rule__Text__Group_1_2_1_5__2
            {
            pushFollow(FOLLOW_7);
            rule__Text__Group_1_2_1_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_5__1"


    // $ANTLR start "rule__Text__Group_1_2_1_5__1__Impl"
    // InternalIDSLParser.g:5264:1: rule__Text__Group_1_2_1_5__1__Impl : ( Colon ) ;
    public final void rule__Text__Group_1_2_1_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5268:1: ( ( Colon ) )
            // InternalIDSLParser.g:5269:1: ( Colon )
            {
            // InternalIDSLParser.g:5269:1: ( Colon )
            // InternalIDSLParser.g:5270:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColonKeyword_1_2_1_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColonKeyword_1_2_1_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_5__1__Impl"


    // $ANTLR start "rule__Text__Group_1_2_1_5__2"
    // InternalIDSLParser.g:5279:1: rule__Text__Group_1_2_1_5__2 : rule__Text__Group_1_2_1_5__2__Impl ;
    public final void rule__Text__Group_1_2_1_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5283:1: ( rule__Text__Group_1_2_1_5__2__Impl )
            // InternalIDSLParser.g:5284:2: rule__Text__Group_1_2_1_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__Group_1_2_1_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_5__2"


    // $ANTLR start "rule__Text__Group_1_2_1_5__2__Impl"
    // InternalIDSLParser.g:5290:1: rule__Text__Group_1_2_1_5__2__Impl : ( ( rule__Text__ValueAssignment_1_2_1_5_2 ) ) ;
    public final void rule__Text__Group_1_2_1_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5294:1: ( ( ( rule__Text__ValueAssignment_1_2_1_5_2 ) ) )
            // InternalIDSLParser.g:5295:1: ( ( rule__Text__ValueAssignment_1_2_1_5_2 ) )
            {
            // InternalIDSLParser.g:5295:1: ( ( rule__Text__ValueAssignment_1_2_1_5_2 ) )
            // InternalIDSLParser.g:5296:2: ( rule__Text__ValueAssignment_1_2_1_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getValueAssignment_1_2_1_5_2()); 
            }
            // InternalIDSLParser.g:5297:2: ( rule__Text__ValueAssignment_1_2_1_5_2 )
            // InternalIDSLParser.g:5297:3: rule__Text__ValueAssignment_1_2_1_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Text__ValueAssignment_1_2_1_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getValueAssignment_1_2_1_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__Group_1_2_1_5__2__Impl"


    // $ANTLR start "rule__Image__Group__0"
    // InternalIDSLParser.g:5306:1: rule__Image__Group__0 : rule__Image__Group__0__Impl rule__Image__Group__1 ;
    public final void rule__Image__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5310:1: ( rule__Image__Group__0__Impl rule__Image__Group__1 )
            // InternalIDSLParser.g:5311:2: rule__Image__Group__0__Impl rule__Image__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Image__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__0"


    // $ANTLR start "rule__Image__Group__0__Impl"
    // InternalIDSLParser.g:5318:1: rule__Image__Group__0__Impl : ( ( rule__Image__NameAssignment_0 ) ) ;
    public final void rule__Image__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5322:1: ( ( ( rule__Image__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:5323:1: ( ( rule__Image__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:5323:1: ( ( rule__Image__NameAssignment_0 ) )
            // InternalIDSLParser.g:5324:2: ( rule__Image__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:5325:2: ( rule__Image__NameAssignment_0 )
            // InternalIDSLParser.g:5325:3: rule__Image__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Image__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__0__Impl"


    // $ANTLR start "rule__Image__Group__1"
    // InternalIDSLParser.g:5333:1: rule__Image__Group__1 : rule__Image__Group__1__Impl rule__Image__Group__2 ;
    public final void rule__Image__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5337:1: ( rule__Image__Group__1__Impl rule__Image__Group__2 )
            // InternalIDSLParser.g:5338:2: rule__Image__Group__1__Impl rule__Image__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__Image__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__1"


    // $ANTLR start "rule__Image__Group__1__Impl"
    // InternalIDSLParser.g:5345:1: rule__Image__Group__1__Impl : ( Colon ) ;
    public final void rule__Image__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5349:1: ( ( Colon ) )
            // InternalIDSLParser.g:5350:1: ( Colon )
            {
            // InternalIDSLParser.g:5350:1: ( Colon )
            // InternalIDSLParser.g:5351:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__1__Impl"


    // $ANTLR start "rule__Image__Group__2"
    // InternalIDSLParser.g:5360:1: rule__Image__Group__2 : rule__Image__Group__2__Impl rule__Image__Group__3 ;
    public final void rule__Image__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5364:1: ( rule__Image__Group__2__Impl rule__Image__Group__3 )
            // InternalIDSLParser.g:5365:2: rule__Image__Group__2__Impl rule__Image__Group__3
            {
            pushFollow(FOLLOW_21);
            rule__Image__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__2"


    // $ANTLR start "rule__Image__Group__2__Impl"
    // InternalIDSLParser.g:5372:1: rule__Image__Group__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Image__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5376:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:5377:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:5377:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:5378:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getBEGINTerminalRuleCall_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getBEGINTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__2__Impl"


    // $ANTLR start "rule__Image__Group__3"
    // InternalIDSLParser.g:5387:1: rule__Image__Group__3 : rule__Image__Group__3__Impl rule__Image__Group__4 ;
    public final void rule__Image__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5391:1: ( rule__Image__Group__3__Impl rule__Image__Group__4 )
            // InternalIDSLParser.g:5392:2: rule__Image__Group__3__Impl rule__Image__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__Image__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__3"


    // $ANTLR start "rule__Image__Group__3__Impl"
    // InternalIDSLParser.g:5399:1: rule__Image__Group__3__Impl : ( ( rule__Image__UnorderedGroup_3 ) ) ;
    public final void rule__Image__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5403:1: ( ( ( rule__Image__UnorderedGroup_3 ) ) )
            // InternalIDSLParser.g:5404:1: ( ( rule__Image__UnorderedGroup_3 ) )
            {
            // InternalIDSLParser.g:5404:1: ( ( rule__Image__UnorderedGroup_3 ) )
            // InternalIDSLParser.g:5405:2: ( rule__Image__UnorderedGroup_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getUnorderedGroup_3()); 
            }
            // InternalIDSLParser.g:5406:2: ( rule__Image__UnorderedGroup_3 )
            // InternalIDSLParser.g:5406:3: rule__Image__UnorderedGroup_3
            {
            pushFollow(FOLLOW_2);
            rule__Image__UnorderedGroup_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getUnorderedGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__3__Impl"


    // $ANTLR start "rule__Image__Group__4"
    // InternalIDSLParser.g:5414:1: rule__Image__Group__4 : rule__Image__Group__4__Impl ;
    public final void rule__Image__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5418:1: ( rule__Image__Group__4__Impl )
            // InternalIDSLParser.g:5419:2: rule__Image__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Image__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__4"


    // $ANTLR start "rule__Image__Group__4__Impl"
    // InternalIDSLParser.g:5425:1: rule__Image__Group__4__Impl : ( RULE_END ) ;
    public final void rule__Image__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5429:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:5430:1: ( RULE_END )
            {
            // InternalIDSLParser.g:5430:1: ( RULE_END )
            // InternalIDSLParser.g:5431:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getENDTerminalRuleCall_4()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getENDTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group__4__Impl"


    // $ANTLR start "rule__Image__Group_3_0__0"
    // InternalIDSLParser.g:5441:1: rule__Image__Group_3_0__0 : rule__Image__Group_3_0__0__Impl rule__Image__Group_3_0__1 ;
    public final void rule__Image__Group_3_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5445:1: ( rule__Image__Group_3_0__0__Impl rule__Image__Group_3_0__1 )
            // InternalIDSLParser.g:5446:2: rule__Image__Group_3_0__0__Impl rule__Image__Group_3_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Image__Group_3_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_0__0"


    // $ANTLR start "rule__Image__Group_3_0__0__Impl"
    // InternalIDSLParser.g:5453:1: rule__Image__Group_3_0__0__Impl : ( Position ) ;
    public final void rule__Image__Group_3_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5457:1: ( ( Position ) )
            // InternalIDSLParser.g:5458:1: ( Position )
            {
            // InternalIDSLParser.g:5458:1: ( Position )
            // InternalIDSLParser.g:5459:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getPositionKeyword_3_0_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getPositionKeyword_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_0__0__Impl"


    // $ANTLR start "rule__Image__Group_3_0__1"
    // InternalIDSLParser.g:5468:1: rule__Image__Group_3_0__1 : rule__Image__Group_3_0__1__Impl rule__Image__Group_3_0__2 ;
    public final void rule__Image__Group_3_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5472:1: ( rule__Image__Group_3_0__1__Impl rule__Image__Group_3_0__2 )
            // InternalIDSLParser.g:5473:2: rule__Image__Group_3_0__1__Impl rule__Image__Group_3_0__2
            {
            pushFollow(FOLLOW_8);
            rule__Image__Group_3_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_0__1"


    // $ANTLR start "rule__Image__Group_3_0__1__Impl"
    // InternalIDSLParser.g:5480:1: rule__Image__Group_3_0__1__Impl : ( Colon ) ;
    public final void rule__Image__Group_3_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5484:1: ( ( Colon ) )
            // InternalIDSLParser.g:5485:1: ( Colon )
            {
            // InternalIDSLParser.g:5485:1: ( Colon )
            // InternalIDSLParser.g:5486:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getColonKeyword_3_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getColonKeyword_3_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_0__1__Impl"


    // $ANTLR start "rule__Image__Group_3_0__2"
    // InternalIDSLParser.g:5495:1: rule__Image__Group_3_0__2 : rule__Image__Group_3_0__2__Impl ;
    public final void rule__Image__Group_3_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5499:1: ( rule__Image__Group_3_0__2__Impl )
            // InternalIDSLParser.g:5500:2: rule__Image__Group_3_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_0__2"


    // $ANTLR start "rule__Image__Group_3_0__2__Impl"
    // InternalIDSLParser.g:5506:1: rule__Image__Group_3_0__2__Impl : ( ( rule__Image__PositionAssignment_3_0_2 ) ) ;
    public final void rule__Image__Group_3_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5510:1: ( ( ( rule__Image__PositionAssignment_3_0_2 ) ) )
            // InternalIDSLParser.g:5511:1: ( ( rule__Image__PositionAssignment_3_0_2 ) )
            {
            // InternalIDSLParser.g:5511:1: ( ( rule__Image__PositionAssignment_3_0_2 ) )
            // InternalIDSLParser.g:5512:2: ( rule__Image__PositionAssignment_3_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getPositionAssignment_3_0_2()); 
            }
            // InternalIDSLParser.g:5513:2: ( rule__Image__PositionAssignment_3_0_2 )
            // InternalIDSLParser.g:5513:3: rule__Image__PositionAssignment_3_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Image__PositionAssignment_3_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getPositionAssignment_3_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_0__2__Impl"


    // $ANTLR start "rule__Image__Group_3_1__0"
    // InternalIDSLParser.g:5522:1: rule__Image__Group_3_1__0 : rule__Image__Group_3_1__0__Impl rule__Image__Group_3_1__1 ;
    public final void rule__Image__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5526:1: ( rule__Image__Group_3_1__0__Impl rule__Image__Group_3_1__1 )
            // InternalIDSLParser.g:5527:2: rule__Image__Group_3_1__0__Impl rule__Image__Group_3_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Image__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_1__0"


    // $ANTLR start "rule__Image__Group_3_1__0__Impl"
    // InternalIDSLParser.g:5534:1: rule__Image__Group_3_1__0__Impl : ( Size ) ;
    public final void rule__Image__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5538:1: ( ( Size ) )
            // InternalIDSLParser.g:5539:1: ( Size )
            {
            // InternalIDSLParser.g:5539:1: ( Size )
            // InternalIDSLParser.g:5540:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getSizeKeyword_3_1_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getSizeKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_1__0__Impl"


    // $ANTLR start "rule__Image__Group_3_1__1"
    // InternalIDSLParser.g:5549:1: rule__Image__Group_3_1__1 : rule__Image__Group_3_1__1__Impl rule__Image__Group_3_1__2 ;
    public final void rule__Image__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5553:1: ( rule__Image__Group_3_1__1__Impl rule__Image__Group_3_1__2 )
            // InternalIDSLParser.g:5554:2: rule__Image__Group_3_1__1__Impl rule__Image__Group_3_1__2
            {
            pushFollow(FOLLOW_8);
            rule__Image__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_1__1"


    // $ANTLR start "rule__Image__Group_3_1__1__Impl"
    // InternalIDSLParser.g:5561:1: rule__Image__Group_3_1__1__Impl : ( Colon ) ;
    public final void rule__Image__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5565:1: ( ( Colon ) )
            // InternalIDSLParser.g:5566:1: ( Colon )
            {
            // InternalIDSLParser.g:5566:1: ( Colon )
            // InternalIDSLParser.g:5567:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getColonKeyword_3_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getColonKeyword_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_1__1__Impl"


    // $ANTLR start "rule__Image__Group_3_1__2"
    // InternalIDSLParser.g:5576:1: rule__Image__Group_3_1__2 : rule__Image__Group_3_1__2__Impl ;
    public final void rule__Image__Group_3_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5580:1: ( rule__Image__Group_3_1__2__Impl )
            // InternalIDSLParser.g:5581:2: rule__Image__Group_3_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_1__2"


    // $ANTLR start "rule__Image__Group_3_1__2__Impl"
    // InternalIDSLParser.g:5587:1: rule__Image__Group_3_1__2__Impl : ( ( rule__Image__SizeAssignment_3_1_2 ) ) ;
    public final void rule__Image__Group_3_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5591:1: ( ( ( rule__Image__SizeAssignment_3_1_2 ) ) )
            // InternalIDSLParser.g:5592:1: ( ( rule__Image__SizeAssignment_3_1_2 ) )
            {
            // InternalIDSLParser.g:5592:1: ( ( rule__Image__SizeAssignment_3_1_2 ) )
            // InternalIDSLParser.g:5593:2: ( rule__Image__SizeAssignment_3_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getSizeAssignment_3_1_2()); 
            }
            // InternalIDSLParser.g:5594:2: ( rule__Image__SizeAssignment_3_1_2 )
            // InternalIDSLParser.g:5594:3: rule__Image__SizeAssignment_3_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Image__SizeAssignment_3_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getSizeAssignment_3_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_1__2__Impl"


    // $ANTLR start "rule__Image__Group_3_2__0"
    // InternalIDSLParser.g:5603:1: rule__Image__Group_3_2__0 : rule__Image__Group_3_2__0__Impl rule__Image__Group_3_2__1 ;
    public final void rule__Image__Group_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5607:1: ( rule__Image__Group_3_2__0__Impl rule__Image__Group_3_2__1 )
            // InternalIDSLParser.g:5608:2: rule__Image__Group_3_2__0__Impl rule__Image__Group_3_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Image__Group_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_2__0"


    // $ANTLR start "rule__Image__Group_3_2__0__Impl"
    // InternalIDSLParser.g:5615:1: rule__Image__Group_3_2__0__Impl : ( Src ) ;
    public final void rule__Image__Group_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5619:1: ( ( Src ) )
            // InternalIDSLParser.g:5620:1: ( Src )
            {
            // InternalIDSLParser.g:5620:1: ( Src )
            // InternalIDSLParser.g:5621:2: Src
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getSrcKeyword_3_2_0()); 
            }
            match(input,Src,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getSrcKeyword_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_2__0__Impl"


    // $ANTLR start "rule__Image__Group_3_2__1"
    // InternalIDSLParser.g:5630:1: rule__Image__Group_3_2__1 : rule__Image__Group_3_2__1__Impl rule__Image__Group_3_2__2 ;
    public final void rule__Image__Group_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5634:1: ( rule__Image__Group_3_2__1__Impl rule__Image__Group_3_2__2 )
            // InternalIDSLParser.g:5635:2: rule__Image__Group_3_2__1__Impl rule__Image__Group_3_2__2
            {
            pushFollow(FOLLOW_7);
            rule__Image__Group_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_2__1"


    // $ANTLR start "rule__Image__Group_3_2__1__Impl"
    // InternalIDSLParser.g:5642:1: rule__Image__Group_3_2__1__Impl : ( Colon ) ;
    public final void rule__Image__Group_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5646:1: ( ( Colon ) )
            // InternalIDSLParser.g:5647:1: ( Colon )
            {
            // InternalIDSLParser.g:5647:1: ( Colon )
            // InternalIDSLParser.g:5648:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getColonKeyword_3_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getColonKeyword_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_2__1__Impl"


    // $ANTLR start "rule__Image__Group_3_2__2"
    // InternalIDSLParser.g:5657:1: rule__Image__Group_3_2__2 : rule__Image__Group_3_2__2__Impl ;
    public final void rule__Image__Group_3_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5661:1: ( rule__Image__Group_3_2__2__Impl )
            // InternalIDSLParser.g:5662:2: rule__Image__Group_3_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Image__Group_3_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_2__2"


    // $ANTLR start "rule__Image__Group_3_2__2__Impl"
    // InternalIDSLParser.g:5668:1: rule__Image__Group_3_2__2__Impl : ( ( rule__Image__SrcAssignment_3_2_2 ) ) ;
    public final void rule__Image__Group_3_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5672:1: ( ( ( rule__Image__SrcAssignment_3_2_2 ) ) )
            // InternalIDSLParser.g:5673:1: ( ( rule__Image__SrcAssignment_3_2_2 ) )
            {
            // InternalIDSLParser.g:5673:1: ( ( rule__Image__SrcAssignment_3_2_2 ) )
            // InternalIDSLParser.g:5674:2: ( rule__Image__SrcAssignment_3_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getSrcAssignment_3_2_2()); 
            }
            // InternalIDSLParser.g:5675:2: ( rule__Image__SrcAssignment_3_2_2 )
            // InternalIDSLParser.g:5675:3: rule__Image__SrcAssignment_3_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Image__SrcAssignment_3_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getSrcAssignment_3_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__Group_3_2__2__Impl"


    // $ANTLR start "rule__Piechart__Group__0"
    // InternalIDSLParser.g:5684:1: rule__Piechart__Group__0 : rule__Piechart__Group__0__Impl rule__Piechart__Group__1 ;
    public final void rule__Piechart__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5688:1: ( rule__Piechart__Group__0__Impl rule__Piechart__Group__1 )
            // InternalIDSLParser.g:5689:2: rule__Piechart__Group__0__Impl rule__Piechart__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__0"


    // $ANTLR start "rule__Piechart__Group__0__Impl"
    // InternalIDSLParser.g:5696:1: rule__Piechart__Group__0__Impl : ( ( rule__Piechart__NameAssignment_0 ) ) ;
    public final void rule__Piechart__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5700:1: ( ( ( rule__Piechart__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:5701:1: ( ( rule__Piechart__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:5701:1: ( ( rule__Piechart__NameAssignment_0 ) )
            // InternalIDSLParser.g:5702:2: ( rule__Piechart__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:5703:2: ( rule__Piechart__NameAssignment_0 )
            // InternalIDSLParser.g:5703:3: rule__Piechart__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__0__Impl"


    // $ANTLR start "rule__Piechart__Group__1"
    // InternalIDSLParser.g:5711:1: rule__Piechart__Group__1 : rule__Piechart__Group__1__Impl rule__Piechart__Group__2 ;
    public final void rule__Piechart__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5715:1: ( rule__Piechart__Group__1__Impl rule__Piechart__Group__2 )
            // InternalIDSLParser.g:5716:2: rule__Piechart__Group__1__Impl rule__Piechart__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__Piechart__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__1"


    // $ANTLR start "rule__Piechart__Group__1__Impl"
    // InternalIDSLParser.g:5723:1: rule__Piechart__Group__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5727:1: ( ( Colon ) )
            // InternalIDSLParser.g:5728:1: ( Colon )
            {
            // InternalIDSLParser.g:5728:1: ( Colon )
            // InternalIDSLParser.g:5729:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__1__Impl"


    // $ANTLR start "rule__Piechart__Group__2"
    // InternalIDSLParser.g:5738:1: rule__Piechart__Group__2 : rule__Piechart__Group__2__Impl rule__Piechart__Group__3 ;
    public final void rule__Piechart__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5742:1: ( rule__Piechart__Group__2__Impl rule__Piechart__Group__3 )
            // InternalIDSLParser.g:5743:2: rule__Piechart__Group__2__Impl rule__Piechart__Group__3
            {
            pushFollow(FOLLOW_22);
            rule__Piechart__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__2"


    // $ANTLR start "rule__Piechart__Group__2__Impl"
    // InternalIDSLParser.g:5750:1: rule__Piechart__Group__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Piechart__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5754:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:5755:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:5755:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:5756:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getBEGINTerminalRuleCall_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getBEGINTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__2__Impl"


    // $ANTLR start "rule__Piechart__Group__3"
    // InternalIDSLParser.g:5765:1: rule__Piechart__Group__3 : rule__Piechart__Group__3__Impl rule__Piechart__Group__4 ;
    public final void rule__Piechart__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5769:1: ( rule__Piechart__Group__3__Impl rule__Piechart__Group__4 )
            // InternalIDSLParser.g:5770:2: rule__Piechart__Group__3__Impl rule__Piechart__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__Piechart__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__3"


    // $ANTLR start "rule__Piechart__Group__3__Impl"
    // InternalIDSLParser.g:5777:1: rule__Piechart__Group__3__Impl : ( ( rule__Piechart__UnorderedGroup_3 ) ) ;
    public final void rule__Piechart__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5781:1: ( ( ( rule__Piechart__UnorderedGroup_3 ) ) )
            // InternalIDSLParser.g:5782:1: ( ( rule__Piechart__UnorderedGroup_3 ) )
            {
            // InternalIDSLParser.g:5782:1: ( ( rule__Piechart__UnorderedGroup_3 ) )
            // InternalIDSLParser.g:5783:2: ( rule__Piechart__UnorderedGroup_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getUnorderedGroup_3()); 
            }
            // InternalIDSLParser.g:5784:2: ( rule__Piechart__UnorderedGroup_3 )
            // InternalIDSLParser.g:5784:3: rule__Piechart__UnorderedGroup_3
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__UnorderedGroup_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getUnorderedGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__3__Impl"


    // $ANTLR start "rule__Piechart__Group__4"
    // InternalIDSLParser.g:5792:1: rule__Piechart__Group__4 : rule__Piechart__Group__4__Impl ;
    public final void rule__Piechart__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5796:1: ( rule__Piechart__Group__4__Impl )
            // InternalIDSLParser.g:5797:2: rule__Piechart__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__4"


    // $ANTLR start "rule__Piechart__Group__4__Impl"
    // InternalIDSLParser.g:5803:1: rule__Piechart__Group__4__Impl : ( RULE_END ) ;
    public final void rule__Piechart__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5807:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:5808:1: ( RULE_END )
            {
            // InternalIDSLParser.g:5808:1: ( RULE_END )
            // InternalIDSLParser.g:5809:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getENDTerminalRuleCall_4()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getENDTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group__4__Impl"


    // $ANTLR start "rule__Piechart__Group_3_0__0"
    // InternalIDSLParser.g:5819:1: rule__Piechart__Group_3_0__0 : rule__Piechart__Group_3_0__0__Impl rule__Piechart__Group_3_0__1 ;
    public final void rule__Piechart__Group_3_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5823:1: ( rule__Piechart__Group_3_0__0__Impl rule__Piechart__Group_3_0__1 )
            // InternalIDSLParser.g:5824:2: rule__Piechart__Group_3_0__0__Impl rule__Piechart__Group_3_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_0__0"


    // $ANTLR start "rule__Piechart__Group_3_0__0__Impl"
    // InternalIDSLParser.g:5831:1: rule__Piechart__Group_3_0__0__Impl : ( Bgcolor ) ;
    public final void rule__Piechart__Group_3_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5835:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:5836:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:5836:1: ( Bgcolor )
            // InternalIDSLParser.g:5837:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getBgcolorKeyword_3_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getBgcolorKeyword_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_0__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_0__1"
    // InternalIDSLParser.g:5846:1: rule__Piechart__Group_3_0__1 : rule__Piechart__Group_3_0__1__Impl rule__Piechart__Group_3_0__2 ;
    public final void rule__Piechart__Group_3_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5850:1: ( rule__Piechart__Group_3_0__1__Impl rule__Piechart__Group_3_0__2 )
            // InternalIDSLParser.g:5851:2: rule__Piechart__Group_3_0__1__Impl rule__Piechart__Group_3_0__2
            {
            pushFollow(FOLLOW_5);
            rule__Piechart__Group_3_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_0__1"


    // $ANTLR start "rule__Piechart__Group_3_0__1__Impl"
    // InternalIDSLParser.g:5858:1: rule__Piechart__Group_3_0__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5862:1: ( ( Colon ) )
            // InternalIDSLParser.g:5863:1: ( Colon )
            {
            // InternalIDSLParser.g:5863:1: ( Colon )
            // InternalIDSLParser.g:5864:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_0__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_0__2"
    // InternalIDSLParser.g:5873:1: rule__Piechart__Group_3_0__2 : rule__Piechart__Group_3_0__2__Impl ;
    public final void rule__Piechart__Group_3_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5877:1: ( rule__Piechart__Group_3_0__2__Impl )
            // InternalIDSLParser.g:5878:2: rule__Piechart__Group_3_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_0__2"


    // $ANTLR start "rule__Piechart__Group_3_0__2__Impl"
    // InternalIDSLParser.g:5884:1: rule__Piechart__Group_3_0__2__Impl : ( ( rule__Piechart__ColorAssignment_3_0_2 ) ) ;
    public final void rule__Piechart__Group_3_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5888:1: ( ( ( rule__Piechart__ColorAssignment_3_0_2 ) ) )
            // InternalIDSLParser.g:5889:1: ( ( rule__Piechart__ColorAssignment_3_0_2 ) )
            {
            // InternalIDSLParser.g:5889:1: ( ( rule__Piechart__ColorAssignment_3_0_2 ) )
            // InternalIDSLParser.g:5890:2: ( rule__Piechart__ColorAssignment_3_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColorAssignment_3_0_2()); 
            }
            // InternalIDSLParser.g:5891:2: ( rule__Piechart__ColorAssignment_3_0_2 )
            // InternalIDSLParser.g:5891:3: rule__Piechart__ColorAssignment_3_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__ColorAssignment_3_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColorAssignment_3_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_0__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_1__0"
    // InternalIDSLParser.g:5900:1: rule__Piechart__Group_3_1__0 : rule__Piechart__Group_3_1__0__Impl rule__Piechart__Group_3_1__1 ;
    public final void rule__Piechart__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5904:1: ( rule__Piechart__Group_3_1__0__Impl rule__Piechart__Group_3_1__1 )
            // InternalIDSLParser.g:5905:2: rule__Piechart__Group_3_1__0__Impl rule__Piechart__Group_3_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_1__0"


    // $ANTLR start "rule__Piechart__Group_3_1__0__Impl"
    // InternalIDSLParser.g:5912:1: rule__Piechart__Group_3_1__0__Impl : ( Colors ) ;
    public final void rule__Piechart__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5916:1: ( ( Colors ) )
            // InternalIDSLParser.g:5917:1: ( Colors )
            {
            // InternalIDSLParser.g:5917:1: ( Colors )
            // InternalIDSLParser.g:5918:2: Colors
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColorsKeyword_3_1_0()); 
            }
            match(input,Colors,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColorsKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_1__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_1__1"
    // InternalIDSLParser.g:5927:1: rule__Piechart__Group_3_1__1 : rule__Piechart__Group_3_1__1__Impl rule__Piechart__Group_3_1__2 ;
    public final void rule__Piechart__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5931:1: ( rule__Piechart__Group_3_1__1__Impl rule__Piechart__Group_3_1__2 )
            // InternalIDSLParser.g:5932:2: rule__Piechart__Group_3_1__1__Impl rule__Piechart__Group_3_1__2
            {
            pushFollow(FOLLOW_23);
            rule__Piechart__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_1__1"


    // $ANTLR start "rule__Piechart__Group_3_1__1__Impl"
    // InternalIDSLParser.g:5939:1: rule__Piechart__Group_3_1__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5943:1: ( ( Colon ) )
            // InternalIDSLParser.g:5944:1: ( Colon )
            {
            // InternalIDSLParser.g:5944:1: ( Colon )
            // InternalIDSLParser.g:5945:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_1__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_1__2"
    // InternalIDSLParser.g:5954:1: rule__Piechart__Group_3_1__2 : rule__Piechart__Group_3_1__2__Impl ;
    public final void rule__Piechart__Group_3_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5958:1: ( rule__Piechart__Group_3_1__2__Impl )
            // InternalIDSLParser.g:5959:2: rule__Piechart__Group_3_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_1__2"


    // $ANTLR start "rule__Piechart__Group_3_1__2__Impl"
    // InternalIDSLParser.g:5965:1: rule__Piechart__Group_3_1__2__Impl : ( ( rule__Piechart__ColorsAssignment_3_1_2 ) ) ;
    public final void rule__Piechart__Group_3_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5969:1: ( ( ( rule__Piechart__ColorsAssignment_3_1_2 ) ) )
            // InternalIDSLParser.g:5970:1: ( ( rule__Piechart__ColorsAssignment_3_1_2 ) )
            {
            // InternalIDSLParser.g:5970:1: ( ( rule__Piechart__ColorsAssignment_3_1_2 ) )
            // InternalIDSLParser.g:5971:2: ( rule__Piechart__ColorsAssignment_3_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColorsAssignment_3_1_2()); 
            }
            // InternalIDSLParser.g:5972:2: ( rule__Piechart__ColorsAssignment_3_1_2 )
            // InternalIDSLParser.g:5972:3: rule__Piechart__ColorsAssignment_3_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__ColorsAssignment_3_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColorsAssignment_3_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_1__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_2__0"
    // InternalIDSLParser.g:5981:1: rule__Piechart__Group_3_2__0 : rule__Piechart__Group_3_2__0__Impl rule__Piechart__Group_3_2__1 ;
    public final void rule__Piechart__Group_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5985:1: ( rule__Piechart__Group_3_2__0__Impl rule__Piechart__Group_3_2__1 )
            // InternalIDSLParser.g:5986:2: rule__Piechart__Group_3_2__0__Impl rule__Piechart__Group_3_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__0"


    // $ANTLR start "rule__Piechart__Group_3_2__0__Impl"
    // InternalIDSLParser.g:5993:1: rule__Piechart__Group_3_2__0__Impl : ( Data ) ;
    public final void rule__Piechart__Group_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:5997:1: ( ( Data ) )
            // InternalIDSLParser.g:5998:1: ( Data )
            {
            // InternalIDSLParser.g:5998:1: ( Data )
            // InternalIDSLParser.g:5999:2: Data
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getDataKeyword_3_2_0()); 
            }
            match(input,Data,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getDataKeyword_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_2__1"
    // InternalIDSLParser.g:6008:1: rule__Piechart__Group_3_2__1 : rule__Piechart__Group_3_2__1__Impl rule__Piechart__Group_3_2__2 ;
    public final void rule__Piechart__Group_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6012:1: ( rule__Piechart__Group_3_2__1__Impl rule__Piechart__Group_3_2__2 )
            // InternalIDSLParser.g:6013:2: rule__Piechart__Group_3_2__1__Impl rule__Piechart__Group_3_2__2
            {
            pushFollow(FOLLOW_12);
            rule__Piechart__Group_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__1"


    // $ANTLR start "rule__Piechart__Group_3_2__1__Impl"
    // InternalIDSLParser.g:6020:1: rule__Piechart__Group_3_2__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6024:1: ( ( Colon ) )
            // InternalIDSLParser.g:6025:1: ( Colon )
            {
            // InternalIDSLParser.g:6025:1: ( Colon )
            // InternalIDSLParser.g:6026:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_2__2"
    // InternalIDSLParser.g:6035:1: rule__Piechart__Group_3_2__2 : rule__Piechart__Group_3_2__2__Impl rule__Piechart__Group_3_2__3 ;
    public final void rule__Piechart__Group_3_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6039:1: ( rule__Piechart__Group_3_2__2__Impl rule__Piechart__Group_3_2__3 )
            // InternalIDSLParser.g:6040:2: rule__Piechart__Group_3_2__2__Impl rule__Piechart__Group_3_2__3
            {
            pushFollow(FOLLOW_7);
            rule__Piechart__Group_3_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__2"


    // $ANTLR start "rule__Piechart__Group_3_2__2__Impl"
    // InternalIDSLParser.g:6047:1: rule__Piechart__Group_3_2__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Piechart__Group_3_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6051:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:6052:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:6052:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:6053:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getBEGINTerminalRuleCall_3_2_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getBEGINTerminalRuleCall_3_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_2__3"
    // InternalIDSLParser.g:6062:1: rule__Piechart__Group_3_2__3 : rule__Piechart__Group_3_2__3__Impl rule__Piechart__Group_3_2__4 ;
    public final void rule__Piechart__Group_3_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6066:1: ( rule__Piechart__Group_3_2__3__Impl rule__Piechart__Group_3_2__4 )
            // InternalIDSLParser.g:6067:2: rule__Piechart__Group_3_2__3__Impl rule__Piechart__Group_3_2__4
            {
            pushFollow(FOLLOW_24);
            rule__Piechart__Group_3_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__3"


    // $ANTLR start "rule__Piechart__Group_3_2__3__Impl"
    // InternalIDSLParser.g:6074:1: rule__Piechart__Group_3_2__3__Impl : ( ruleChartData ) ;
    public final void rule__Piechart__Group_3_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6078:1: ( ( ruleChartData ) )
            // InternalIDSLParser.g:6079:1: ( ruleChartData )
            {
            // InternalIDSLParser.g:6079:1: ( ruleChartData )
            // InternalIDSLParser.g:6080:2: ruleChartData
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getChartDataParserRuleCall_3_2_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getChartDataParserRuleCall_3_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__3__Impl"


    // $ANTLR start "rule__Piechart__Group_3_2__4"
    // InternalIDSLParser.g:6089:1: rule__Piechart__Group_3_2__4 : rule__Piechart__Group_3_2__4__Impl rule__Piechart__Group_3_2__5 ;
    public final void rule__Piechart__Group_3_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6093:1: ( rule__Piechart__Group_3_2__4__Impl rule__Piechart__Group_3_2__5 )
            // InternalIDSLParser.g:6094:2: rule__Piechart__Group_3_2__4__Impl rule__Piechart__Group_3_2__5
            {
            pushFollow(FOLLOW_24);
            rule__Piechart__Group_3_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__4"


    // $ANTLR start "rule__Piechart__Group_3_2__4__Impl"
    // InternalIDSLParser.g:6101:1: rule__Piechart__Group_3_2__4__Impl : ( ( rule__Piechart__PiedataAssignment_3_2_4 )* ) ;
    public final void rule__Piechart__Group_3_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6105:1: ( ( ( rule__Piechart__PiedataAssignment_3_2_4 )* ) )
            // InternalIDSLParser.g:6106:1: ( ( rule__Piechart__PiedataAssignment_3_2_4 )* )
            {
            // InternalIDSLParser.g:6106:1: ( ( rule__Piechart__PiedataAssignment_3_2_4 )* )
            // InternalIDSLParser.g:6107:2: ( rule__Piechart__PiedataAssignment_3_2_4 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPiedataAssignment_3_2_4()); 
            }
            // InternalIDSLParser.g:6108:2: ( rule__Piechart__PiedataAssignment_3_2_4 )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==RULE_STRING) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // InternalIDSLParser.g:6108:3: rule__Piechart__PiedataAssignment_3_2_4
            	    {
            	    pushFollow(FOLLOW_25);
            	    rule__Piechart__PiedataAssignment_3_2_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPiedataAssignment_3_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__4__Impl"


    // $ANTLR start "rule__Piechart__Group_3_2__5"
    // InternalIDSLParser.g:6116:1: rule__Piechart__Group_3_2__5 : rule__Piechart__Group_3_2__5__Impl ;
    public final void rule__Piechart__Group_3_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6120:1: ( rule__Piechart__Group_3_2__5__Impl )
            // InternalIDSLParser.g:6121:2: rule__Piechart__Group_3_2__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__5"


    // $ANTLR start "rule__Piechart__Group_3_2__5__Impl"
    // InternalIDSLParser.g:6127:1: rule__Piechart__Group_3_2__5__Impl : ( RULE_END ) ;
    public final void rule__Piechart__Group_3_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6131:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:6132:1: ( RULE_END )
            {
            // InternalIDSLParser.g:6132:1: ( RULE_END )
            // InternalIDSLParser.g:6133:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getENDTerminalRuleCall_3_2_5()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getENDTerminalRuleCall_3_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_2__5__Impl"


    // $ANTLR start "rule__Piechart__Group_3_3__0"
    // InternalIDSLParser.g:6143:1: rule__Piechart__Group_3_3__0 : rule__Piechart__Group_3_3__0__Impl rule__Piechart__Group_3_3__1 ;
    public final void rule__Piechart__Group_3_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6147:1: ( rule__Piechart__Group_3_3__0__Impl rule__Piechart__Group_3_3__1 )
            // InternalIDSLParser.g:6148:2: rule__Piechart__Group_3_3__0__Impl rule__Piechart__Group_3_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_3__0"


    // $ANTLR start "rule__Piechart__Group_3_3__0__Impl"
    // InternalIDSLParser.g:6155:1: rule__Piechart__Group_3_3__0__Impl : ( Legendstyle ) ;
    public final void rule__Piechart__Group_3_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6159:1: ( ( Legendstyle ) )
            // InternalIDSLParser.g:6160:1: ( Legendstyle )
            {
            // InternalIDSLParser.g:6160:1: ( Legendstyle )
            // InternalIDSLParser.g:6161:2: Legendstyle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getLegendstyleKeyword_3_3_0()); 
            }
            match(input,Legendstyle,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getLegendstyleKeyword_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_3__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_3__1"
    // InternalIDSLParser.g:6170:1: rule__Piechart__Group_3_3__1 : rule__Piechart__Group_3_3__1__Impl rule__Piechart__Group_3_3__2 ;
    public final void rule__Piechart__Group_3_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6174:1: ( rule__Piechart__Group_3_3__1__Impl rule__Piechart__Group_3_3__2 )
            // InternalIDSLParser.g:6175:2: rule__Piechart__Group_3_3__1__Impl rule__Piechart__Group_3_3__2
            {
            pushFollow(FOLLOW_26);
            rule__Piechart__Group_3_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_3__1"


    // $ANTLR start "rule__Piechart__Group_3_3__1__Impl"
    // InternalIDSLParser.g:6182:1: rule__Piechart__Group_3_3__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6186:1: ( ( Colon ) )
            // InternalIDSLParser.g:6187:1: ( Colon )
            {
            // InternalIDSLParser.g:6187:1: ( Colon )
            // InternalIDSLParser.g:6188:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_3__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_3__2"
    // InternalIDSLParser.g:6197:1: rule__Piechart__Group_3_3__2 : rule__Piechart__Group_3_3__2__Impl ;
    public final void rule__Piechart__Group_3_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6201:1: ( rule__Piechart__Group_3_3__2__Impl )
            // InternalIDSLParser.g:6202:2: rule__Piechart__Group_3_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_3__2"


    // $ANTLR start "rule__Piechart__Group_3_3__2__Impl"
    // InternalIDSLParser.g:6208:1: rule__Piechart__Group_3_3__2__Impl : ( ( rule__Piechart__LegendstyleAssignment_3_3_2 ) ) ;
    public final void rule__Piechart__Group_3_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6212:1: ( ( ( rule__Piechart__LegendstyleAssignment_3_3_2 ) ) )
            // InternalIDSLParser.g:6213:1: ( ( rule__Piechart__LegendstyleAssignment_3_3_2 ) )
            {
            // InternalIDSLParser.g:6213:1: ( ( rule__Piechart__LegendstyleAssignment_3_3_2 ) )
            // InternalIDSLParser.g:6214:2: ( rule__Piechart__LegendstyleAssignment_3_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getLegendstyleAssignment_3_3_2()); 
            }
            // InternalIDSLParser.g:6215:2: ( rule__Piechart__LegendstyleAssignment_3_3_2 )
            // InternalIDSLParser.g:6215:3: rule__Piechart__LegendstyleAssignment_3_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__LegendstyleAssignment_3_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getLegendstyleAssignment_3_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_3__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_4__0"
    // InternalIDSLParser.g:6224:1: rule__Piechart__Group_3_4__0 : rule__Piechart__Group_3_4__0__Impl rule__Piechart__Group_3_4__1 ;
    public final void rule__Piechart__Group_3_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6228:1: ( rule__Piechart__Group_3_4__0__Impl rule__Piechart__Group_3_4__1 )
            // InternalIDSLParser.g:6229:2: rule__Piechart__Group_3_4__0__Impl rule__Piechart__Group_3_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_4__0"


    // $ANTLR start "rule__Piechart__Group_3_4__0__Impl"
    // InternalIDSLParser.g:6236:1: rule__Piechart__Group_3_4__0__Impl : ( Padding ) ;
    public final void rule__Piechart__Group_3_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6240:1: ( ( Padding ) )
            // InternalIDSLParser.g:6241:1: ( Padding )
            {
            // InternalIDSLParser.g:6241:1: ( Padding )
            // InternalIDSLParser.g:6242:2: Padding
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPaddingKeyword_3_4_0()); 
            }
            match(input,Padding,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPaddingKeyword_3_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_4__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_4__1"
    // InternalIDSLParser.g:6251:1: rule__Piechart__Group_3_4__1 : rule__Piechart__Group_3_4__1__Impl rule__Piechart__Group_3_4__2 ;
    public final void rule__Piechart__Group_3_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6255:1: ( rule__Piechart__Group_3_4__1__Impl rule__Piechart__Group_3_4__2 )
            // InternalIDSLParser.g:6256:2: rule__Piechart__Group_3_4__1__Impl rule__Piechart__Group_3_4__2
            {
            pushFollow(FOLLOW_17);
            rule__Piechart__Group_3_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_4__1"


    // $ANTLR start "rule__Piechart__Group_3_4__1__Impl"
    // InternalIDSLParser.g:6263:1: rule__Piechart__Group_3_4__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6267:1: ( ( Colon ) )
            // InternalIDSLParser.g:6268:1: ( Colon )
            {
            // InternalIDSLParser.g:6268:1: ( Colon )
            // InternalIDSLParser.g:6269:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_4__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_4__2"
    // InternalIDSLParser.g:6278:1: rule__Piechart__Group_3_4__2 : rule__Piechart__Group_3_4__2__Impl ;
    public final void rule__Piechart__Group_3_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6282:1: ( rule__Piechart__Group_3_4__2__Impl )
            // InternalIDSLParser.g:6283:2: rule__Piechart__Group_3_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_4__2"


    // $ANTLR start "rule__Piechart__Group_3_4__2__Impl"
    // InternalIDSLParser.g:6289:1: rule__Piechart__Group_3_4__2__Impl : ( ( rule__Piechart__PaddingAssignment_3_4_2 ) ) ;
    public final void rule__Piechart__Group_3_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6293:1: ( ( ( rule__Piechart__PaddingAssignment_3_4_2 ) ) )
            // InternalIDSLParser.g:6294:1: ( ( rule__Piechart__PaddingAssignment_3_4_2 ) )
            {
            // InternalIDSLParser.g:6294:1: ( ( rule__Piechart__PaddingAssignment_3_4_2 ) )
            // InternalIDSLParser.g:6295:2: ( rule__Piechart__PaddingAssignment_3_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPaddingAssignment_3_4_2()); 
            }
            // InternalIDSLParser.g:6296:2: ( rule__Piechart__PaddingAssignment_3_4_2 )
            // InternalIDSLParser.g:6296:3: rule__Piechart__PaddingAssignment_3_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__PaddingAssignment_3_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPaddingAssignment_3_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_4__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_5__0"
    // InternalIDSLParser.g:6305:1: rule__Piechart__Group_3_5__0 : rule__Piechart__Group_3_5__0__Impl rule__Piechart__Group_3_5__1 ;
    public final void rule__Piechart__Group_3_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6309:1: ( rule__Piechart__Group_3_5__0__Impl rule__Piechart__Group_3_5__1 )
            // InternalIDSLParser.g:6310:2: rule__Piechart__Group_3_5__0__Impl rule__Piechart__Group_3_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_5__0"


    // $ANTLR start "rule__Piechart__Group_3_5__0__Impl"
    // InternalIDSLParser.g:6317:1: rule__Piechart__Group_3_5__0__Impl : ( Position ) ;
    public final void rule__Piechart__Group_3_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6321:1: ( ( Position ) )
            // InternalIDSLParser.g:6322:1: ( Position )
            {
            // InternalIDSLParser.g:6322:1: ( Position )
            // InternalIDSLParser.g:6323:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPositionKeyword_3_5_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPositionKeyword_3_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_5__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_5__1"
    // InternalIDSLParser.g:6332:1: rule__Piechart__Group_3_5__1 : rule__Piechart__Group_3_5__1__Impl rule__Piechart__Group_3_5__2 ;
    public final void rule__Piechart__Group_3_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6336:1: ( rule__Piechart__Group_3_5__1__Impl rule__Piechart__Group_3_5__2 )
            // InternalIDSLParser.g:6337:2: rule__Piechart__Group_3_5__1__Impl rule__Piechart__Group_3_5__2
            {
            pushFollow(FOLLOW_8);
            rule__Piechart__Group_3_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_5__1"


    // $ANTLR start "rule__Piechart__Group_3_5__1__Impl"
    // InternalIDSLParser.g:6344:1: rule__Piechart__Group_3_5__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6348:1: ( ( Colon ) )
            // InternalIDSLParser.g:6349:1: ( Colon )
            {
            // InternalIDSLParser.g:6349:1: ( Colon )
            // InternalIDSLParser.g:6350:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_5__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_5__2"
    // InternalIDSLParser.g:6359:1: rule__Piechart__Group_3_5__2 : rule__Piechart__Group_3_5__2__Impl ;
    public final void rule__Piechart__Group_3_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6363:1: ( rule__Piechart__Group_3_5__2__Impl )
            // InternalIDSLParser.g:6364:2: rule__Piechart__Group_3_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_5__2"


    // $ANTLR start "rule__Piechart__Group_3_5__2__Impl"
    // InternalIDSLParser.g:6370:1: rule__Piechart__Group_3_5__2__Impl : ( ( rule__Piechart__PositionAssignment_3_5_2 ) ) ;
    public final void rule__Piechart__Group_3_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6374:1: ( ( ( rule__Piechart__PositionAssignment_3_5_2 ) ) )
            // InternalIDSLParser.g:6375:1: ( ( rule__Piechart__PositionAssignment_3_5_2 ) )
            {
            // InternalIDSLParser.g:6375:1: ( ( rule__Piechart__PositionAssignment_3_5_2 ) )
            // InternalIDSLParser.g:6376:2: ( rule__Piechart__PositionAssignment_3_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPositionAssignment_3_5_2()); 
            }
            // InternalIDSLParser.g:6377:2: ( rule__Piechart__PositionAssignment_3_5_2 )
            // InternalIDSLParser.g:6377:3: rule__Piechart__PositionAssignment_3_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__PositionAssignment_3_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPositionAssignment_3_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_5__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_6__0"
    // InternalIDSLParser.g:6386:1: rule__Piechart__Group_3_6__0 : rule__Piechart__Group_3_6__0__Impl rule__Piechart__Group_3_6__1 ;
    public final void rule__Piechart__Group_3_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6390:1: ( rule__Piechart__Group_3_6__0__Impl rule__Piechart__Group_3_6__1 )
            // InternalIDSLParser.g:6391:2: rule__Piechart__Group_3_6__0__Impl rule__Piechart__Group_3_6__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_6__0"


    // $ANTLR start "rule__Piechart__Group_3_6__0__Impl"
    // InternalIDSLParser.g:6398:1: rule__Piechart__Group_3_6__0__Impl : ( Showlegend ) ;
    public final void rule__Piechart__Group_3_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6402:1: ( ( Showlegend ) )
            // InternalIDSLParser.g:6403:1: ( Showlegend )
            {
            // InternalIDSLParser.g:6403:1: ( Showlegend )
            // InternalIDSLParser.g:6404:2: Showlegend
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowlegendKeyword_3_6_0()); 
            }
            match(input,Showlegend,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowlegendKeyword_3_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_6__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_6__1"
    // InternalIDSLParser.g:6413:1: rule__Piechart__Group_3_6__1 : rule__Piechart__Group_3_6__1__Impl rule__Piechart__Group_3_6__2 ;
    public final void rule__Piechart__Group_3_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6417:1: ( rule__Piechart__Group_3_6__1__Impl rule__Piechart__Group_3_6__2 )
            // InternalIDSLParser.g:6418:2: rule__Piechart__Group_3_6__1__Impl rule__Piechart__Group_3_6__2
            {
            pushFollow(FOLLOW_27);
            rule__Piechart__Group_3_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_6__1"


    // $ANTLR start "rule__Piechart__Group_3_6__1__Impl"
    // InternalIDSLParser.g:6425:1: rule__Piechart__Group_3_6__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6429:1: ( ( Colon ) )
            // InternalIDSLParser.g:6430:1: ( Colon )
            {
            // InternalIDSLParser.g:6430:1: ( Colon )
            // InternalIDSLParser.g:6431:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_6_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_6__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_6__2"
    // InternalIDSLParser.g:6440:1: rule__Piechart__Group_3_6__2 : rule__Piechart__Group_3_6__2__Impl ;
    public final void rule__Piechart__Group_3_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6444:1: ( rule__Piechart__Group_3_6__2__Impl )
            // InternalIDSLParser.g:6445:2: rule__Piechart__Group_3_6__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_6__2"


    // $ANTLR start "rule__Piechart__Group_3_6__2__Impl"
    // InternalIDSLParser.g:6451:1: rule__Piechart__Group_3_6__2__Impl : ( ( rule__Piechart__ShowlegendAssignment_3_6_2 ) ) ;
    public final void rule__Piechart__Group_3_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6455:1: ( ( ( rule__Piechart__ShowlegendAssignment_3_6_2 ) ) )
            // InternalIDSLParser.g:6456:1: ( ( rule__Piechart__ShowlegendAssignment_3_6_2 ) )
            {
            // InternalIDSLParser.g:6456:1: ( ( rule__Piechart__ShowlegendAssignment_3_6_2 ) )
            // InternalIDSLParser.g:6457:2: ( rule__Piechart__ShowlegendAssignment_3_6_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowlegendAssignment_3_6_2()); 
            }
            // InternalIDSLParser.g:6458:2: ( rule__Piechart__ShowlegendAssignment_3_6_2 )
            // InternalIDSLParser.g:6458:3: rule__Piechart__ShowlegendAssignment_3_6_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__ShowlegendAssignment_3_6_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowlegendAssignment_3_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_6__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_7__0"
    // InternalIDSLParser.g:6467:1: rule__Piechart__Group_3_7__0 : rule__Piechart__Group_3_7__0__Impl rule__Piechart__Group_3_7__1 ;
    public final void rule__Piechart__Group_3_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6471:1: ( rule__Piechart__Group_3_7__0__Impl rule__Piechart__Group_3_7__1 )
            // InternalIDSLParser.g:6472:2: rule__Piechart__Group_3_7__0__Impl rule__Piechart__Group_3_7__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_7__0"


    // $ANTLR start "rule__Piechart__Group_3_7__0__Impl"
    // InternalIDSLParser.g:6479:1: rule__Piechart__Group_3_7__0__Impl : ( Showtitle ) ;
    public final void rule__Piechart__Group_3_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6483:1: ( ( Showtitle ) )
            // InternalIDSLParser.g:6484:1: ( Showtitle )
            {
            // InternalIDSLParser.g:6484:1: ( Showtitle )
            // InternalIDSLParser.g:6485:2: Showtitle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowtitleKeyword_3_7_0()); 
            }
            match(input,Showtitle,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowtitleKeyword_3_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_7__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_7__1"
    // InternalIDSLParser.g:6494:1: rule__Piechart__Group_3_7__1 : rule__Piechart__Group_3_7__1__Impl rule__Piechart__Group_3_7__2 ;
    public final void rule__Piechart__Group_3_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6498:1: ( rule__Piechart__Group_3_7__1__Impl rule__Piechart__Group_3_7__2 )
            // InternalIDSLParser.g:6499:2: rule__Piechart__Group_3_7__1__Impl rule__Piechart__Group_3_7__2
            {
            pushFollow(FOLLOW_27);
            rule__Piechart__Group_3_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_7__1"


    // $ANTLR start "rule__Piechart__Group_3_7__1__Impl"
    // InternalIDSLParser.g:6506:1: rule__Piechart__Group_3_7__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6510:1: ( ( Colon ) )
            // InternalIDSLParser.g:6511:1: ( Colon )
            {
            // InternalIDSLParser.g:6511:1: ( Colon )
            // InternalIDSLParser.g:6512:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_7_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_7__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_7__2"
    // InternalIDSLParser.g:6521:1: rule__Piechart__Group_3_7__2 : rule__Piechart__Group_3_7__2__Impl ;
    public final void rule__Piechart__Group_3_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6525:1: ( rule__Piechart__Group_3_7__2__Impl )
            // InternalIDSLParser.g:6526:2: rule__Piechart__Group_3_7__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_7__2"


    // $ANTLR start "rule__Piechart__Group_3_7__2__Impl"
    // InternalIDSLParser.g:6532:1: rule__Piechart__Group_3_7__2__Impl : ( ( rule__Piechart__ShowtitleAssignment_3_7_2 ) ) ;
    public final void rule__Piechart__Group_3_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6536:1: ( ( ( rule__Piechart__ShowtitleAssignment_3_7_2 ) ) )
            // InternalIDSLParser.g:6537:1: ( ( rule__Piechart__ShowtitleAssignment_3_7_2 ) )
            {
            // InternalIDSLParser.g:6537:1: ( ( rule__Piechart__ShowtitleAssignment_3_7_2 ) )
            // InternalIDSLParser.g:6538:2: ( rule__Piechart__ShowtitleAssignment_3_7_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowtitleAssignment_3_7_2()); 
            }
            // InternalIDSLParser.g:6539:2: ( rule__Piechart__ShowtitleAssignment_3_7_2 )
            // InternalIDSLParser.g:6539:3: rule__Piechart__ShowtitleAssignment_3_7_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__ShowtitleAssignment_3_7_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowtitleAssignment_3_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_7__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_8__0"
    // InternalIDSLParser.g:6548:1: rule__Piechart__Group_3_8__0 : rule__Piechart__Group_3_8__0__Impl rule__Piechart__Group_3_8__1 ;
    public final void rule__Piechart__Group_3_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6552:1: ( rule__Piechart__Group_3_8__0__Impl rule__Piechart__Group_3_8__1 )
            // InternalIDSLParser.g:6553:2: rule__Piechart__Group_3_8__0__Impl rule__Piechart__Group_3_8__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_8__0"


    // $ANTLR start "rule__Piechart__Group_3_8__0__Impl"
    // InternalIDSLParser.g:6560:1: rule__Piechart__Group_3_8__0__Impl : ( Showpercentage ) ;
    public final void rule__Piechart__Group_3_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6564:1: ( ( Showpercentage ) )
            // InternalIDSLParser.g:6565:1: ( Showpercentage )
            {
            // InternalIDSLParser.g:6565:1: ( Showpercentage )
            // InternalIDSLParser.g:6566:2: Showpercentage
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowpercentageKeyword_3_8_0()); 
            }
            match(input,Showpercentage,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowpercentageKeyword_3_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_8__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_8__1"
    // InternalIDSLParser.g:6575:1: rule__Piechart__Group_3_8__1 : rule__Piechart__Group_3_8__1__Impl rule__Piechart__Group_3_8__2 ;
    public final void rule__Piechart__Group_3_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6579:1: ( rule__Piechart__Group_3_8__1__Impl rule__Piechart__Group_3_8__2 )
            // InternalIDSLParser.g:6580:2: rule__Piechart__Group_3_8__1__Impl rule__Piechart__Group_3_8__2
            {
            pushFollow(FOLLOW_27);
            rule__Piechart__Group_3_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_8__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_8__1"


    // $ANTLR start "rule__Piechart__Group_3_8__1__Impl"
    // InternalIDSLParser.g:6587:1: rule__Piechart__Group_3_8__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6591:1: ( ( Colon ) )
            // InternalIDSLParser.g:6592:1: ( Colon )
            {
            // InternalIDSLParser.g:6592:1: ( Colon )
            // InternalIDSLParser.g:6593:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_8_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_8__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_8__2"
    // InternalIDSLParser.g:6602:1: rule__Piechart__Group_3_8__2 : rule__Piechart__Group_3_8__2__Impl ;
    public final void rule__Piechart__Group_3_8__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6606:1: ( rule__Piechart__Group_3_8__2__Impl )
            // InternalIDSLParser.g:6607:2: rule__Piechart__Group_3_8__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_8__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_8__2"


    // $ANTLR start "rule__Piechart__Group_3_8__2__Impl"
    // InternalIDSLParser.g:6613:1: rule__Piechart__Group_3_8__2__Impl : ( ( rule__Piechart__ShowpercentageAssignment_3_8_2 ) ) ;
    public final void rule__Piechart__Group_3_8__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6617:1: ( ( ( rule__Piechart__ShowpercentageAssignment_3_8_2 ) ) )
            // InternalIDSLParser.g:6618:1: ( ( rule__Piechart__ShowpercentageAssignment_3_8_2 ) )
            {
            // InternalIDSLParser.g:6618:1: ( ( rule__Piechart__ShowpercentageAssignment_3_8_2 ) )
            // InternalIDSLParser.g:6619:2: ( rule__Piechart__ShowpercentageAssignment_3_8_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowpercentageAssignment_3_8_2()); 
            }
            // InternalIDSLParser.g:6620:2: ( rule__Piechart__ShowpercentageAssignment_3_8_2 )
            // InternalIDSLParser.g:6620:3: rule__Piechart__ShowpercentageAssignment_3_8_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__ShowpercentageAssignment_3_8_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowpercentageAssignment_3_8_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_8__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_9__0"
    // InternalIDSLParser.g:6629:1: rule__Piechart__Group_3_9__0 : rule__Piechart__Group_3_9__0__Impl rule__Piechart__Group_3_9__1 ;
    public final void rule__Piechart__Group_3_9__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6633:1: ( rule__Piechart__Group_3_9__0__Impl rule__Piechart__Group_3_9__1 )
            // InternalIDSLParser.g:6634:2: rule__Piechart__Group_3_9__0__Impl rule__Piechart__Group_3_9__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_9__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_9__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_9__0"


    // $ANTLR start "rule__Piechart__Group_3_9__0__Impl"
    // InternalIDSLParser.g:6641:1: rule__Piechart__Group_3_9__0__Impl : ( Size ) ;
    public final void rule__Piechart__Group_3_9__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6645:1: ( ( Size ) )
            // InternalIDSLParser.g:6646:1: ( Size )
            {
            // InternalIDSLParser.g:6646:1: ( Size )
            // InternalIDSLParser.g:6647:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getSizeKeyword_3_9_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getSizeKeyword_3_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_9__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_9__1"
    // InternalIDSLParser.g:6656:1: rule__Piechart__Group_3_9__1 : rule__Piechart__Group_3_9__1__Impl rule__Piechart__Group_3_9__2 ;
    public final void rule__Piechart__Group_3_9__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6660:1: ( rule__Piechart__Group_3_9__1__Impl rule__Piechart__Group_3_9__2 )
            // InternalIDSLParser.g:6661:2: rule__Piechart__Group_3_9__1__Impl rule__Piechart__Group_3_9__2
            {
            pushFollow(FOLLOW_17);
            rule__Piechart__Group_3_9__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_9__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_9__1"


    // $ANTLR start "rule__Piechart__Group_3_9__1__Impl"
    // InternalIDSLParser.g:6668:1: rule__Piechart__Group_3_9__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_9__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6672:1: ( ( Colon ) )
            // InternalIDSLParser.g:6673:1: ( Colon )
            {
            // InternalIDSLParser.g:6673:1: ( Colon )
            // InternalIDSLParser.g:6674:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_9_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_9_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_9__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_9__2"
    // InternalIDSLParser.g:6683:1: rule__Piechart__Group_3_9__2 : rule__Piechart__Group_3_9__2__Impl ;
    public final void rule__Piechart__Group_3_9__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6687:1: ( rule__Piechart__Group_3_9__2__Impl )
            // InternalIDSLParser.g:6688:2: rule__Piechart__Group_3_9__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_9__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_9__2"


    // $ANTLR start "rule__Piechart__Group_3_9__2__Impl"
    // InternalIDSLParser.g:6694:1: rule__Piechart__Group_3_9__2__Impl : ( ( rule__Piechart__SizeAssignment_3_9_2 ) ) ;
    public final void rule__Piechart__Group_3_9__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6698:1: ( ( ( rule__Piechart__SizeAssignment_3_9_2 ) ) )
            // InternalIDSLParser.g:6699:1: ( ( rule__Piechart__SizeAssignment_3_9_2 ) )
            {
            // InternalIDSLParser.g:6699:1: ( ( rule__Piechart__SizeAssignment_3_9_2 ) )
            // InternalIDSLParser.g:6700:2: ( rule__Piechart__SizeAssignment_3_9_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getSizeAssignment_3_9_2()); 
            }
            // InternalIDSLParser.g:6701:2: ( rule__Piechart__SizeAssignment_3_9_2 )
            // InternalIDSLParser.g:6701:3: rule__Piechart__SizeAssignment_3_9_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__SizeAssignment_3_9_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getSizeAssignment_3_9_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_9__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_10__0"
    // InternalIDSLParser.g:6710:1: rule__Piechart__Group_3_10__0 : rule__Piechart__Group_3_10__0__Impl rule__Piechart__Group_3_10__1 ;
    public final void rule__Piechart__Group_3_10__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6714:1: ( rule__Piechart__Group_3_10__0__Impl rule__Piechart__Group_3_10__1 )
            // InternalIDSLParser.g:6715:2: rule__Piechart__Group_3_10__0__Impl rule__Piechart__Group_3_10__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_10__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_10__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_10__0"


    // $ANTLR start "rule__Piechart__Group_3_10__0__Impl"
    // InternalIDSLParser.g:6722:1: rule__Piechart__Group_3_10__0__Impl : ( Title ) ;
    public final void rule__Piechart__Group_3_10__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6726:1: ( ( Title ) )
            // InternalIDSLParser.g:6727:1: ( Title )
            {
            // InternalIDSLParser.g:6727:1: ( Title )
            // InternalIDSLParser.g:6728:2: Title
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getTitleKeyword_3_10_0()); 
            }
            match(input,Title,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getTitleKeyword_3_10_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_10__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_10__1"
    // InternalIDSLParser.g:6737:1: rule__Piechart__Group_3_10__1 : rule__Piechart__Group_3_10__1__Impl rule__Piechart__Group_3_10__2 ;
    public final void rule__Piechart__Group_3_10__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6741:1: ( rule__Piechart__Group_3_10__1__Impl rule__Piechart__Group_3_10__2 )
            // InternalIDSLParser.g:6742:2: rule__Piechart__Group_3_10__1__Impl rule__Piechart__Group_3_10__2
            {
            pushFollow(FOLLOW_7);
            rule__Piechart__Group_3_10__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_10__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_10__1"


    // $ANTLR start "rule__Piechart__Group_3_10__1__Impl"
    // InternalIDSLParser.g:6749:1: rule__Piechart__Group_3_10__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_10__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6753:1: ( ( Colon ) )
            // InternalIDSLParser.g:6754:1: ( Colon )
            {
            // InternalIDSLParser.g:6754:1: ( Colon )
            // InternalIDSLParser.g:6755:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_10_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_10_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_10__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_10__2"
    // InternalIDSLParser.g:6764:1: rule__Piechart__Group_3_10__2 : rule__Piechart__Group_3_10__2__Impl ;
    public final void rule__Piechart__Group_3_10__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6768:1: ( rule__Piechart__Group_3_10__2__Impl )
            // InternalIDSLParser.g:6769:2: rule__Piechart__Group_3_10__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_10__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_10__2"


    // $ANTLR start "rule__Piechart__Group_3_10__2__Impl"
    // InternalIDSLParser.g:6775:1: rule__Piechart__Group_3_10__2__Impl : ( ( rule__Piechart__TitleAssignment_3_10_2 ) ) ;
    public final void rule__Piechart__Group_3_10__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6779:1: ( ( ( rule__Piechart__TitleAssignment_3_10_2 ) ) )
            // InternalIDSLParser.g:6780:1: ( ( rule__Piechart__TitleAssignment_3_10_2 ) )
            {
            // InternalIDSLParser.g:6780:1: ( ( rule__Piechart__TitleAssignment_3_10_2 ) )
            // InternalIDSLParser.g:6781:2: ( rule__Piechart__TitleAssignment_3_10_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getTitleAssignment_3_10_2()); 
            }
            // InternalIDSLParser.g:6782:2: ( rule__Piechart__TitleAssignment_3_10_2 )
            // InternalIDSLParser.g:6782:3: rule__Piechart__TitleAssignment_3_10_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__TitleAssignment_3_10_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getTitleAssignment_3_10_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_10__2__Impl"


    // $ANTLR start "rule__Piechart__Group_3_11__0"
    // InternalIDSLParser.g:6791:1: rule__Piechart__Group_3_11__0 : rule__Piechart__Group_3_11__0__Impl rule__Piechart__Group_3_11__1 ;
    public final void rule__Piechart__Group_3_11__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6795:1: ( rule__Piechart__Group_3_11__0__Impl rule__Piechart__Group_3_11__1 )
            // InternalIDSLParser.g:6796:2: rule__Piechart__Group_3_11__0__Impl rule__Piechart__Group_3_11__1
            {
            pushFollow(FOLLOW_3);
            rule__Piechart__Group_3_11__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_11__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_11__0"


    // $ANTLR start "rule__Piechart__Group_3_11__0__Impl"
    // InternalIDSLParser.g:6803:1: rule__Piechart__Group_3_11__0__Impl : ( Type ) ;
    public final void rule__Piechart__Group_3_11__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6807:1: ( ( Type ) )
            // InternalIDSLParser.g:6808:1: ( Type )
            {
            // InternalIDSLParser.g:6808:1: ( Type )
            // InternalIDSLParser.g:6809:2: Type
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getTypeKeyword_3_11_0()); 
            }
            match(input,Type,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getTypeKeyword_3_11_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_11__0__Impl"


    // $ANTLR start "rule__Piechart__Group_3_11__1"
    // InternalIDSLParser.g:6818:1: rule__Piechart__Group_3_11__1 : rule__Piechart__Group_3_11__1__Impl rule__Piechart__Group_3_11__2 ;
    public final void rule__Piechart__Group_3_11__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6822:1: ( rule__Piechart__Group_3_11__1__Impl rule__Piechart__Group_3_11__2 )
            // InternalIDSLParser.g:6823:2: rule__Piechart__Group_3_11__1__Impl rule__Piechart__Group_3_11__2
            {
            pushFollow(FOLLOW_28);
            rule__Piechart__Group_3_11__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_11__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_11__1"


    // $ANTLR start "rule__Piechart__Group_3_11__1__Impl"
    // InternalIDSLParser.g:6830:1: rule__Piechart__Group_3_11__1__Impl : ( Colon ) ;
    public final void rule__Piechart__Group_3_11__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6834:1: ( ( Colon ) )
            // InternalIDSLParser.g:6835:1: ( Colon )
            {
            // InternalIDSLParser.g:6835:1: ( Colon )
            // InternalIDSLParser.g:6836:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColonKeyword_3_11_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColonKeyword_3_11_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_11__1__Impl"


    // $ANTLR start "rule__Piechart__Group_3_11__2"
    // InternalIDSLParser.g:6845:1: rule__Piechart__Group_3_11__2 : rule__Piechart__Group_3_11__2__Impl ;
    public final void rule__Piechart__Group_3_11__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6849:1: ( rule__Piechart__Group_3_11__2__Impl )
            // InternalIDSLParser.g:6850:2: rule__Piechart__Group_3_11__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__Group_3_11__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_11__2"


    // $ANTLR start "rule__Piechart__Group_3_11__2__Impl"
    // InternalIDSLParser.g:6856:1: rule__Piechart__Group_3_11__2__Impl : ( ( rule__Piechart__TypeAssignment_3_11_2 ) ) ;
    public final void rule__Piechart__Group_3_11__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6860:1: ( ( ( rule__Piechart__TypeAssignment_3_11_2 ) ) )
            // InternalIDSLParser.g:6861:1: ( ( rule__Piechart__TypeAssignment_3_11_2 ) )
            {
            // InternalIDSLParser.g:6861:1: ( ( rule__Piechart__TypeAssignment_3_11_2 ) )
            // InternalIDSLParser.g:6862:2: ( rule__Piechart__TypeAssignment_3_11_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getTypeAssignment_3_11_2()); 
            }
            // InternalIDSLParser.g:6863:2: ( rule__Piechart__TypeAssignment_3_11_2 )
            // InternalIDSLParser.g:6863:3: rule__Piechart__TypeAssignment_3_11_2
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__TypeAssignment_3_11_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getTypeAssignment_3_11_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__Group_3_11__2__Impl"


    // $ANTLR start "rule__Barchart__Group__0"
    // InternalIDSLParser.g:6872:1: rule__Barchart__Group__0 : rule__Barchart__Group__0__Impl rule__Barchart__Group__1 ;
    public final void rule__Barchart__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6876:1: ( rule__Barchart__Group__0__Impl rule__Barchart__Group__1 )
            // InternalIDSLParser.g:6877:2: rule__Barchart__Group__0__Impl rule__Barchart__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__0"


    // $ANTLR start "rule__Barchart__Group__0__Impl"
    // InternalIDSLParser.g:6884:1: rule__Barchart__Group__0__Impl : ( ( rule__Barchart__NameAssignment_0 ) ) ;
    public final void rule__Barchart__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6888:1: ( ( ( rule__Barchart__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:6889:1: ( ( rule__Barchart__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:6889:1: ( ( rule__Barchart__NameAssignment_0 ) )
            // InternalIDSLParser.g:6890:2: ( rule__Barchart__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:6891:2: ( rule__Barchart__NameAssignment_0 )
            // InternalIDSLParser.g:6891:3: rule__Barchart__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__0__Impl"


    // $ANTLR start "rule__Barchart__Group__1"
    // InternalIDSLParser.g:6899:1: rule__Barchart__Group__1 : rule__Barchart__Group__1__Impl rule__Barchart__Group__2 ;
    public final void rule__Barchart__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6903:1: ( rule__Barchart__Group__1__Impl rule__Barchart__Group__2 )
            // InternalIDSLParser.g:6904:2: rule__Barchart__Group__1__Impl rule__Barchart__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__Barchart__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__1"


    // $ANTLR start "rule__Barchart__Group__1__Impl"
    // InternalIDSLParser.g:6911:1: rule__Barchart__Group__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6915:1: ( ( Colon ) )
            // InternalIDSLParser.g:6916:1: ( Colon )
            {
            // InternalIDSLParser.g:6916:1: ( Colon )
            // InternalIDSLParser.g:6917:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__1__Impl"


    // $ANTLR start "rule__Barchart__Group__2"
    // InternalIDSLParser.g:6926:1: rule__Barchart__Group__2 : rule__Barchart__Group__2__Impl rule__Barchart__Group__3 ;
    public final void rule__Barchart__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6930:1: ( rule__Barchart__Group__2__Impl rule__Barchart__Group__3 )
            // InternalIDSLParser.g:6931:2: rule__Barchart__Group__2__Impl rule__Barchart__Group__3
            {
            pushFollow(FOLLOW_29);
            rule__Barchart__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__2"


    // $ANTLR start "rule__Barchart__Group__2__Impl"
    // InternalIDSLParser.g:6938:1: rule__Barchart__Group__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Barchart__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6942:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:6943:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:6943:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:6944:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getBEGINTerminalRuleCall_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getBEGINTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__2__Impl"


    // $ANTLR start "rule__Barchart__Group__3"
    // InternalIDSLParser.g:6953:1: rule__Barchart__Group__3 : rule__Barchart__Group__3__Impl rule__Barchart__Group__4 ;
    public final void rule__Barchart__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6957:1: ( rule__Barchart__Group__3__Impl rule__Barchart__Group__4 )
            // InternalIDSLParser.g:6958:2: rule__Barchart__Group__3__Impl rule__Barchart__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__Barchart__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__3"


    // $ANTLR start "rule__Barchart__Group__3__Impl"
    // InternalIDSLParser.g:6965:1: rule__Barchart__Group__3__Impl : ( ( rule__Barchart__UnorderedGroup_3 ) ) ;
    public final void rule__Barchart__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6969:1: ( ( ( rule__Barchart__UnorderedGroup_3 ) ) )
            // InternalIDSLParser.g:6970:1: ( ( rule__Barchart__UnorderedGroup_3 ) )
            {
            // InternalIDSLParser.g:6970:1: ( ( rule__Barchart__UnorderedGroup_3 ) )
            // InternalIDSLParser.g:6971:2: ( rule__Barchart__UnorderedGroup_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getUnorderedGroup_3()); 
            }
            // InternalIDSLParser.g:6972:2: ( rule__Barchart__UnorderedGroup_3 )
            // InternalIDSLParser.g:6972:3: rule__Barchart__UnorderedGroup_3
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__UnorderedGroup_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getUnorderedGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__3__Impl"


    // $ANTLR start "rule__Barchart__Group__4"
    // InternalIDSLParser.g:6980:1: rule__Barchart__Group__4 : rule__Barchart__Group__4__Impl ;
    public final void rule__Barchart__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6984:1: ( rule__Barchart__Group__4__Impl )
            // InternalIDSLParser.g:6985:2: rule__Barchart__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__4"


    // $ANTLR start "rule__Barchart__Group__4__Impl"
    // InternalIDSLParser.g:6991:1: rule__Barchart__Group__4__Impl : ( RULE_END ) ;
    public final void rule__Barchart__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:6995:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:6996:1: ( RULE_END )
            {
            // InternalIDSLParser.g:6996:1: ( RULE_END )
            // InternalIDSLParser.g:6997:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getENDTerminalRuleCall_4()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getENDTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group__4__Impl"


    // $ANTLR start "rule__Barchart__Group_3_0__0"
    // InternalIDSLParser.g:7007:1: rule__Barchart__Group_3_0__0 : rule__Barchart__Group_3_0__0__Impl rule__Barchart__Group_3_0__1 ;
    public final void rule__Barchart__Group_3_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7011:1: ( rule__Barchart__Group_3_0__0__Impl rule__Barchart__Group_3_0__1 )
            // InternalIDSLParser.g:7012:2: rule__Barchart__Group_3_0__0__Impl rule__Barchart__Group_3_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_0__0"


    // $ANTLR start "rule__Barchart__Group_3_0__0__Impl"
    // InternalIDSLParser.g:7019:1: rule__Barchart__Group_3_0__0__Impl : ( Bgcolor ) ;
    public final void rule__Barchart__Group_3_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7023:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:7024:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:7024:1: ( Bgcolor )
            // InternalIDSLParser.g:7025:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getBgcolorKeyword_3_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getBgcolorKeyword_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_0__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_0__1"
    // InternalIDSLParser.g:7034:1: rule__Barchart__Group_3_0__1 : rule__Barchart__Group_3_0__1__Impl rule__Barchart__Group_3_0__2 ;
    public final void rule__Barchart__Group_3_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7038:1: ( rule__Barchart__Group_3_0__1__Impl rule__Barchart__Group_3_0__2 )
            // InternalIDSLParser.g:7039:2: rule__Barchart__Group_3_0__1__Impl rule__Barchart__Group_3_0__2
            {
            pushFollow(FOLLOW_5);
            rule__Barchart__Group_3_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_0__1"


    // $ANTLR start "rule__Barchart__Group_3_0__1__Impl"
    // InternalIDSLParser.g:7046:1: rule__Barchart__Group_3_0__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7050:1: ( ( Colon ) )
            // InternalIDSLParser.g:7051:1: ( Colon )
            {
            // InternalIDSLParser.g:7051:1: ( Colon )
            // InternalIDSLParser.g:7052:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_0__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_0__2"
    // InternalIDSLParser.g:7061:1: rule__Barchart__Group_3_0__2 : rule__Barchart__Group_3_0__2__Impl ;
    public final void rule__Barchart__Group_3_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7065:1: ( rule__Barchart__Group_3_0__2__Impl )
            // InternalIDSLParser.g:7066:2: rule__Barchart__Group_3_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_0__2"


    // $ANTLR start "rule__Barchart__Group_3_0__2__Impl"
    // InternalIDSLParser.g:7072:1: rule__Barchart__Group_3_0__2__Impl : ( ( rule__Barchart__ColorAssignment_3_0_2 ) ) ;
    public final void rule__Barchart__Group_3_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7076:1: ( ( ( rule__Barchart__ColorAssignment_3_0_2 ) ) )
            // InternalIDSLParser.g:7077:1: ( ( rule__Barchart__ColorAssignment_3_0_2 ) )
            {
            // InternalIDSLParser.g:7077:1: ( ( rule__Barchart__ColorAssignment_3_0_2 ) )
            // InternalIDSLParser.g:7078:2: ( rule__Barchart__ColorAssignment_3_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColorAssignment_3_0_2()); 
            }
            // InternalIDSLParser.g:7079:2: ( rule__Barchart__ColorAssignment_3_0_2 )
            // InternalIDSLParser.g:7079:3: rule__Barchart__ColorAssignment_3_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__ColorAssignment_3_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColorAssignment_3_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_0__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_1__0"
    // InternalIDSLParser.g:7088:1: rule__Barchart__Group_3_1__0 : rule__Barchart__Group_3_1__0__Impl rule__Barchart__Group_3_1__1 ;
    public final void rule__Barchart__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7092:1: ( rule__Barchart__Group_3_1__0__Impl rule__Barchart__Group_3_1__1 )
            // InternalIDSLParser.g:7093:2: rule__Barchart__Group_3_1__0__Impl rule__Barchart__Group_3_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_1__0"


    // $ANTLR start "rule__Barchart__Group_3_1__0__Impl"
    // InternalIDSLParser.g:7100:1: rule__Barchart__Group_3_1__0__Impl : ( Colors ) ;
    public final void rule__Barchart__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7104:1: ( ( Colors ) )
            // InternalIDSLParser.g:7105:1: ( Colors )
            {
            // InternalIDSLParser.g:7105:1: ( Colors )
            // InternalIDSLParser.g:7106:2: Colors
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColorsKeyword_3_1_0()); 
            }
            match(input,Colors,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColorsKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_1__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_1__1"
    // InternalIDSLParser.g:7115:1: rule__Barchart__Group_3_1__1 : rule__Barchart__Group_3_1__1__Impl rule__Barchart__Group_3_1__2 ;
    public final void rule__Barchart__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7119:1: ( rule__Barchart__Group_3_1__1__Impl rule__Barchart__Group_3_1__2 )
            // InternalIDSLParser.g:7120:2: rule__Barchart__Group_3_1__1__Impl rule__Barchart__Group_3_1__2
            {
            pushFollow(FOLLOW_23);
            rule__Barchart__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_1__1"


    // $ANTLR start "rule__Barchart__Group_3_1__1__Impl"
    // InternalIDSLParser.g:7127:1: rule__Barchart__Group_3_1__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7131:1: ( ( Colon ) )
            // InternalIDSLParser.g:7132:1: ( Colon )
            {
            // InternalIDSLParser.g:7132:1: ( Colon )
            // InternalIDSLParser.g:7133:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_1__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_1__2"
    // InternalIDSLParser.g:7142:1: rule__Barchart__Group_3_1__2 : rule__Barchart__Group_3_1__2__Impl ;
    public final void rule__Barchart__Group_3_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7146:1: ( rule__Barchart__Group_3_1__2__Impl )
            // InternalIDSLParser.g:7147:2: rule__Barchart__Group_3_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_1__2"


    // $ANTLR start "rule__Barchart__Group_3_1__2__Impl"
    // InternalIDSLParser.g:7153:1: rule__Barchart__Group_3_1__2__Impl : ( ( rule__Barchart__ColorsAssignment_3_1_2 ) ) ;
    public final void rule__Barchart__Group_3_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7157:1: ( ( ( rule__Barchart__ColorsAssignment_3_1_2 ) ) )
            // InternalIDSLParser.g:7158:1: ( ( rule__Barchart__ColorsAssignment_3_1_2 ) )
            {
            // InternalIDSLParser.g:7158:1: ( ( rule__Barchart__ColorsAssignment_3_1_2 ) )
            // InternalIDSLParser.g:7159:2: ( rule__Barchart__ColorsAssignment_3_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColorsAssignment_3_1_2()); 
            }
            // InternalIDSLParser.g:7160:2: ( rule__Barchart__ColorsAssignment_3_1_2 )
            // InternalIDSLParser.g:7160:3: rule__Barchart__ColorsAssignment_3_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__ColorsAssignment_3_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColorsAssignment_3_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_1__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_2__0"
    // InternalIDSLParser.g:7169:1: rule__Barchart__Group_3_2__0 : rule__Barchart__Group_3_2__0__Impl rule__Barchart__Group_3_2__1 ;
    public final void rule__Barchart__Group_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7173:1: ( rule__Barchart__Group_3_2__0__Impl rule__Barchart__Group_3_2__1 )
            // InternalIDSLParser.g:7174:2: rule__Barchart__Group_3_2__0__Impl rule__Barchart__Group_3_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__0"


    // $ANTLR start "rule__Barchart__Group_3_2__0__Impl"
    // InternalIDSLParser.g:7181:1: rule__Barchart__Group_3_2__0__Impl : ( Data ) ;
    public final void rule__Barchart__Group_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7185:1: ( ( Data ) )
            // InternalIDSLParser.g:7186:1: ( Data )
            {
            // InternalIDSLParser.g:7186:1: ( Data )
            // InternalIDSLParser.g:7187:2: Data
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getDataKeyword_3_2_0()); 
            }
            match(input,Data,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getDataKeyword_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_2__1"
    // InternalIDSLParser.g:7196:1: rule__Barchart__Group_3_2__1 : rule__Barchart__Group_3_2__1__Impl rule__Barchart__Group_3_2__2 ;
    public final void rule__Barchart__Group_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7200:1: ( rule__Barchart__Group_3_2__1__Impl rule__Barchart__Group_3_2__2 )
            // InternalIDSLParser.g:7201:2: rule__Barchart__Group_3_2__1__Impl rule__Barchart__Group_3_2__2
            {
            pushFollow(FOLLOW_12);
            rule__Barchart__Group_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__1"


    // $ANTLR start "rule__Barchart__Group_3_2__1__Impl"
    // InternalIDSLParser.g:7208:1: rule__Barchart__Group_3_2__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7212:1: ( ( Colon ) )
            // InternalIDSLParser.g:7213:1: ( Colon )
            {
            // InternalIDSLParser.g:7213:1: ( Colon )
            // InternalIDSLParser.g:7214:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_2__2"
    // InternalIDSLParser.g:7223:1: rule__Barchart__Group_3_2__2 : rule__Barchart__Group_3_2__2__Impl rule__Barchart__Group_3_2__3 ;
    public final void rule__Barchart__Group_3_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7227:1: ( rule__Barchart__Group_3_2__2__Impl rule__Barchart__Group_3_2__3 )
            // InternalIDSLParser.g:7228:2: rule__Barchart__Group_3_2__2__Impl rule__Barchart__Group_3_2__3
            {
            pushFollow(FOLLOW_7);
            rule__Barchart__Group_3_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__2"


    // $ANTLR start "rule__Barchart__Group_3_2__2__Impl"
    // InternalIDSLParser.g:7235:1: rule__Barchart__Group_3_2__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Barchart__Group_3_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7239:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:7240:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:7240:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:7241:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getBEGINTerminalRuleCall_3_2_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getBEGINTerminalRuleCall_3_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_2__3"
    // InternalIDSLParser.g:7250:1: rule__Barchart__Group_3_2__3 : rule__Barchart__Group_3_2__3__Impl rule__Barchart__Group_3_2__4 ;
    public final void rule__Barchart__Group_3_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7254:1: ( rule__Barchart__Group_3_2__3__Impl rule__Barchart__Group_3_2__4 )
            // InternalIDSLParser.g:7255:2: rule__Barchart__Group_3_2__3__Impl rule__Barchart__Group_3_2__4
            {
            pushFollow(FOLLOW_24);
            rule__Barchart__Group_3_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__3"


    // $ANTLR start "rule__Barchart__Group_3_2__3__Impl"
    // InternalIDSLParser.g:7262:1: rule__Barchart__Group_3_2__3__Impl : ( ruleChartData ) ;
    public final void rule__Barchart__Group_3_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7266:1: ( ( ruleChartData ) )
            // InternalIDSLParser.g:7267:1: ( ruleChartData )
            {
            // InternalIDSLParser.g:7267:1: ( ruleChartData )
            // InternalIDSLParser.g:7268:2: ruleChartData
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getChartDataParserRuleCall_3_2_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getChartDataParserRuleCall_3_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__3__Impl"


    // $ANTLR start "rule__Barchart__Group_3_2__4"
    // InternalIDSLParser.g:7277:1: rule__Barchart__Group_3_2__4 : rule__Barchart__Group_3_2__4__Impl rule__Barchart__Group_3_2__5 ;
    public final void rule__Barchart__Group_3_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7281:1: ( rule__Barchart__Group_3_2__4__Impl rule__Barchart__Group_3_2__5 )
            // InternalIDSLParser.g:7282:2: rule__Barchart__Group_3_2__4__Impl rule__Barchart__Group_3_2__5
            {
            pushFollow(FOLLOW_24);
            rule__Barchart__Group_3_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__4"


    // $ANTLR start "rule__Barchart__Group_3_2__4__Impl"
    // InternalIDSLParser.g:7289:1: rule__Barchart__Group_3_2__4__Impl : ( ( rule__Barchart__BardataAssignment_3_2_4 )* ) ;
    public final void rule__Barchart__Group_3_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7293:1: ( ( ( rule__Barchart__BardataAssignment_3_2_4 )* ) )
            // InternalIDSLParser.g:7294:1: ( ( rule__Barchart__BardataAssignment_3_2_4 )* )
            {
            // InternalIDSLParser.g:7294:1: ( ( rule__Barchart__BardataAssignment_3_2_4 )* )
            // InternalIDSLParser.g:7295:2: ( rule__Barchart__BardataAssignment_3_2_4 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getBardataAssignment_3_2_4()); 
            }
            // InternalIDSLParser.g:7296:2: ( rule__Barchart__BardataAssignment_3_2_4 )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==RULE_STRING) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // InternalIDSLParser.g:7296:3: rule__Barchart__BardataAssignment_3_2_4
            	    {
            	    pushFollow(FOLLOW_25);
            	    rule__Barchart__BardataAssignment_3_2_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getBardataAssignment_3_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__4__Impl"


    // $ANTLR start "rule__Barchart__Group_3_2__5"
    // InternalIDSLParser.g:7304:1: rule__Barchart__Group_3_2__5 : rule__Barchart__Group_3_2__5__Impl ;
    public final void rule__Barchart__Group_3_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7308:1: ( rule__Barchart__Group_3_2__5__Impl )
            // InternalIDSLParser.g:7309:2: rule__Barchart__Group_3_2__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__5"


    // $ANTLR start "rule__Barchart__Group_3_2__5__Impl"
    // InternalIDSLParser.g:7315:1: rule__Barchart__Group_3_2__5__Impl : ( RULE_END ) ;
    public final void rule__Barchart__Group_3_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7319:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:7320:1: ( RULE_END )
            {
            // InternalIDSLParser.g:7320:1: ( RULE_END )
            // InternalIDSLParser.g:7321:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getENDTerminalRuleCall_3_2_5()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getENDTerminalRuleCall_3_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_2__5__Impl"


    // $ANTLR start "rule__Barchart__Group_3_3__0"
    // InternalIDSLParser.g:7331:1: rule__Barchart__Group_3_3__0 : rule__Barchart__Group_3_3__0__Impl rule__Barchart__Group_3_3__1 ;
    public final void rule__Barchart__Group_3_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7335:1: ( rule__Barchart__Group_3_3__0__Impl rule__Barchart__Group_3_3__1 )
            // InternalIDSLParser.g:7336:2: rule__Barchart__Group_3_3__0__Impl rule__Barchart__Group_3_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_3__0"


    // $ANTLR start "rule__Barchart__Group_3_3__0__Impl"
    // InternalIDSLParser.g:7343:1: rule__Barchart__Group_3_3__0__Impl : ( Gridscale ) ;
    public final void rule__Barchart__Group_3_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7347:1: ( ( Gridscale ) )
            // InternalIDSLParser.g:7348:1: ( Gridscale )
            {
            // InternalIDSLParser.g:7348:1: ( Gridscale )
            // InternalIDSLParser.g:7349:2: Gridscale
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getGridscaleKeyword_3_3_0()); 
            }
            match(input,Gridscale,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getGridscaleKeyword_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_3__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_3__1"
    // InternalIDSLParser.g:7358:1: rule__Barchart__Group_3_3__1 : rule__Barchart__Group_3_3__1__Impl rule__Barchart__Group_3_3__2 ;
    public final void rule__Barchart__Group_3_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7362:1: ( rule__Barchart__Group_3_3__1__Impl rule__Barchart__Group_3_3__2 )
            // InternalIDSLParser.g:7363:2: rule__Barchart__Group_3_3__1__Impl rule__Barchart__Group_3_3__2
            {
            pushFollow(FOLLOW_17);
            rule__Barchart__Group_3_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_3__1"


    // $ANTLR start "rule__Barchart__Group_3_3__1__Impl"
    // InternalIDSLParser.g:7370:1: rule__Barchart__Group_3_3__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7374:1: ( ( Colon ) )
            // InternalIDSLParser.g:7375:1: ( Colon )
            {
            // InternalIDSLParser.g:7375:1: ( Colon )
            // InternalIDSLParser.g:7376:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_3__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_3__2"
    // InternalIDSLParser.g:7385:1: rule__Barchart__Group_3_3__2 : rule__Barchart__Group_3_3__2__Impl ;
    public final void rule__Barchart__Group_3_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7389:1: ( rule__Barchart__Group_3_3__2__Impl )
            // InternalIDSLParser.g:7390:2: rule__Barchart__Group_3_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_3__2"


    // $ANTLR start "rule__Barchart__Group_3_3__2__Impl"
    // InternalIDSLParser.g:7396:1: rule__Barchart__Group_3_3__2__Impl : ( ( rule__Barchart__GridscaleAssignment_3_3_2 ) ) ;
    public final void rule__Barchart__Group_3_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7400:1: ( ( ( rule__Barchart__GridscaleAssignment_3_3_2 ) ) )
            // InternalIDSLParser.g:7401:1: ( ( rule__Barchart__GridscaleAssignment_3_3_2 ) )
            {
            // InternalIDSLParser.g:7401:1: ( ( rule__Barchart__GridscaleAssignment_3_3_2 ) )
            // InternalIDSLParser.g:7402:2: ( rule__Barchart__GridscaleAssignment_3_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getGridscaleAssignment_3_3_2()); 
            }
            // InternalIDSLParser.g:7403:2: ( rule__Barchart__GridscaleAssignment_3_3_2 )
            // InternalIDSLParser.g:7403:3: rule__Barchart__GridscaleAssignment_3_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__GridscaleAssignment_3_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getGridscaleAssignment_3_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_3__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_4__0"
    // InternalIDSLParser.g:7412:1: rule__Barchart__Group_3_4__0 : rule__Barchart__Group_3_4__0__Impl rule__Barchart__Group_3_4__1 ;
    public final void rule__Barchart__Group_3_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7416:1: ( rule__Barchart__Group_3_4__0__Impl rule__Barchart__Group_3_4__1 )
            // InternalIDSLParser.g:7417:2: rule__Barchart__Group_3_4__0__Impl rule__Barchart__Group_3_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_4__0"


    // $ANTLR start "rule__Barchart__Group_3_4__0__Impl"
    // InternalIDSLParser.g:7424:1: rule__Barchart__Group_3_4__0__Impl : ( Legendstyle ) ;
    public final void rule__Barchart__Group_3_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7428:1: ( ( Legendstyle ) )
            // InternalIDSLParser.g:7429:1: ( Legendstyle )
            {
            // InternalIDSLParser.g:7429:1: ( Legendstyle )
            // InternalIDSLParser.g:7430:2: Legendstyle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getLegendstyleKeyword_3_4_0()); 
            }
            match(input,Legendstyle,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getLegendstyleKeyword_3_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_4__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_4__1"
    // InternalIDSLParser.g:7439:1: rule__Barchart__Group_3_4__1 : rule__Barchart__Group_3_4__1__Impl rule__Barchart__Group_3_4__2 ;
    public final void rule__Barchart__Group_3_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7443:1: ( rule__Barchart__Group_3_4__1__Impl rule__Barchart__Group_3_4__2 )
            // InternalIDSLParser.g:7444:2: rule__Barchart__Group_3_4__1__Impl rule__Barchart__Group_3_4__2
            {
            pushFollow(FOLLOW_26);
            rule__Barchart__Group_3_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_4__1"


    // $ANTLR start "rule__Barchart__Group_3_4__1__Impl"
    // InternalIDSLParser.g:7451:1: rule__Barchart__Group_3_4__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7455:1: ( ( Colon ) )
            // InternalIDSLParser.g:7456:1: ( Colon )
            {
            // InternalIDSLParser.g:7456:1: ( Colon )
            // InternalIDSLParser.g:7457:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_4__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_4__2"
    // InternalIDSLParser.g:7466:1: rule__Barchart__Group_3_4__2 : rule__Barchart__Group_3_4__2__Impl ;
    public final void rule__Barchart__Group_3_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7470:1: ( rule__Barchart__Group_3_4__2__Impl )
            // InternalIDSLParser.g:7471:2: rule__Barchart__Group_3_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_4__2"


    // $ANTLR start "rule__Barchart__Group_3_4__2__Impl"
    // InternalIDSLParser.g:7477:1: rule__Barchart__Group_3_4__2__Impl : ( ( rule__Barchart__LegendstyleAssignment_3_4_2 ) ) ;
    public final void rule__Barchart__Group_3_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7481:1: ( ( ( rule__Barchart__LegendstyleAssignment_3_4_2 ) ) )
            // InternalIDSLParser.g:7482:1: ( ( rule__Barchart__LegendstyleAssignment_3_4_2 ) )
            {
            // InternalIDSLParser.g:7482:1: ( ( rule__Barchart__LegendstyleAssignment_3_4_2 ) )
            // InternalIDSLParser.g:7483:2: ( rule__Barchart__LegendstyleAssignment_3_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getLegendstyleAssignment_3_4_2()); 
            }
            // InternalIDSLParser.g:7484:2: ( rule__Barchart__LegendstyleAssignment_3_4_2 )
            // InternalIDSLParser.g:7484:3: rule__Barchart__LegendstyleAssignment_3_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__LegendstyleAssignment_3_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getLegendstyleAssignment_3_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_4__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_5__0"
    // InternalIDSLParser.g:7493:1: rule__Barchart__Group_3_5__0 : rule__Barchart__Group_3_5__0__Impl rule__Barchart__Group_3_5__1 ;
    public final void rule__Barchart__Group_3_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7497:1: ( rule__Barchart__Group_3_5__0__Impl rule__Barchart__Group_3_5__1 )
            // InternalIDSLParser.g:7498:2: rule__Barchart__Group_3_5__0__Impl rule__Barchart__Group_3_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_5__0"


    // $ANTLR start "rule__Barchart__Group_3_5__0__Impl"
    // InternalIDSLParser.g:7505:1: rule__Barchart__Group_3_5__0__Impl : ( Padding ) ;
    public final void rule__Barchart__Group_3_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7509:1: ( ( Padding ) )
            // InternalIDSLParser.g:7510:1: ( Padding )
            {
            // InternalIDSLParser.g:7510:1: ( Padding )
            // InternalIDSLParser.g:7511:2: Padding
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getPaddingKeyword_3_5_0()); 
            }
            match(input,Padding,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getPaddingKeyword_3_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_5__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_5__1"
    // InternalIDSLParser.g:7520:1: rule__Barchart__Group_3_5__1 : rule__Barchart__Group_3_5__1__Impl rule__Barchart__Group_3_5__2 ;
    public final void rule__Barchart__Group_3_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7524:1: ( rule__Barchart__Group_3_5__1__Impl rule__Barchart__Group_3_5__2 )
            // InternalIDSLParser.g:7525:2: rule__Barchart__Group_3_5__1__Impl rule__Barchart__Group_3_5__2
            {
            pushFollow(FOLLOW_17);
            rule__Barchart__Group_3_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_5__1"


    // $ANTLR start "rule__Barchart__Group_3_5__1__Impl"
    // InternalIDSLParser.g:7532:1: rule__Barchart__Group_3_5__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7536:1: ( ( Colon ) )
            // InternalIDSLParser.g:7537:1: ( Colon )
            {
            // InternalIDSLParser.g:7537:1: ( Colon )
            // InternalIDSLParser.g:7538:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_5__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_5__2"
    // InternalIDSLParser.g:7547:1: rule__Barchart__Group_3_5__2 : rule__Barchart__Group_3_5__2__Impl ;
    public final void rule__Barchart__Group_3_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7551:1: ( rule__Barchart__Group_3_5__2__Impl )
            // InternalIDSLParser.g:7552:2: rule__Barchart__Group_3_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_5__2"


    // $ANTLR start "rule__Barchart__Group_3_5__2__Impl"
    // InternalIDSLParser.g:7558:1: rule__Barchart__Group_3_5__2__Impl : ( ( rule__Barchart__PaddingAssignment_3_5_2 ) ) ;
    public final void rule__Barchart__Group_3_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7562:1: ( ( ( rule__Barchart__PaddingAssignment_3_5_2 ) ) )
            // InternalIDSLParser.g:7563:1: ( ( rule__Barchart__PaddingAssignment_3_5_2 ) )
            {
            // InternalIDSLParser.g:7563:1: ( ( rule__Barchart__PaddingAssignment_3_5_2 ) )
            // InternalIDSLParser.g:7564:2: ( rule__Barchart__PaddingAssignment_3_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getPaddingAssignment_3_5_2()); 
            }
            // InternalIDSLParser.g:7565:2: ( rule__Barchart__PaddingAssignment_3_5_2 )
            // InternalIDSLParser.g:7565:3: rule__Barchart__PaddingAssignment_3_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__PaddingAssignment_3_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getPaddingAssignment_3_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_5__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_6__0"
    // InternalIDSLParser.g:7574:1: rule__Barchart__Group_3_6__0 : rule__Barchart__Group_3_6__0__Impl rule__Barchart__Group_3_6__1 ;
    public final void rule__Barchart__Group_3_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7578:1: ( rule__Barchart__Group_3_6__0__Impl rule__Barchart__Group_3_6__1 )
            // InternalIDSLParser.g:7579:2: rule__Barchart__Group_3_6__0__Impl rule__Barchart__Group_3_6__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_6__0"


    // $ANTLR start "rule__Barchart__Group_3_6__0__Impl"
    // InternalIDSLParser.g:7586:1: rule__Barchart__Group_3_6__0__Impl : ( Position ) ;
    public final void rule__Barchart__Group_3_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7590:1: ( ( Position ) )
            // InternalIDSLParser.g:7591:1: ( Position )
            {
            // InternalIDSLParser.g:7591:1: ( Position )
            // InternalIDSLParser.g:7592:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getPositionKeyword_3_6_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getPositionKeyword_3_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_6__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_6__1"
    // InternalIDSLParser.g:7601:1: rule__Barchart__Group_3_6__1 : rule__Barchart__Group_3_6__1__Impl rule__Barchart__Group_3_6__2 ;
    public final void rule__Barchart__Group_3_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7605:1: ( rule__Barchart__Group_3_6__1__Impl rule__Barchart__Group_3_6__2 )
            // InternalIDSLParser.g:7606:2: rule__Barchart__Group_3_6__1__Impl rule__Barchart__Group_3_6__2
            {
            pushFollow(FOLLOW_8);
            rule__Barchart__Group_3_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_6__1"


    // $ANTLR start "rule__Barchart__Group_3_6__1__Impl"
    // InternalIDSLParser.g:7613:1: rule__Barchart__Group_3_6__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7617:1: ( ( Colon ) )
            // InternalIDSLParser.g:7618:1: ( Colon )
            {
            // InternalIDSLParser.g:7618:1: ( Colon )
            // InternalIDSLParser.g:7619:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_6_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_6__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_6__2"
    // InternalIDSLParser.g:7628:1: rule__Barchart__Group_3_6__2 : rule__Barchart__Group_3_6__2__Impl ;
    public final void rule__Barchart__Group_3_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7632:1: ( rule__Barchart__Group_3_6__2__Impl )
            // InternalIDSLParser.g:7633:2: rule__Barchart__Group_3_6__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_6__2"


    // $ANTLR start "rule__Barchart__Group_3_6__2__Impl"
    // InternalIDSLParser.g:7639:1: rule__Barchart__Group_3_6__2__Impl : ( ( rule__Barchart__PositionAssignment_3_6_2 ) ) ;
    public final void rule__Barchart__Group_3_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7643:1: ( ( ( rule__Barchart__PositionAssignment_3_6_2 ) ) )
            // InternalIDSLParser.g:7644:1: ( ( rule__Barchart__PositionAssignment_3_6_2 ) )
            {
            // InternalIDSLParser.g:7644:1: ( ( rule__Barchart__PositionAssignment_3_6_2 ) )
            // InternalIDSLParser.g:7645:2: ( rule__Barchart__PositionAssignment_3_6_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getPositionAssignment_3_6_2()); 
            }
            // InternalIDSLParser.g:7646:2: ( rule__Barchart__PositionAssignment_3_6_2 )
            // InternalIDSLParser.g:7646:3: rule__Barchart__PositionAssignment_3_6_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__PositionAssignment_3_6_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getPositionAssignment_3_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_6__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_7__0"
    // InternalIDSLParser.g:7655:1: rule__Barchart__Group_3_7__0 : rule__Barchart__Group_3_7__0__Impl rule__Barchart__Group_3_7__1 ;
    public final void rule__Barchart__Group_3_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7659:1: ( rule__Barchart__Group_3_7__0__Impl rule__Barchart__Group_3_7__1 )
            // InternalIDSLParser.g:7660:2: rule__Barchart__Group_3_7__0__Impl rule__Barchart__Group_3_7__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_7__0"


    // $ANTLR start "rule__Barchart__Group_3_7__0__Impl"
    // InternalIDSLParser.g:7667:1: rule__Barchart__Group_3_7__0__Impl : ( Showgrid ) ;
    public final void rule__Barchart__Group_3_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7671:1: ( ( Showgrid ) )
            // InternalIDSLParser.g:7672:1: ( Showgrid )
            {
            // InternalIDSLParser.g:7672:1: ( Showgrid )
            // InternalIDSLParser.g:7673:2: Showgrid
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowgridKeyword_3_7_0()); 
            }
            match(input,Showgrid,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowgridKeyword_3_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_7__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_7__1"
    // InternalIDSLParser.g:7682:1: rule__Barchart__Group_3_7__1 : rule__Barchart__Group_3_7__1__Impl rule__Barchart__Group_3_7__2 ;
    public final void rule__Barchart__Group_3_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7686:1: ( rule__Barchart__Group_3_7__1__Impl rule__Barchart__Group_3_7__2 )
            // InternalIDSLParser.g:7687:2: rule__Barchart__Group_3_7__1__Impl rule__Barchart__Group_3_7__2
            {
            pushFollow(FOLLOW_27);
            rule__Barchart__Group_3_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_7__1"


    // $ANTLR start "rule__Barchart__Group_3_7__1__Impl"
    // InternalIDSLParser.g:7694:1: rule__Barchart__Group_3_7__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7698:1: ( ( Colon ) )
            // InternalIDSLParser.g:7699:1: ( Colon )
            {
            // InternalIDSLParser.g:7699:1: ( Colon )
            // InternalIDSLParser.g:7700:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_7_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_7__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_7__2"
    // InternalIDSLParser.g:7709:1: rule__Barchart__Group_3_7__2 : rule__Barchart__Group_3_7__2__Impl ;
    public final void rule__Barchart__Group_3_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7713:1: ( rule__Barchart__Group_3_7__2__Impl )
            // InternalIDSLParser.g:7714:2: rule__Barchart__Group_3_7__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_7__2"


    // $ANTLR start "rule__Barchart__Group_3_7__2__Impl"
    // InternalIDSLParser.g:7720:1: rule__Barchart__Group_3_7__2__Impl : ( ( rule__Barchart__ShowgridAssignment_3_7_2 ) ) ;
    public final void rule__Barchart__Group_3_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7724:1: ( ( ( rule__Barchart__ShowgridAssignment_3_7_2 ) ) )
            // InternalIDSLParser.g:7725:1: ( ( rule__Barchart__ShowgridAssignment_3_7_2 ) )
            {
            // InternalIDSLParser.g:7725:1: ( ( rule__Barchart__ShowgridAssignment_3_7_2 ) )
            // InternalIDSLParser.g:7726:2: ( rule__Barchart__ShowgridAssignment_3_7_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowgridAssignment_3_7_2()); 
            }
            // InternalIDSLParser.g:7727:2: ( rule__Barchart__ShowgridAssignment_3_7_2 )
            // InternalIDSLParser.g:7727:3: rule__Barchart__ShowgridAssignment_3_7_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__ShowgridAssignment_3_7_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowgridAssignment_3_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_7__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_8__0"
    // InternalIDSLParser.g:7736:1: rule__Barchart__Group_3_8__0 : rule__Barchart__Group_3_8__0__Impl rule__Barchart__Group_3_8__1 ;
    public final void rule__Barchart__Group_3_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7740:1: ( rule__Barchart__Group_3_8__0__Impl rule__Barchart__Group_3_8__1 )
            // InternalIDSLParser.g:7741:2: rule__Barchart__Group_3_8__0__Impl rule__Barchart__Group_3_8__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_8__0"


    // $ANTLR start "rule__Barchart__Group_3_8__0__Impl"
    // InternalIDSLParser.g:7748:1: rule__Barchart__Group_3_8__0__Impl : ( Showlegend ) ;
    public final void rule__Barchart__Group_3_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7752:1: ( ( Showlegend ) )
            // InternalIDSLParser.g:7753:1: ( Showlegend )
            {
            // InternalIDSLParser.g:7753:1: ( Showlegend )
            // InternalIDSLParser.g:7754:2: Showlegend
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowlegendKeyword_3_8_0()); 
            }
            match(input,Showlegend,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowlegendKeyword_3_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_8__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_8__1"
    // InternalIDSLParser.g:7763:1: rule__Barchart__Group_3_8__1 : rule__Barchart__Group_3_8__1__Impl rule__Barchart__Group_3_8__2 ;
    public final void rule__Barchart__Group_3_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7767:1: ( rule__Barchart__Group_3_8__1__Impl rule__Barchart__Group_3_8__2 )
            // InternalIDSLParser.g:7768:2: rule__Barchart__Group_3_8__1__Impl rule__Barchart__Group_3_8__2
            {
            pushFollow(FOLLOW_27);
            rule__Barchart__Group_3_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_8__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_8__1"


    // $ANTLR start "rule__Barchart__Group_3_8__1__Impl"
    // InternalIDSLParser.g:7775:1: rule__Barchart__Group_3_8__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7779:1: ( ( Colon ) )
            // InternalIDSLParser.g:7780:1: ( Colon )
            {
            // InternalIDSLParser.g:7780:1: ( Colon )
            // InternalIDSLParser.g:7781:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_8_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_8__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_8__2"
    // InternalIDSLParser.g:7790:1: rule__Barchart__Group_3_8__2 : rule__Barchart__Group_3_8__2__Impl ;
    public final void rule__Barchart__Group_3_8__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7794:1: ( rule__Barchart__Group_3_8__2__Impl )
            // InternalIDSLParser.g:7795:2: rule__Barchart__Group_3_8__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_8__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_8__2"


    // $ANTLR start "rule__Barchart__Group_3_8__2__Impl"
    // InternalIDSLParser.g:7801:1: rule__Barchart__Group_3_8__2__Impl : ( ( rule__Barchart__ShowlegendAssignment_3_8_2 ) ) ;
    public final void rule__Barchart__Group_3_8__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7805:1: ( ( ( rule__Barchart__ShowlegendAssignment_3_8_2 ) ) )
            // InternalIDSLParser.g:7806:1: ( ( rule__Barchart__ShowlegendAssignment_3_8_2 ) )
            {
            // InternalIDSLParser.g:7806:1: ( ( rule__Barchart__ShowlegendAssignment_3_8_2 ) )
            // InternalIDSLParser.g:7807:2: ( rule__Barchart__ShowlegendAssignment_3_8_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowlegendAssignment_3_8_2()); 
            }
            // InternalIDSLParser.g:7808:2: ( rule__Barchart__ShowlegendAssignment_3_8_2 )
            // InternalIDSLParser.g:7808:3: rule__Barchart__ShowlegendAssignment_3_8_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__ShowlegendAssignment_3_8_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowlegendAssignment_3_8_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_8__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_9__0"
    // InternalIDSLParser.g:7817:1: rule__Barchart__Group_3_9__0 : rule__Barchart__Group_3_9__0__Impl rule__Barchart__Group_3_9__1 ;
    public final void rule__Barchart__Group_3_9__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7821:1: ( rule__Barchart__Group_3_9__0__Impl rule__Barchart__Group_3_9__1 )
            // InternalIDSLParser.g:7822:2: rule__Barchart__Group_3_9__0__Impl rule__Barchart__Group_3_9__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_9__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_9__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_9__0"


    // $ANTLR start "rule__Barchart__Group_3_9__0__Impl"
    // InternalIDSLParser.g:7829:1: rule__Barchart__Group_3_9__0__Impl : ( Showtitle ) ;
    public final void rule__Barchart__Group_3_9__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7833:1: ( ( Showtitle ) )
            // InternalIDSLParser.g:7834:1: ( Showtitle )
            {
            // InternalIDSLParser.g:7834:1: ( Showtitle )
            // InternalIDSLParser.g:7835:2: Showtitle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowtitleKeyword_3_9_0()); 
            }
            match(input,Showtitle,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowtitleKeyword_3_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_9__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_9__1"
    // InternalIDSLParser.g:7844:1: rule__Barchart__Group_3_9__1 : rule__Barchart__Group_3_9__1__Impl rule__Barchart__Group_3_9__2 ;
    public final void rule__Barchart__Group_3_9__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7848:1: ( rule__Barchart__Group_3_9__1__Impl rule__Barchart__Group_3_9__2 )
            // InternalIDSLParser.g:7849:2: rule__Barchart__Group_3_9__1__Impl rule__Barchart__Group_3_9__2
            {
            pushFollow(FOLLOW_27);
            rule__Barchart__Group_3_9__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_9__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_9__1"


    // $ANTLR start "rule__Barchart__Group_3_9__1__Impl"
    // InternalIDSLParser.g:7856:1: rule__Barchart__Group_3_9__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_9__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7860:1: ( ( Colon ) )
            // InternalIDSLParser.g:7861:1: ( Colon )
            {
            // InternalIDSLParser.g:7861:1: ( Colon )
            // InternalIDSLParser.g:7862:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_9_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_9_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_9__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_9__2"
    // InternalIDSLParser.g:7871:1: rule__Barchart__Group_3_9__2 : rule__Barchart__Group_3_9__2__Impl ;
    public final void rule__Barchart__Group_3_9__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7875:1: ( rule__Barchart__Group_3_9__2__Impl )
            // InternalIDSLParser.g:7876:2: rule__Barchart__Group_3_9__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_9__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_9__2"


    // $ANTLR start "rule__Barchart__Group_3_9__2__Impl"
    // InternalIDSLParser.g:7882:1: rule__Barchart__Group_3_9__2__Impl : ( ( rule__Barchart__ShowtitleAssignment_3_9_2 ) ) ;
    public final void rule__Barchart__Group_3_9__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7886:1: ( ( ( rule__Barchart__ShowtitleAssignment_3_9_2 ) ) )
            // InternalIDSLParser.g:7887:1: ( ( rule__Barchart__ShowtitleAssignment_3_9_2 ) )
            {
            // InternalIDSLParser.g:7887:1: ( ( rule__Barchart__ShowtitleAssignment_3_9_2 ) )
            // InternalIDSLParser.g:7888:2: ( rule__Barchart__ShowtitleAssignment_3_9_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowtitleAssignment_3_9_2()); 
            }
            // InternalIDSLParser.g:7889:2: ( rule__Barchart__ShowtitleAssignment_3_9_2 )
            // InternalIDSLParser.g:7889:3: rule__Barchart__ShowtitleAssignment_3_9_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__ShowtitleAssignment_3_9_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowtitleAssignment_3_9_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_9__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_10__0"
    // InternalIDSLParser.g:7898:1: rule__Barchart__Group_3_10__0 : rule__Barchart__Group_3_10__0__Impl rule__Barchart__Group_3_10__1 ;
    public final void rule__Barchart__Group_3_10__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7902:1: ( rule__Barchart__Group_3_10__0__Impl rule__Barchart__Group_3_10__1 )
            // InternalIDSLParser.g:7903:2: rule__Barchart__Group_3_10__0__Impl rule__Barchart__Group_3_10__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_10__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_10__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_10__0"


    // $ANTLR start "rule__Barchart__Group_3_10__0__Impl"
    // InternalIDSLParser.g:7910:1: rule__Barchart__Group_3_10__0__Impl : ( Size ) ;
    public final void rule__Barchart__Group_3_10__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7914:1: ( ( Size ) )
            // InternalIDSLParser.g:7915:1: ( Size )
            {
            // InternalIDSLParser.g:7915:1: ( Size )
            // InternalIDSLParser.g:7916:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getSizeKeyword_3_10_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getSizeKeyword_3_10_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_10__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_10__1"
    // InternalIDSLParser.g:7925:1: rule__Barchart__Group_3_10__1 : rule__Barchart__Group_3_10__1__Impl rule__Barchart__Group_3_10__2 ;
    public final void rule__Barchart__Group_3_10__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7929:1: ( rule__Barchart__Group_3_10__1__Impl rule__Barchart__Group_3_10__2 )
            // InternalIDSLParser.g:7930:2: rule__Barchart__Group_3_10__1__Impl rule__Barchart__Group_3_10__2
            {
            pushFollow(FOLLOW_8);
            rule__Barchart__Group_3_10__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_10__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_10__1"


    // $ANTLR start "rule__Barchart__Group_3_10__1__Impl"
    // InternalIDSLParser.g:7937:1: rule__Barchart__Group_3_10__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_10__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7941:1: ( ( Colon ) )
            // InternalIDSLParser.g:7942:1: ( Colon )
            {
            // InternalIDSLParser.g:7942:1: ( Colon )
            // InternalIDSLParser.g:7943:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_10_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_10_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_10__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_10__2"
    // InternalIDSLParser.g:7952:1: rule__Barchart__Group_3_10__2 : rule__Barchart__Group_3_10__2__Impl ;
    public final void rule__Barchart__Group_3_10__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7956:1: ( rule__Barchart__Group_3_10__2__Impl )
            // InternalIDSLParser.g:7957:2: rule__Barchart__Group_3_10__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_10__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_10__2"


    // $ANTLR start "rule__Barchart__Group_3_10__2__Impl"
    // InternalIDSLParser.g:7963:1: rule__Barchart__Group_3_10__2__Impl : ( ( rule__Barchart__SizeAssignment_3_10_2 ) ) ;
    public final void rule__Barchart__Group_3_10__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7967:1: ( ( ( rule__Barchart__SizeAssignment_3_10_2 ) ) )
            // InternalIDSLParser.g:7968:1: ( ( rule__Barchart__SizeAssignment_3_10_2 ) )
            {
            // InternalIDSLParser.g:7968:1: ( ( rule__Barchart__SizeAssignment_3_10_2 ) )
            // InternalIDSLParser.g:7969:2: ( rule__Barchart__SizeAssignment_3_10_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getSizeAssignment_3_10_2()); 
            }
            // InternalIDSLParser.g:7970:2: ( rule__Barchart__SizeAssignment_3_10_2 )
            // InternalIDSLParser.g:7970:3: rule__Barchart__SizeAssignment_3_10_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__SizeAssignment_3_10_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getSizeAssignment_3_10_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_10__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_11__0"
    // InternalIDSLParser.g:7979:1: rule__Barchart__Group_3_11__0 : rule__Barchart__Group_3_11__0__Impl rule__Barchart__Group_3_11__1 ;
    public final void rule__Barchart__Group_3_11__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7983:1: ( rule__Barchart__Group_3_11__0__Impl rule__Barchart__Group_3_11__1 )
            // InternalIDSLParser.g:7984:2: rule__Barchart__Group_3_11__0__Impl rule__Barchart__Group_3_11__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_11__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_11__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_11__0"


    // $ANTLR start "rule__Barchart__Group_3_11__0__Impl"
    // InternalIDSLParser.g:7991:1: rule__Barchart__Group_3_11__0__Impl : ( Title ) ;
    public final void rule__Barchart__Group_3_11__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:7995:1: ( ( Title ) )
            // InternalIDSLParser.g:7996:1: ( Title )
            {
            // InternalIDSLParser.g:7996:1: ( Title )
            // InternalIDSLParser.g:7997:2: Title
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getTitleKeyword_3_11_0()); 
            }
            match(input,Title,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getTitleKeyword_3_11_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_11__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_11__1"
    // InternalIDSLParser.g:8006:1: rule__Barchart__Group_3_11__1 : rule__Barchart__Group_3_11__1__Impl rule__Barchart__Group_3_11__2 ;
    public final void rule__Barchart__Group_3_11__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8010:1: ( rule__Barchart__Group_3_11__1__Impl rule__Barchart__Group_3_11__2 )
            // InternalIDSLParser.g:8011:2: rule__Barchart__Group_3_11__1__Impl rule__Barchart__Group_3_11__2
            {
            pushFollow(FOLLOW_7);
            rule__Barchart__Group_3_11__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_11__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_11__1"


    // $ANTLR start "rule__Barchart__Group_3_11__1__Impl"
    // InternalIDSLParser.g:8018:1: rule__Barchart__Group_3_11__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_11__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8022:1: ( ( Colon ) )
            // InternalIDSLParser.g:8023:1: ( Colon )
            {
            // InternalIDSLParser.g:8023:1: ( Colon )
            // InternalIDSLParser.g:8024:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_11_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_11_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_11__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_11__2"
    // InternalIDSLParser.g:8033:1: rule__Barchart__Group_3_11__2 : rule__Barchart__Group_3_11__2__Impl ;
    public final void rule__Barchart__Group_3_11__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8037:1: ( rule__Barchart__Group_3_11__2__Impl )
            // InternalIDSLParser.g:8038:2: rule__Barchart__Group_3_11__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_11__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_11__2"


    // $ANTLR start "rule__Barchart__Group_3_11__2__Impl"
    // InternalIDSLParser.g:8044:1: rule__Barchart__Group_3_11__2__Impl : ( ( rule__Barchart__TitleAssignment_3_11_2 ) ) ;
    public final void rule__Barchart__Group_3_11__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8048:1: ( ( ( rule__Barchart__TitleAssignment_3_11_2 ) ) )
            // InternalIDSLParser.g:8049:1: ( ( rule__Barchart__TitleAssignment_3_11_2 ) )
            {
            // InternalIDSLParser.g:8049:1: ( ( rule__Barchart__TitleAssignment_3_11_2 ) )
            // InternalIDSLParser.g:8050:2: ( rule__Barchart__TitleAssignment_3_11_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getTitleAssignment_3_11_2()); 
            }
            // InternalIDSLParser.g:8051:2: ( rule__Barchart__TitleAssignment_3_11_2 )
            // InternalIDSLParser.g:8051:3: rule__Barchart__TitleAssignment_3_11_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__TitleAssignment_3_11_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getTitleAssignment_3_11_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_11__2__Impl"


    // $ANTLR start "rule__Barchart__Group_3_12__0"
    // InternalIDSLParser.g:8060:1: rule__Barchart__Group_3_12__0 : rule__Barchart__Group_3_12__0__Impl rule__Barchart__Group_3_12__1 ;
    public final void rule__Barchart__Group_3_12__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8064:1: ( rule__Barchart__Group_3_12__0__Impl rule__Barchart__Group_3_12__1 )
            // InternalIDSLParser.g:8065:2: rule__Barchart__Group_3_12__0__Impl rule__Barchart__Group_3_12__1
            {
            pushFollow(FOLLOW_3);
            rule__Barchart__Group_3_12__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_12__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_12__0"


    // $ANTLR start "rule__Barchart__Group_3_12__0__Impl"
    // InternalIDSLParser.g:8072:1: rule__Barchart__Group_3_12__0__Impl : ( Type ) ;
    public final void rule__Barchart__Group_3_12__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8076:1: ( ( Type ) )
            // InternalIDSLParser.g:8077:1: ( Type )
            {
            // InternalIDSLParser.g:8077:1: ( Type )
            // InternalIDSLParser.g:8078:2: Type
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getTypeKeyword_3_12_0()); 
            }
            match(input,Type,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getTypeKeyword_3_12_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_12__0__Impl"


    // $ANTLR start "rule__Barchart__Group_3_12__1"
    // InternalIDSLParser.g:8087:1: rule__Barchart__Group_3_12__1 : rule__Barchart__Group_3_12__1__Impl rule__Barchart__Group_3_12__2 ;
    public final void rule__Barchart__Group_3_12__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8091:1: ( rule__Barchart__Group_3_12__1__Impl rule__Barchart__Group_3_12__2 )
            // InternalIDSLParser.g:8092:2: rule__Barchart__Group_3_12__1__Impl rule__Barchart__Group_3_12__2
            {
            pushFollow(FOLLOW_30);
            rule__Barchart__Group_3_12__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_12__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_12__1"


    // $ANTLR start "rule__Barchart__Group_3_12__1__Impl"
    // InternalIDSLParser.g:8099:1: rule__Barchart__Group_3_12__1__Impl : ( Colon ) ;
    public final void rule__Barchart__Group_3_12__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8103:1: ( ( Colon ) )
            // InternalIDSLParser.g:8104:1: ( Colon )
            {
            // InternalIDSLParser.g:8104:1: ( Colon )
            // InternalIDSLParser.g:8105:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColonKeyword_3_12_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColonKeyword_3_12_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_12__1__Impl"


    // $ANTLR start "rule__Barchart__Group_3_12__2"
    // InternalIDSLParser.g:8114:1: rule__Barchart__Group_3_12__2 : rule__Barchart__Group_3_12__2__Impl ;
    public final void rule__Barchart__Group_3_12__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8118:1: ( rule__Barchart__Group_3_12__2__Impl )
            // InternalIDSLParser.g:8119:2: rule__Barchart__Group_3_12__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__Group_3_12__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_12__2"


    // $ANTLR start "rule__Barchart__Group_3_12__2__Impl"
    // InternalIDSLParser.g:8125:1: rule__Barchart__Group_3_12__2__Impl : ( ( rule__Barchart__TypeAssignment_3_12_2 ) ) ;
    public final void rule__Barchart__Group_3_12__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8129:1: ( ( ( rule__Barchart__TypeAssignment_3_12_2 ) ) )
            // InternalIDSLParser.g:8130:1: ( ( rule__Barchart__TypeAssignment_3_12_2 ) )
            {
            // InternalIDSLParser.g:8130:1: ( ( rule__Barchart__TypeAssignment_3_12_2 ) )
            // InternalIDSLParser.g:8131:2: ( rule__Barchart__TypeAssignment_3_12_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getTypeAssignment_3_12_2()); 
            }
            // InternalIDSLParser.g:8132:2: ( rule__Barchart__TypeAssignment_3_12_2 )
            // InternalIDSLParser.g:8132:3: rule__Barchart__TypeAssignment_3_12_2
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__TypeAssignment_3_12_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getTypeAssignment_3_12_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__Group_3_12__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group__0"
    // InternalIDSLParser.g:8141:1: rule__Picturegraph__Group__0 : rule__Picturegraph__Group__0__Impl rule__Picturegraph__Group__1 ;
    public final void rule__Picturegraph__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8145:1: ( rule__Picturegraph__Group__0__Impl rule__Picturegraph__Group__1 )
            // InternalIDSLParser.g:8146:2: rule__Picturegraph__Group__0__Impl rule__Picturegraph__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__0"


    // $ANTLR start "rule__Picturegraph__Group__0__Impl"
    // InternalIDSLParser.g:8153:1: rule__Picturegraph__Group__0__Impl : ( ( rule__Picturegraph__NameAssignment_0 ) ) ;
    public final void rule__Picturegraph__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8157:1: ( ( ( rule__Picturegraph__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:8158:1: ( ( rule__Picturegraph__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:8158:1: ( ( rule__Picturegraph__NameAssignment_0 ) )
            // InternalIDSLParser.g:8159:2: ( rule__Picturegraph__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:8160:2: ( rule__Picturegraph__NameAssignment_0 )
            // InternalIDSLParser.g:8160:3: rule__Picturegraph__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group__1"
    // InternalIDSLParser.g:8168:1: rule__Picturegraph__Group__1 : rule__Picturegraph__Group__1__Impl rule__Picturegraph__Group__2 ;
    public final void rule__Picturegraph__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8172:1: ( rule__Picturegraph__Group__1__Impl rule__Picturegraph__Group__2 )
            // InternalIDSLParser.g:8173:2: rule__Picturegraph__Group__1__Impl rule__Picturegraph__Group__2
            {
            pushFollow(FOLLOW_12);
            rule__Picturegraph__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__1"


    // $ANTLR start "rule__Picturegraph__Group__1__Impl"
    // InternalIDSLParser.g:8180:1: rule__Picturegraph__Group__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8184:1: ( ( Colon ) )
            // InternalIDSLParser.g:8185:1: ( Colon )
            {
            // InternalIDSLParser.g:8185:1: ( Colon )
            // InternalIDSLParser.g:8186:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group__2"
    // InternalIDSLParser.g:8195:1: rule__Picturegraph__Group__2 : rule__Picturegraph__Group__2__Impl rule__Picturegraph__Group__3 ;
    public final void rule__Picturegraph__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8199:1: ( rule__Picturegraph__Group__2__Impl rule__Picturegraph__Group__3 )
            // InternalIDSLParser.g:8200:2: rule__Picturegraph__Group__2__Impl rule__Picturegraph__Group__3
            {
            pushFollow(FOLLOW_31);
            rule__Picturegraph__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__2"


    // $ANTLR start "rule__Picturegraph__Group__2__Impl"
    // InternalIDSLParser.g:8207:1: rule__Picturegraph__Group__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Picturegraph__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8211:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:8212:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:8212:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:8213:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getBEGINTerminalRuleCall_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getBEGINTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group__3"
    // InternalIDSLParser.g:8222:1: rule__Picturegraph__Group__3 : rule__Picturegraph__Group__3__Impl rule__Picturegraph__Group__4 ;
    public final void rule__Picturegraph__Group__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8226:1: ( rule__Picturegraph__Group__3__Impl rule__Picturegraph__Group__4 )
            // InternalIDSLParser.g:8227:2: rule__Picturegraph__Group__3__Impl rule__Picturegraph__Group__4
            {
            pushFollow(FOLLOW_10);
            rule__Picturegraph__Group__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__3"


    // $ANTLR start "rule__Picturegraph__Group__3__Impl"
    // InternalIDSLParser.g:8234:1: rule__Picturegraph__Group__3__Impl : ( ( rule__Picturegraph__UnorderedGroup_3 ) ) ;
    public final void rule__Picturegraph__Group__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8238:1: ( ( ( rule__Picturegraph__UnorderedGroup_3 ) ) )
            // InternalIDSLParser.g:8239:1: ( ( rule__Picturegraph__UnorderedGroup_3 ) )
            {
            // InternalIDSLParser.g:8239:1: ( ( rule__Picturegraph__UnorderedGroup_3 ) )
            // InternalIDSLParser.g:8240:2: ( rule__Picturegraph__UnorderedGroup_3 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3()); 
            }
            // InternalIDSLParser.g:8241:2: ( rule__Picturegraph__UnorderedGroup_3 )
            // InternalIDSLParser.g:8241:3: rule__Picturegraph__UnorderedGroup_3
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__UnorderedGroup_3();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__3__Impl"


    // $ANTLR start "rule__Picturegraph__Group__4"
    // InternalIDSLParser.g:8249:1: rule__Picturegraph__Group__4 : rule__Picturegraph__Group__4__Impl ;
    public final void rule__Picturegraph__Group__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8253:1: ( rule__Picturegraph__Group__4__Impl )
            // InternalIDSLParser.g:8254:2: rule__Picturegraph__Group__4__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group__4__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__4"


    // $ANTLR start "rule__Picturegraph__Group__4__Impl"
    // InternalIDSLParser.g:8260:1: rule__Picturegraph__Group__4__Impl : ( RULE_END ) ;
    public final void rule__Picturegraph__Group__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8264:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:8265:1: ( RULE_END )
            {
            // InternalIDSLParser.g:8265:1: ( RULE_END )
            // InternalIDSLParser.g:8266:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getENDTerminalRuleCall_4()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getENDTerminalRuleCall_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group__4__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_0__0"
    // InternalIDSLParser.g:8276:1: rule__Picturegraph__Group_3_0__0 : rule__Picturegraph__Group_3_0__0__Impl rule__Picturegraph__Group_3_0__1 ;
    public final void rule__Picturegraph__Group_3_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8280:1: ( rule__Picturegraph__Group_3_0__0__Impl rule__Picturegraph__Group_3_0__1 )
            // InternalIDSLParser.g:8281:2: rule__Picturegraph__Group_3_0__0__Impl rule__Picturegraph__Group_3_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_0__0"


    // $ANTLR start "rule__Picturegraph__Group_3_0__0__Impl"
    // InternalIDSLParser.g:8288:1: rule__Picturegraph__Group_3_0__0__Impl : ( Bgcolor ) ;
    public final void rule__Picturegraph__Group_3_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8292:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:8293:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:8293:1: ( Bgcolor )
            // InternalIDSLParser.g:8294:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getBgcolorKeyword_3_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getBgcolorKeyword_3_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_0__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_0__1"
    // InternalIDSLParser.g:8303:1: rule__Picturegraph__Group_3_0__1 : rule__Picturegraph__Group_3_0__1__Impl rule__Picturegraph__Group_3_0__2 ;
    public final void rule__Picturegraph__Group_3_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8307:1: ( rule__Picturegraph__Group_3_0__1__Impl rule__Picturegraph__Group_3_0__2 )
            // InternalIDSLParser.g:8308:2: rule__Picturegraph__Group_3_0__1__Impl rule__Picturegraph__Group_3_0__2
            {
            pushFollow(FOLLOW_5);
            rule__Picturegraph__Group_3_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_0__1"


    // $ANTLR start "rule__Picturegraph__Group_3_0__1__Impl"
    // InternalIDSLParser.g:8315:1: rule__Picturegraph__Group_3_0__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8319:1: ( ( Colon ) )
            // InternalIDSLParser.g:8320:1: ( Colon )
            {
            // InternalIDSLParser.g:8320:1: ( Colon )
            // InternalIDSLParser.g:8321:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_0__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_0__2"
    // InternalIDSLParser.g:8330:1: rule__Picturegraph__Group_3_0__2 : rule__Picturegraph__Group_3_0__2__Impl ;
    public final void rule__Picturegraph__Group_3_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8334:1: ( rule__Picturegraph__Group_3_0__2__Impl )
            // InternalIDSLParser.g:8335:2: rule__Picturegraph__Group_3_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_0__2"


    // $ANTLR start "rule__Picturegraph__Group_3_0__2__Impl"
    // InternalIDSLParser.g:8341:1: rule__Picturegraph__Group_3_0__2__Impl : ( ( rule__Picturegraph__ColorAssignment_3_0_2 ) ) ;
    public final void rule__Picturegraph__Group_3_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8345:1: ( ( ( rule__Picturegraph__ColorAssignment_3_0_2 ) ) )
            // InternalIDSLParser.g:8346:1: ( ( rule__Picturegraph__ColorAssignment_3_0_2 ) )
            {
            // InternalIDSLParser.g:8346:1: ( ( rule__Picturegraph__ColorAssignment_3_0_2 ) )
            // InternalIDSLParser.g:8347:2: ( rule__Picturegraph__ColorAssignment_3_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColorAssignment_3_0_2()); 
            }
            // InternalIDSLParser.g:8348:2: ( rule__Picturegraph__ColorAssignment_3_0_2 )
            // InternalIDSLParser.g:8348:3: rule__Picturegraph__ColorAssignment_3_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__ColorAssignment_3_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColorAssignment_3_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_0__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_1__0"
    // InternalIDSLParser.g:8357:1: rule__Picturegraph__Group_3_1__0 : rule__Picturegraph__Group_3_1__0__Impl rule__Picturegraph__Group_3_1__1 ;
    public final void rule__Picturegraph__Group_3_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8361:1: ( rule__Picturegraph__Group_3_1__0__Impl rule__Picturegraph__Group_3_1__1 )
            // InternalIDSLParser.g:8362:2: rule__Picturegraph__Group_3_1__0__Impl rule__Picturegraph__Group_3_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_1__0"


    // $ANTLR start "rule__Picturegraph__Group_3_1__0__Impl"
    // InternalIDSLParser.g:8369:1: rule__Picturegraph__Group_3_1__0__Impl : ( Colors ) ;
    public final void rule__Picturegraph__Group_3_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8373:1: ( ( Colors ) )
            // InternalIDSLParser.g:8374:1: ( Colors )
            {
            // InternalIDSLParser.g:8374:1: ( Colors )
            // InternalIDSLParser.g:8375:2: Colors
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColorsKeyword_3_1_0()); 
            }
            match(input,Colors,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColorsKeyword_3_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_1__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_1__1"
    // InternalIDSLParser.g:8384:1: rule__Picturegraph__Group_3_1__1 : rule__Picturegraph__Group_3_1__1__Impl rule__Picturegraph__Group_3_1__2 ;
    public final void rule__Picturegraph__Group_3_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8388:1: ( rule__Picturegraph__Group_3_1__1__Impl rule__Picturegraph__Group_3_1__2 )
            // InternalIDSLParser.g:8389:2: rule__Picturegraph__Group_3_1__1__Impl rule__Picturegraph__Group_3_1__2
            {
            pushFollow(FOLLOW_23);
            rule__Picturegraph__Group_3_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_1__1"


    // $ANTLR start "rule__Picturegraph__Group_3_1__1__Impl"
    // InternalIDSLParser.g:8396:1: rule__Picturegraph__Group_3_1__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8400:1: ( ( Colon ) )
            // InternalIDSLParser.g:8401:1: ( Colon )
            {
            // InternalIDSLParser.g:8401:1: ( Colon )
            // InternalIDSLParser.g:8402:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_1__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_1__2"
    // InternalIDSLParser.g:8411:1: rule__Picturegraph__Group_3_1__2 : rule__Picturegraph__Group_3_1__2__Impl ;
    public final void rule__Picturegraph__Group_3_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8415:1: ( rule__Picturegraph__Group_3_1__2__Impl )
            // InternalIDSLParser.g:8416:2: rule__Picturegraph__Group_3_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_1__2"


    // $ANTLR start "rule__Picturegraph__Group_3_1__2__Impl"
    // InternalIDSLParser.g:8422:1: rule__Picturegraph__Group_3_1__2__Impl : ( ( rule__Picturegraph__ColorsAssignment_3_1_2 ) ) ;
    public final void rule__Picturegraph__Group_3_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8426:1: ( ( ( rule__Picturegraph__ColorsAssignment_3_1_2 ) ) )
            // InternalIDSLParser.g:8427:1: ( ( rule__Picturegraph__ColorsAssignment_3_1_2 ) )
            {
            // InternalIDSLParser.g:8427:1: ( ( rule__Picturegraph__ColorsAssignment_3_1_2 ) )
            // InternalIDSLParser.g:8428:2: ( rule__Picturegraph__ColorsAssignment_3_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColorsAssignment_3_1_2()); 
            }
            // InternalIDSLParser.g:8429:2: ( rule__Picturegraph__ColorsAssignment_3_1_2 )
            // InternalIDSLParser.g:8429:3: rule__Picturegraph__ColorsAssignment_3_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__ColorsAssignment_3_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColorsAssignment_3_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_1__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_2__0"
    // InternalIDSLParser.g:8438:1: rule__Picturegraph__Group_3_2__0 : rule__Picturegraph__Group_3_2__0__Impl rule__Picturegraph__Group_3_2__1 ;
    public final void rule__Picturegraph__Group_3_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8442:1: ( rule__Picturegraph__Group_3_2__0__Impl rule__Picturegraph__Group_3_2__1 )
            // InternalIDSLParser.g:8443:2: rule__Picturegraph__Group_3_2__0__Impl rule__Picturegraph__Group_3_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__0"


    // $ANTLR start "rule__Picturegraph__Group_3_2__0__Impl"
    // InternalIDSLParser.g:8450:1: rule__Picturegraph__Group_3_2__0__Impl : ( Data ) ;
    public final void rule__Picturegraph__Group_3_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8454:1: ( ( Data ) )
            // InternalIDSLParser.g:8455:1: ( Data )
            {
            // InternalIDSLParser.g:8455:1: ( Data )
            // InternalIDSLParser.g:8456:2: Data
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getDataKeyword_3_2_0()); 
            }
            match(input,Data,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getDataKeyword_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_2__1"
    // InternalIDSLParser.g:8465:1: rule__Picturegraph__Group_3_2__1 : rule__Picturegraph__Group_3_2__1__Impl rule__Picturegraph__Group_3_2__2 ;
    public final void rule__Picturegraph__Group_3_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8469:1: ( rule__Picturegraph__Group_3_2__1__Impl rule__Picturegraph__Group_3_2__2 )
            // InternalIDSLParser.g:8470:2: rule__Picturegraph__Group_3_2__1__Impl rule__Picturegraph__Group_3_2__2
            {
            pushFollow(FOLLOW_12);
            rule__Picturegraph__Group_3_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__1"


    // $ANTLR start "rule__Picturegraph__Group_3_2__1__Impl"
    // InternalIDSLParser.g:8477:1: rule__Picturegraph__Group_3_2__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8481:1: ( ( Colon ) )
            // InternalIDSLParser.g:8482:1: ( Colon )
            {
            // InternalIDSLParser.g:8482:1: ( Colon )
            // InternalIDSLParser.g:8483:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_2__2"
    // InternalIDSLParser.g:8492:1: rule__Picturegraph__Group_3_2__2 : rule__Picturegraph__Group_3_2__2__Impl rule__Picturegraph__Group_3_2__3 ;
    public final void rule__Picturegraph__Group_3_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8496:1: ( rule__Picturegraph__Group_3_2__2__Impl rule__Picturegraph__Group_3_2__3 )
            // InternalIDSLParser.g:8497:2: rule__Picturegraph__Group_3_2__2__Impl rule__Picturegraph__Group_3_2__3
            {
            pushFollow(FOLLOW_7);
            rule__Picturegraph__Group_3_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_2__3();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__2"


    // $ANTLR start "rule__Picturegraph__Group_3_2__2__Impl"
    // InternalIDSLParser.g:8504:1: rule__Picturegraph__Group_3_2__2__Impl : ( RULE_BEGIN ) ;
    public final void rule__Picturegraph__Group_3_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8508:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:8509:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:8509:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:8510:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getBEGINTerminalRuleCall_3_2_2()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getBEGINTerminalRuleCall_3_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_2__3"
    // InternalIDSLParser.g:8519:1: rule__Picturegraph__Group_3_2__3 : rule__Picturegraph__Group_3_2__3__Impl rule__Picturegraph__Group_3_2__4 ;
    public final void rule__Picturegraph__Group_3_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8523:1: ( rule__Picturegraph__Group_3_2__3__Impl rule__Picturegraph__Group_3_2__4 )
            // InternalIDSLParser.g:8524:2: rule__Picturegraph__Group_3_2__3__Impl rule__Picturegraph__Group_3_2__4
            {
            pushFollow(FOLLOW_24);
            rule__Picturegraph__Group_3_2__3__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_2__4();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__3"


    // $ANTLR start "rule__Picturegraph__Group_3_2__3__Impl"
    // InternalIDSLParser.g:8531:1: rule__Picturegraph__Group_3_2__3__Impl : ( ruleChartData ) ;
    public final void rule__Picturegraph__Group_3_2__3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8535:1: ( ( ruleChartData ) )
            // InternalIDSLParser.g:8536:1: ( ruleChartData )
            {
            // InternalIDSLParser.g:8536:1: ( ruleChartData )
            // InternalIDSLParser.g:8537:2: ruleChartData
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getChartDataParserRuleCall_3_2_3()); 
            }
            pushFollow(FOLLOW_2);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getChartDataParserRuleCall_3_2_3()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__3__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_2__4"
    // InternalIDSLParser.g:8546:1: rule__Picturegraph__Group_3_2__4 : rule__Picturegraph__Group_3_2__4__Impl rule__Picturegraph__Group_3_2__5 ;
    public final void rule__Picturegraph__Group_3_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8550:1: ( rule__Picturegraph__Group_3_2__4__Impl rule__Picturegraph__Group_3_2__5 )
            // InternalIDSLParser.g:8551:2: rule__Picturegraph__Group_3_2__4__Impl rule__Picturegraph__Group_3_2__5
            {
            pushFollow(FOLLOW_24);
            rule__Picturegraph__Group_3_2__4__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_2__5();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__4"


    // $ANTLR start "rule__Picturegraph__Group_3_2__4__Impl"
    // InternalIDSLParser.g:8558:1: rule__Picturegraph__Group_3_2__4__Impl : ( ( rule__Picturegraph__PicturegraphdataAssignment_3_2_4 )* ) ;
    public final void rule__Picturegraph__Group_3_2__4__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8562:1: ( ( ( rule__Picturegraph__PicturegraphdataAssignment_3_2_4 )* ) )
            // InternalIDSLParser.g:8563:1: ( ( rule__Picturegraph__PicturegraphdataAssignment_3_2_4 )* )
            {
            // InternalIDSLParser.g:8563:1: ( ( rule__Picturegraph__PicturegraphdataAssignment_3_2_4 )* )
            // InternalIDSLParser.g:8564:2: ( rule__Picturegraph__PicturegraphdataAssignment_3_2_4 )*
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPicturegraphdataAssignment_3_2_4()); 
            }
            // InternalIDSLParser.g:8565:2: ( rule__Picturegraph__PicturegraphdataAssignment_3_2_4 )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==RULE_STRING) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // InternalIDSLParser.g:8565:3: rule__Picturegraph__PicturegraphdataAssignment_3_2_4
            	    {
            	    pushFollow(FOLLOW_25);
            	    rule__Picturegraph__PicturegraphdataAssignment_3_2_4();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPicturegraphdataAssignment_3_2_4()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__4__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_2__5"
    // InternalIDSLParser.g:8573:1: rule__Picturegraph__Group_3_2__5 : rule__Picturegraph__Group_3_2__5__Impl ;
    public final void rule__Picturegraph__Group_3_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8577:1: ( rule__Picturegraph__Group_3_2__5__Impl )
            // InternalIDSLParser.g:8578:2: rule__Picturegraph__Group_3_2__5__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_2__5__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__5"


    // $ANTLR start "rule__Picturegraph__Group_3_2__5__Impl"
    // InternalIDSLParser.g:8584:1: rule__Picturegraph__Group_3_2__5__Impl : ( RULE_END ) ;
    public final void rule__Picturegraph__Group_3_2__5__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8588:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:8589:1: ( RULE_END )
            {
            // InternalIDSLParser.g:8589:1: ( RULE_END )
            // InternalIDSLParser.g:8590:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getENDTerminalRuleCall_3_2_5()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getENDTerminalRuleCall_3_2_5()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_2__5__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_3__0"
    // InternalIDSLParser.g:8600:1: rule__Picturegraph__Group_3_3__0 : rule__Picturegraph__Group_3_3__0__Impl rule__Picturegraph__Group_3_3__1 ;
    public final void rule__Picturegraph__Group_3_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8604:1: ( rule__Picturegraph__Group_3_3__0__Impl rule__Picturegraph__Group_3_3__1 )
            // InternalIDSLParser.g:8605:2: rule__Picturegraph__Group_3_3__0__Impl rule__Picturegraph__Group_3_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_3__0"


    // $ANTLR start "rule__Picturegraph__Group_3_3__0__Impl"
    // InternalIDSLParser.g:8612:1: rule__Picturegraph__Group_3_3__0__Impl : ( Label ) ;
    public final void rule__Picturegraph__Group_3_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8616:1: ( ( Label ) )
            // InternalIDSLParser.g:8617:1: ( Label )
            {
            // InternalIDSLParser.g:8617:1: ( Label )
            // InternalIDSLParser.g:8618:2: Label
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getLabelKeyword_3_3_0()); 
            }
            match(input,Label,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getLabelKeyword_3_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_3__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_3__1"
    // InternalIDSLParser.g:8627:1: rule__Picturegraph__Group_3_3__1 : rule__Picturegraph__Group_3_3__1__Impl rule__Picturegraph__Group_3_3__2 ;
    public final void rule__Picturegraph__Group_3_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8631:1: ( rule__Picturegraph__Group_3_3__1__Impl rule__Picturegraph__Group_3_3__2 )
            // InternalIDSLParser.g:8632:2: rule__Picturegraph__Group_3_3__1__Impl rule__Picturegraph__Group_3_3__2
            {
            pushFollow(FOLLOW_7);
            rule__Picturegraph__Group_3_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_3__1"


    // $ANTLR start "rule__Picturegraph__Group_3_3__1__Impl"
    // InternalIDSLParser.g:8639:1: rule__Picturegraph__Group_3_3__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8643:1: ( ( Colon ) )
            // InternalIDSLParser.g:8644:1: ( Colon )
            {
            // InternalIDSLParser.g:8644:1: ( Colon )
            // InternalIDSLParser.g:8645:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_3__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_3__2"
    // InternalIDSLParser.g:8654:1: rule__Picturegraph__Group_3_3__2 : rule__Picturegraph__Group_3_3__2__Impl ;
    public final void rule__Picturegraph__Group_3_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8658:1: ( rule__Picturegraph__Group_3_3__2__Impl )
            // InternalIDSLParser.g:8659:2: rule__Picturegraph__Group_3_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_3__2"


    // $ANTLR start "rule__Picturegraph__Group_3_3__2__Impl"
    // InternalIDSLParser.g:8665:1: rule__Picturegraph__Group_3_3__2__Impl : ( ( rule__Picturegraph__LabelAssignment_3_3_2 ) ) ;
    public final void rule__Picturegraph__Group_3_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8669:1: ( ( ( rule__Picturegraph__LabelAssignment_3_3_2 ) ) )
            // InternalIDSLParser.g:8670:1: ( ( rule__Picturegraph__LabelAssignment_3_3_2 ) )
            {
            // InternalIDSLParser.g:8670:1: ( ( rule__Picturegraph__LabelAssignment_3_3_2 ) )
            // InternalIDSLParser.g:8671:2: ( rule__Picturegraph__LabelAssignment_3_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getLabelAssignment_3_3_2()); 
            }
            // InternalIDSLParser.g:8672:2: ( rule__Picturegraph__LabelAssignment_3_3_2 )
            // InternalIDSLParser.g:8672:3: rule__Picturegraph__LabelAssignment_3_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__LabelAssignment_3_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getLabelAssignment_3_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_3__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_4__0"
    // InternalIDSLParser.g:8681:1: rule__Picturegraph__Group_3_4__0 : rule__Picturegraph__Group_3_4__0__Impl rule__Picturegraph__Group_3_4__1 ;
    public final void rule__Picturegraph__Group_3_4__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8685:1: ( rule__Picturegraph__Group_3_4__0__Impl rule__Picturegraph__Group_3_4__1 )
            // InternalIDSLParser.g:8686:2: rule__Picturegraph__Group_3_4__0__Impl rule__Picturegraph__Group_3_4__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_4__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_4__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_4__0"


    // $ANTLR start "rule__Picturegraph__Group_3_4__0__Impl"
    // InternalIDSLParser.g:8693:1: rule__Picturegraph__Group_3_4__0__Impl : ( Padding ) ;
    public final void rule__Picturegraph__Group_3_4__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8697:1: ( ( Padding ) )
            // InternalIDSLParser.g:8698:1: ( Padding )
            {
            // InternalIDSLParser.g:8698:1: ( Padding )
            // InternalIDSLParser.g:8699:2: Padding
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPaddingKeyword_3_4_0()); 
            }
            match(input,Padding,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPaddingKeyword_3_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_4__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_4__1"
    // InternalIDSLParser.g:8708:1: rule__Picturegraph__Group_3_4__1 : rule__Picturegraph__Group_3_4__1__Impl rule__Picturegraph__Group_3_4__2 ;
    public final void rule__Picturegraph__Group_3_4__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8712:1: ( rule__Picturegraph__Group_3_4__1__Impl rule__Picturegraph__Group_3_4__2 )
            // InternalIDSLParser.g:8713:2: rule__Picturegraph__Group_3_4__1__Impl rule__Picturegraph__Group_3_4__2
            {
            pushFollow(FOLLOW_17);
            rule__Picturegraph__Group_3_4__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_4__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_4__1"


    // $ANTLR start "rule__Picturegraph__Group_3_4__1__Impl"
    // InternalIDSLParser.g:8720:1: rule__Picturegraph__Group_3_4__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_4__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8724:1: ( ( Colon ) )
            // InternalIDSLParser.g:8725:1: ( Colon )
            {
            // InternalIDSLParser.g:8725:1: ( Colon )
            // InternalIDSLParser.g:8726:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_4_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_4_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_4__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_4__2"
    // InternalIDSLParser.g:8735:1: rule__Picturegraph__Group_3_4__2 : rule__Picturegraph__Group_3_4__2__Impl ;
    public final void rule__Picturegraph__Group_3_4__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8739:1: ( rule__Picturegraph__Group_3_4__2__Impl )
            // InternalIDSLParser.g:8740:2: rule__Picturegraph__Group_3_4__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_4__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_4__2"


    // $ANTLR start "rule__Picturegraph__Group_3_4__2__Impl"
    // InternalIDSLParser.g:8746:1: rule__Picturegraph__Group_3_4__2__Impl : ( ( rule__Picturegraph__PaddingAssignment_3_4_2 ) ) ;
    public final void rule__Picturegraph__Group_3_4__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8750:1: ( ( ( rule__Picturegraph__PaddingAssignment_3_4_2 ) ) )
            // InternalIDSLParser.g:8751:1: ( ( rule__Picturegraph__PaddingAssignment_3_4_2 ) )
            {
            // InternalIDSLParser.g:8751:1: ( ( rule__Picturegraph__PaddingAssignment_3_4_2 ) )
            // InternalIDSLParser.g:8752:2: ( rule__Picturegraph__PaddingAssignment_3_4_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPaddingAssignment_3_4_2()); 
            }
            // InternalIDSLParser.g:8753:2: ( rule__Picturegraph__PaddingAssignment_3_4_2 )
            // InternalIDSLParser.g:8753:3: rule__Picturegraph__PaddingAssignment_3_4_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__PaddingAssignment_3_4_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPaddingAssignment_3_4_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_4__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_5__0"
    // InternalIDSLParser.g:8762:1: rule__Picturegraph__Group_3_5__0 : rule__Picturegraph__Group_3_5__0__Impl rule__Picturegraph__Group_3_5__1 ;
    public final void rule__Picturegraph__Group_3_5__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8766:1: ( rule__Picturegraph__Group_3_5__0__Impl rule__Picturegraph__Group_3_5__1 )
            // InternalIDSLParser.g:8767:2: rule__Picturegraph__Group_3_5__0__Impl rule__Picturegraph__Group_3_5__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_5__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_5__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_5__0"


    // $ANTLR start "rule__Picturegraph__Group_3_5__0__Impl"
    // InternalIDSLParser.g:8774:1: rule__Picturegraph__Group_3_5__0__Impl : ( Position ) ;
    public final void rule__Picturegraph__Group_3_5__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8778:1: ( ( Position ) )
            // InternalIDSLParser.g:8779:1: ( Position )
            {
            // InternalIDSLParser.g:8779:1: ( Position )
            // InternalIDSLParser.g:8780:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPositionKeyword_3_5_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPositionKeyword_3_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_5__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_5__1"
    // InternalIDSLParser.g:8789:1: rule__Picturegraph__Group_3_5__1 : rule__Picturegraph__Group_3_5__1__Impl rule__Picturegraph__Group_3_5__2 ;
    public final void rule__Picturegraph__Group_3_5__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8793:1: ( rule__Picturegraph__Group_3_5__1__Impl rule__Picturegraph__Group_3_5__2 )
            // InternalIDSLParser.g:8794:2: rule__Picturegraph__Group_3_5__1__Impl rule__Picturegraph__Group_3_5__2
            {
            pushFollow(FOLLOW_8);
            rule__Picturegraph__Group_3_5__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_5__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_5__1"


    // $ANTLR start "rule__Picturegraph__Group_3_5__1__Impl"
    // InternalIDSLParser.g:8801:1: rule__Picturegraph__Group_3_5__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_5__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8805:1: ( ( Colon ) )
            // InternalIDSLParser.g:8806:1: ( Colon )
            {
            // InternalIDSLParser.g:8806:1: ( Colon )
            // InternalIDSLParser.g:8807:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_5_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_5_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_5__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_5__2"
    // InternalIDSLParser.g:8816:1: rule__Picturegraph__Group_3_5__2 : rule__Picturegraph__Group_3_5__2__Impl ;
    public final void rule__Picturegraph__Group_3_5__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8820:1: ( rule__Picturegraph__Group_3_5__2__Impl )
            // InternalIDSLParser.g:8821:2: rule__Picturegraph__Group_3_5__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_5__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_5__2"


    // $ANTLR start "rule__Picturegraph__Group_3_5__2__Impl"
    // InternalIDSLParser.g:8827:1: rule__Picturegraph__Group_3_5__2__Impl : ( ( rule__Picturegraph__PositionAssignment_3_5_2 ) ) ;
    public final void rule__Picturegraph__Group_3_5__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8831:1: ( ( ( rule__Picturegraph__PositionAssignment_3_5_2 ) ) )
            // InternalIDSLParser.g:8832:1: ( ( rule__Picturegraph__PositionAssignment_3_5_2 ) )
            {
            // InternalIDSLParser.g:8832:1: ( ( rule__Picturegraph__PositionAssignment_3_5_2 ) )
            // InternalIDSLParser.g:8833:2: ( rule__Picturegraph__PositionAssignment_3_5_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPositionAssignment_3_5_2()); 
            }
            // InternalIDSLParser.g:8834:2: ( rule__Picturegraph__PositionAssignment_3_5_2 )
            // InternalIDSLParser.g:8834:3: rule__Picturegraph__PositionAssignment_3_5_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__PositionAssignment_3_5_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPositionAssignment_3_5_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_5__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_6__0"
    // InternalIDSLParser.g:8843:1: rule__Picturegraph__Group_3_6__0 : rule__Picturegraph__Group_3_6__0__Impl rule__Picturegraph__Group_3_6__1 ;
    public final void rule__Picturegraph__Group_3_6__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8847:1: ( rule__Picturegraph__Group_3_6__0__Impl rule__Picturegraph__Group_3_6__1 )
            // InternalIDSLParser.g:8848:2: rule__Picturegraph__Group_3_6__0__Impl rule__Picturegraph__Group_3_6__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_6__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_6__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_6__0"


    // $ANTLR start "rule__Picturegraph__Group_3_6__0__Impl"
    // InternalIDSLParser.g:8855:1: rule__Picturegraph__Group_3_6__0__Impl : ( Showlegend ) ;
    public final void rule__Picturegraph__Group_3_6__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8859:1: ( ( Showlegend ) )
            // InternalIDSLParser.g:8860:1: ( Showlegend )
            {
            // InternalIDSLParser.g:8860:1: ( Showlegend )
            // InternalIDSLParser.g:8861:2: Showlegend
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getShowlegendKeyword_3_6_0()); 
            }
            match(input,Showlegend,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getShowlegendKeyword_3_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_6__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_6__1"
    // InternalIDSLParser.g:8870:1: rule__Picturegraph__Group_3_6__1 : rule__Picturegraph__Group_3_6__1__Impl rule__Picturegraph__Group_3_6__2 ;
    public final void rule__Picturegraph__Group_3_6__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8874:1: ( rule__Picturegraph__Group_3_6__1__Impl rule__Picturegraph__Group_3_6__2 )
            // InternalIDSLParser.g:8875:2: rule__Picturegraph__Group_3_6__1__Impl rule__Picturegraph__Group_3_6__2
            {
            pushFollow(FOLLOW_27);
            rule__Picturegraph__Group_3_6__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_6__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_6__1"


    // $ANTLR start "rule__Picturegraph__Group_3_6__1__Impl"
    // InternalIDSLParser.g:8882:1: rule__Picturegraph__Group_3_6__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_6__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8886:1: ( ( Colon ) )
            // InternalIDSLParser.g:8887:1: ( Colon )
            {
            // InternalIDSLParser.g:8887:1: ( Colon )
            // InternalIDSLParser.g:8888:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_6_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_6_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_6__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_6__2"
    // InternalIDSLParser.g:8897:1: rule__Picturegraph__Group_3_6__2 : rule__Picturegraph__Group_3_6__2__Impl ;
    public final void rule__Picturegraph__Group_3_6__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8901:1: ( rule__Picturegraph__Group_3_6__2__Impl )
            // InternalIDSLParser.g:8902:2: rule__Picturegraph__Group_3_6__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_6__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_6__2"


    // $ANTLR start "rule__Picturegraph__Group_3_6__2__Impl"
    // InternalIDSLParser.g:8908:1: rule__Picturegraph__Group_3_6__2__Impl : ( ( rule__Picturegraph__ShowlegendAssignment_3_6_2 ) ) ;
    public final void rule__Picturegraph__Group_3_6__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8912:1: ( ( ( rule__Picturegraph__ShowlegendAssignment_3_6_2 ) ) )
            // InternalIDSLParser.g:8913:1: ( ( rule__Picturegraph__ShowlegendAssignment_3_6_2 ) )
            {
            // InternalIDSLParser.g:8913:1: ( ( rule__Picturegraph__ShowlegendAssignment_3_6_2 ) )
            // InternalIDSLParser.g:8914:2: ( rule__Picturegraph__ShowlegendAssignment_3_6_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getShowlegendAssignment_3_6_2()); 
            }
            // InternalIDSLParser.g:8915:2: ( rule__Picturegraph__ShowlegendAssignment_3_6_2 )
            // InternalIDSLParser.g:8915:3: rule__Picturegraph__ShowlegendAssignment_3_6_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__ShowlegendAssignment_3_6_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getShowlegendAssignment_3_6_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_6__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_7__0"
    // InternalIDSLParser.g:8924:1: rule__Picturegraph__Group_3_7__0 : rule__Picturegraph__Group_3_7__0__Impl rule__Picturegraph__Group_3_7__1 ;
    public final void rule__Picturegraph__Group_3_7__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8928:1: ( rule__Picturegraph__Group_3_7__0__Impl rule__Picturegraph__Group_3_7__1 )
            // InternalIDSLParser.g:8929:2: rule__Picturegraph__Group_3_7__0__Impl rule__Picturegraph__Group_3_7__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_7__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_7__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_7__0"


    // $ANTLR start "rule__Picturegraph__Group_3_7__0__Impl"
    // InternalIDSLParser.g:8936:1: rule__Picturegraph__Group_3_7__0__Impl : ( Showtitle ) ;
    public final void rule__Picturegraph__Group_3_7__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8940:1: ( ( Showtitle ) )
            // InternalIDSLParser.g:8941:1: ( Showtitle )
            {
            // InternalIDSLParser.g:8941:1: ( Showtitle )
            // InternalIDSLParser.g:8942:2: Showtitle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getShowtitleKeyword_3_7_0()); 
            }
            match(input,Showtitle,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getShowtitleKeyword_3_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_7__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_7__1"
    // InternalIDSLParser.g:8951:1: rule__Picturegraph__Group_3_7__1 : rule__Picturegraph__Group_3_7__1__Impl rule__Picturegraph__Group_3_7__2 ;
    public final void rule__Picturegraph__Group_3_7__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8955:1: ( rule__Picturegraph__Group_3_7__1__Impl rule__Picturegraph__Group_3_7__2 )
            // InternalIDSLParser.g:8956:2: rule__Picturegraph__Group_3_7__1__Impl rule__Picturegraph__Group_3_7__2
            {
            pushFollow(FOLLOW_27);
            rule__Picturegraph__Group_3_7__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_7__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_7__1"


    // $ANTLR start "rule__Picturegraph__Group_3_7__1__Impl"
    // InternalIDSLParser.g:8963:1: rule__Picturegraph__Group_3_7__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_7__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8967:1: ( ( Colon ) )
            // InternalIDSLParser.g:8968:1: ( Colon )
            {
            // InternalIDSLParser.g:8968:1: ( Colon )
            // InternalIDSLParser.g:8969:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_7_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_7_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_7__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_7__2"
    // InternalIDSLParser.g:8978:1: rule__Picturegraph__Group_3_7__2 : rule__Picturegraph__Group_3_7__2__Impl ;
    public final void rule__Picturegraph__Group_3_7__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8982:1: ( rule__Picturegraph__Group_3_7__2__Impl )
            // InternalIDSLParser.g:8983:2: rule__Picturegraph__Group_3_7__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_7__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_7__2"


    // $ANTLR start "rule__Picturegraph__Group_3_7__2__Impl"
    // InternalIDSLParser.g:8989:1: rule__Picturegraph__Group_3_7__2__Impl : ( ( rule__Picturegraph__ShowtitleAssignment_3_7_2 ) ) ;
    public final void rule__Picturegraph__Group_3_7__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:8993:1: ( ( ( rule__Picturegraph__ShowtitleAssignment_3_7_2 ) ) )
            // InternalIDSLParser.g:8994:1: ( ( rule__Picturegraph__ShowtitleAssignment_3_7_2 ) )
            {
            // InternalIDSLParser.g:8994:1: ( ( rule__Picturegraph__ShowtitleAssignment_3_7_2 ) )
            // InternalIDSLParser.g:8995:2: ( rule__Picturegraph__ShowtitleAssignment_3_7_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getShowtitleAssignment_3_7_2()); 
            }
            // InternalIDSLParser.g:8996:2: ( rule__Picturegraph__ShowtitleAssignment_3_7_2 )
            // InternalIDSLParser.g:8996:3: rule__Picturegraph__ShowtitleAssignment_3_7_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__ShowtitleAssignment_3_7_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getShowtitleAssignment_3_7_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_7__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_8__0"
    // InternalIDSLParser.g:9005:1: rule__Picturegraph__Group_3_8__0 : rule__Picturegraph__Group_3_8__0__Impl rule__Picturegraph__Group_3_8__1 ;
    public final void rule__Picturegraph__Group_3_8__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9009:1: ( rule__Picturegraph__Group_3_8__0__Impl rule__Picturegraph__Group_3_8__1 )
            // InternalIDSLParser.g:9010:2: rule__Picturegraph__Group_3_8__0__Impl rule__Picturegraph__Group_3_8__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_8__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_8__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_8__0"


    // $ANTLR start "rule__Picturegraph__Group_3_8__0__Impl"
    // InternalIDSLParser.g:9017:1: rule__Picturegraph__Group_3_8__0__Impl : ( Size ) ;
    public final void rule__Picturegraph__Group_3_8__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9021:1: ( ( Size ) )
            // InternalIDSLParser.g:9022:1: ( Size )
            {
            // InternalIDSLParser.g:9022:1: ( Size )
            // InternalIDSLParser.g:9023:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getSizeKeyword_3_8_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getSizeKeyword_3_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_8__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_8__1"
    // InternalIDSLParser.g:9032:1: rule__Picturegraph__Group_3_8__1 : rule__Picturegraph__Group_3_8__1__Impl rule__Picturegraph__Group_3_8__2 ;
    public final void rule__Picturegraph__Group_3_8__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9036:1: ( rule__Picturegraph__Group_3_8__1__Impl rule__Picturegraph__Group_3_8__2 )
            // InternalIDSLParser.g:9037:2: rule__Picturegraph__Group_3_8__1__Impl rule__Picturegraph__Group_3_8__2
            {
            pushFollow(FOLLOW_8);
            rule__Picturegraph__Group_3_8__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_8__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_8__1"


    // $ANTLR start "rule__Picturegraph__Group_3_8__1__Impl"
    // InternalIDSLParser.g:9044:1: rule__Picturegraph__Group_3_8__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_8__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9048:1: ( ( Colon ) )
            // InternalIDSLParser.g:9049:1: ( Colon )
            {
            // InternalIDSLParser.g:9049:1: ( Colon )
            // InternalIDSLParser.g:9050:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_8_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_8_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_8__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_8__2"
    // InternalIDSLParser.g:9059:1: rule__Picturegraph__Group_3_8__2 : rule__Picturegraph__Group_3_8__2__Impl ;
    public final void rule__Picturegraph__Group_3_8__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9063:1: ( rule__Picturegraph__Group_3_8__2__Impl )
            // InternalIDSLParser.g:9064:2: rule__Picturegraph__Group_3_8__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_8__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_8__2"


    // $ANTLR start "rule__Picturegraph__Group_3_8__2__Impl"
    // InternalIDSLParser.g:9070:1: rule__Picturegraph__Group_3_8__2__Impl : ( ( rule__Picturegraph__SizeAssignment_3_8_2 ) ) ;
    public final void rule__Picturegraph__Group_3_8__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9074:1: ( ( ( rule__Picturegraph__SizeAssignment_3_8_2 ) ) )
            // InternalIDSLParser.g:9075:1: ( ( rule__Picturegraph__SizeAssignment_3_8_2 ) )
            {
            // InternalIDSLParser.g:9075:1: ( ( rule__Picturegraph__SizeAssignment_3_8_2 ) )
            // InternalIDSLParser.g:9076:2: ( rule__Picturegraph__SizeAssignment_3_8_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getSizeAssignment_3_8_2()); 
            }
            // InternalIDSLParser.g:9077:2: ( rule__Picturegraph__SizeAssignment_3_8_2 )
            // InternalIDSLParser.g:9077:3: rule__Picturegraph__SizeAssignment_3_8_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__SizeAssignment_3_8_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getSizeAssignment_3_8_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_8__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_9__0"
    // InternalIDSLParser.g:9086:1: rule__Picturegraph__Group_3_9__0 : rule__Picturegraph__Group_3_9__0__Impl rule__Picturegraph__Group_3_9__1 ;
    public final void rule__Picturegraph__Group_3_9__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9090:1: ( rule__Picturegraph__Group_3_9__0__Impl rule__Picturegraph__Group_3_9__1 )
            // InternalIDSLParser.g:9091:2: rule__Picturegraph__Group_3_9__0__Impl rule__Picturegraph__Group_3_9__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_9__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_9__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_9__0"


    // $ANTLR start "rule__Picturegraph__Group_3_9__0__Impl"
    // InternalIDSLParser.g:9098:1: rule__Picturegraph__Group_3_9__0__Impl : ( Title ) ;
    public final void rule__Picturegraph__Group_3_9__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9102:1: ( ( Title ) )
            // InternalIDSLParser.g:9103:1: ( Title )
            {
            // InternalIDSLParser.g:9103:1: ( Title )
            // InternalIDSLParser.g:9104:2: Title
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getTitleKeyword_3_9_0()); 
            }
            match(input,Title,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getTitleKeyword_3_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_9__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_9__1"
    // InternalIDSLParser.g:9113:1: rule__Picturegraph__Group_3_9__1 : rule__Picturegraph__Group_3_9__1__Impl rule__Picturegraph__Group_3_9__2 ;
    public final void rule__Picturegraph__Group_3_9__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9117:1: ( rule__Picturegraph__Group_3_9__1__Impl rule__Picturegraph__Group_3_9__2 )
            // InternalIDSLParser.g:9118:2: rule__Picturegraph__Group_3_9__1__Impl rule__Picturegraph__Group_3_9__2
            {
            pushFollow(FOLLOW_7);
            rule__Picturegraph__Group_3_9__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_9__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_9__1"


    // $ANTLR start "rule__Picturegraph__Group_3_9__1__Impl"
    // InternalIDSLParser.g:9125:1: rule__Picturegraph__Group_3_9__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_9__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9129:1: ( ( Colon ) )
            // InternalIDSLParser.g:9130:1: ( Colon )
            {
            // InternalIDSLParser.g:9130:1: ( Colon )
            // InternalIDSLParser.g:9131:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_9_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_9_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_9__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_9__2"
    // InternalIDSLParser.g:9140:1: rule__Picturegraph__Group_3_9__2 : rule__Picturegraph__Group_3_9__2__Impl ;
    public final void rule__Picturegraph__Group_3_9__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9144:1: ( rule__Picturegraph__Group_3_9__2__Impl )
            // InternalIDSLParser.g:9145:2: rule__Picturegraph__Group_3_9__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_9__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_9__2"


    // $ANTLR start "rule__Picturegraph__Group_3_9__2__Impl"
    // InternalIDSLParser.g:9151:1: rule__Picturegraph__Group_3_9__2__Impl : ( ( rule__Picturegraph__TitleAssignment_3_9_2 ) ) ;
    public final void rule__Picturegraph__Group_3_9__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9155:1: ( ( ( rule__Picturegraph__TitleAssignment_3_9_2 ) ) )
            // InternalIDSLParser.g:9156:1: ( ( rule__Picturegraph__TitleAssignment_3_9_2 ) )
            {
            // InternalIDSLParser.g:9156:1: ( ( rule__Picturegraph__TitleAssignment_3_9_2 ) )
            // InternalIDSLParser.g:9157:2: ( rule__Picturegraph__TitleAssignment_3_9_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getTitleAssignment_3_9_2()); 
            }
            // InternalIDSLParser.g:9158:2: ( rule__Picturegraph__TitleAssignment_3_9_2 )
            // InternalIDSLParser.g:9158:3: rule__Picturegraph__TitleAssignment_3_9_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__TitleAssignment_3_9_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getTitleAssignment_3_9_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_9__2__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_10__0"
    // InternalIDSLParser.g:9167:1: rule__Picturegraph__Group_3_10__0 : rule__Picturegraph__Group_3_10__0__Impl rule__Picturegraph__Group_3_10__1 ;
    public final void rule__Picturegraph__Group_3_10__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9171:1: ( rule__Picturegraph__Group_3_10__0__Impl rule__Picturegraph__Group_3_10__1 )
            // InternalIDSLParser.g:9172:2: rule__Picturegraph__Group_3_10__0__Impl rule__Picturegraph__Group_3_10__1
            {
            pushFollow(FOLLOW_3);
            rule__Picturegraph__Group_3_10__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_10__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_10__0"


    // $ANTLR start "rule__Picturegraph__Group_3_10__0__Impl"
    // InternalIDSLParser.g:9179:1: rule__Picturegraph__Group_3_10__0__Impl : ( Type ) ;
    public final void rule__Picturegraph__Group_3_10__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9183:1: ( ( Type ) )
            // InternalIDSLParser.g:9184:1: ( Type )
            {
            // InternalIDSLParser.g:9184:1: ( Type )
            // InternalIDSLParser.g:9185:2: Type
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getTypeKeyword_3_10_0()); 
            }
            match(input,Type,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getTypeKeyword_3_10_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_10__0__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_10__1"
    // InternalIDSLParser.g:9194:1: rule__Picturegraph__Group_3_10__1 : rule__Picturegraph__Group_3_10__1__Impl rule__Picturegraph__Group_3_10__2 ;
    public final void rule__Picturegraph__Group_3_10__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9198:1: ( rule__Picturegraph__Group_3_10__1__Impl rule__Picturegraph__Group_3_10__2 )
            // InternalIDSLParser.g:9199:2: rule__Picturegraph__Group_3_10__1__Impl rule__Picturegraph__Group_3_10__2
            {
            pushFollow(FOLLOW_32);
            rule__Picturegraph__Group_3_10__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_10__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_10__1"


    // $ANTLR start "rule__Picturegraph__Group_3_10__1__Impl"
    // InternalIDSLParser.g:9206:1: rule__Picturegraph__Group_3_10__1__Impl : ( Colon ) ;
    public final void rule__Picturegraph__Group_3_10__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9210:1: ( ( Colon ) )
            // InternalIDSLParser.g:9211:1: ( Colon )
            {
            // InternalIDSLParser.g:9211:1: ( Colon )
            // InternalIDSLParser.g:9212:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColonKeyword_3_10_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColonKeyword_3_10_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_10__1__Impl"


    // $ANTLR start "rule__Picturegraph__Group_3_10__2"
    // InternalIDSLParser.g:9221:1: rule__Picturegraph__Group_3_10__2 : rule__Picturegraph__Group_3_10__2__Impl ;
    public final void rule__Picturegraph__Group_3_10__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9225:1: ( rule__Picturegraph__Group_3_10__2__Impl )
            // InternalIDSLParser.g:9226:2: rule__Picturegraph__Group_3_10__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__Group_3_10__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_10__2"


    // $ANTLR start "rule__Picturegraph__Group_3_10__2__Impl"
    // InternalIDSLParser.g:9232:1: rule__Picturegraph__Group_3_10__2__Impl : ( ( rule__Picturegraph__TypeAssignment_3_10_2 ) ) ;
    public final void rule__Picturegraph__Group_3_10__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9236:1: ( ( ( rule__Picturegraph__TypeAssignment_3_10_2 ) ) )
            // InternalIDSLParser.g:9237:1: ( ( rule__Picturegraph__TypeAssignment_3_10_2 ) )
            {
            // InternalIDSLParser.g:9237:1: ( ( rule__Picturegraph__TypeAssignment_3_10_2 ) )
            // InternalIDSLParser.g:9238:2: ( rule__Picturegraph__TypeAssignment_3_10_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getTypeAssignment_3_10_2()); 
            }
            // InternalIDSLParser.g:9239:2: ( rule__Picturegraph__TypeAssignment_3_10_2 )
            // InternalIDSLParser.g:9239:3: rule__Picturegraph__TypeAssignment_3_10_2
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__TypeAssignment_3_10_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getTypeAssignment_3_10_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__Group_3_10__2__Impl"


    // $ANTLR start "rule__Foot__Group__0"
    // InternalIDSLParser.g:9248:1: rule__Foot__Group__0 : rule__Foot__Group__0__Impl rule__Foot__Group__1 ;
    public final void rule__Foot__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9252:1: ( rule__Foot__Group__0__Impl rule__Foot__Group__1 )
            // InternalIDSLParser.g:9253:2: rule__Foot__Group__0__Impl rule__Foot__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group__0"


    // $ANTLR start "rule__Foot__Group__0__Impl"
    // InternalIDSLParser.g:9260:1: rule__Foot__Group__0__Impl : ( ( rule__Foot__NameAssignment_0 ) ) ;
    public final void rule__Foot__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9264:1: ( ( ( rule__Foot__NameAssignment_0 ) ) )
            // InternalIDSLParser.g:9265:1: ( ( rule__Foot__NameAssignment_0 ) )
            {
            // InternalIDSLParser.g:9265:1: ( ( rule__Foot__NameAssignment_0 ) )
            // InternalIDSLParser.g:9266:2: ( rule__Foot__NameAssignment_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getNameAssignment_0()); 
            }
            // InternalIDSLParser.g:9267:2: ( rule__Foot__NameAssignment_0 )
            // InternalIDSLParser.g:9267:3: rule__Foot__NameAssignment_0
            {
            pushFollow(FOLLOW_2);
            rule__Foot__NameAssignment_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getNameAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group__0__Impl"


    // $ANTLR start "rule__Foot__Group__1"
    // InternalIDSLParser.g:9275:1: rule__Foot__Group__1 : rule__Foot__Group__1__Impl rule__Foot__Group__2 ;
    public final void rule__Foot__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9279:1: ( rule__Foot__Group__1__Impl rule__Foot__Group__2 )
            // InternalIDSLParser.g:9280:2: rule__Foot__Group__1__Impl rule__Foot__Group__2
            {
            pushFollow(FOLLOW_33);
            rule__Foot__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group__1"


    // $ANTLR start "rule__Foot__Group__1__Impl"
    // InternalIDSLParser.g:9287:1: rule__Foot__Group__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9291:1: ( ( Colon ) )
            // InternalIDSLParser.g:9292:1: ( Colon )
            {
            // InternalIDSLParser.g:9292:1: ( Colon )
            // InternalIDSLParser.g:9293:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group__1__Impl"


    // $ANTLR start "rule__Foot__Group__2"
    // InternalIDSLParser.g:9302:1: rule__Foot__Group__2 : rule__Foot__Group__2__Impl ;
    public final void rule__Foot__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9306:1: ( rule__Foot__Group__2__Impl )
            // InternalIDSLParser.g:9307:2: rule__Foot__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group__2"


    // $ANTLR start "rule__Foot__Group__2__Impl"
    // InternalIDSLParser.g:9313:1: rule__Foot__Group__2__Impl : ( ( rule__Foot__Alternatives_2 ) ) ;
    public final void rule__Foot__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9317:1: ( ( ( rule__Foot__Alternatives_2 ) ) )
            // InternalIDSLParser.g:9318:1: ( ( rule__Foot__Alternatives_2 ) )
            {
            // InternalIDSLParser.g:9318:1: ( ( rule__Foot__Alternatives_2 ) )
            // InternalIDSLParser.g:9319:2: ( rule__Foot__Alternatives_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getAlternatives_2()); 
            }
            // InternalIDSLParser.g:9320:2: ( rule__Foot__Alternatives_2 )
            // InternalIDSLParser.g:9320:3: rule__Foot__Alternatives_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Alternatives_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getAlternatives_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group__2__Impl"


    // $ANTLR start "rule__Foot__Group_2_1__0"
    // InternalIDSLParser.g:9329:1: rule__Foot__Group_2_1__0 : rule__Foot__Group_2_1__0__Impl rule__Foot__Group_2_1__1 ;
    public final void rule__Foot__Group_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9333:1: ( rule__Foot__Group_2_1__0__Impl rule__Foot__Group_2_1__1 )
            // InternalIDSLParser.g:9334:2: rule__Foot__Group_2_1__0__Impl rule__Foot__Group_2_1__1
            {
            pushFollow(FOLLOW_10);
            rule__Foot__Group_2_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1__0"


    // $ANTLR start "rule__Foot__Group_2_1__0__Impl"
    // InternalIDSLParser.g:9341:1: rule__Foot__Group_2_1__0__Impl : ( ( rule__Foot__UnorderedGroup_2_1_0 ) ) ;
    public final void rule__Foot__Group_2_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9345:1: ( ( ( rule__Foot__UnorderedGroup_2_1_0 ) ) )
            // InternalIDSLParser.g:9346:1: ( ( rule__Foot__UnorderedGroup_2_1_0 ) )
            {
            // InternalIDSLParser.g:9346:1: ( ( rule__Foot__UnorderedGroup_2_1_0 ) )
            // InternalIDSLParser.g:9347:2: ( rule__Foot__UnorderedGroup_2_1_0 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0()); 
            }
            // InternalIDSLParser.g:9348:2: ( rule__Foot__UnorderedGroup_2_1_0 )
            // InternalIDSLParser.g:9348:3: rule__Foot__UnorderedGroup_2_1_0
            {
            pushFollow(FOLLOW_2);
            rule__Foot__UnorderedGroup_2_1_0();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1__1"
    // InternalIDSLParser.g:9356:1: rule__Foot__Group_2_1__1 : rule__Foot__Group_2_1__1__Impl ;
    public final void rule__Foot__Group_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9360:1: ( rule__Foot__Group_2_1__1__Impl )
            // InternalIDSLParser.g:9361:2: rule__Foot__Group_2_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1__1"


    // $ANTLR start "rule__Foot__Group_2_1__1__Impl"
    // InternalIDSLParser.g:9367:1: rule__Foot__Group_2_1__1__Impl : ( RULE_END ) ;
    public final void rule__Foot__Group_2_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9371:1: ( ( RULE_END ) )
            // InternalIDSLParser.g:9372:1: ( RULE_END )
            {
            // InternalIDSLParser.g:9372:1: ( RULE_END )
            // InternalIDSLParser.g:9373:2: RULE_END
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getENDTerminalRuleCall_2_1_1()); 
            }
            match(input,RULE_END,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getENDTerminalRuleCall_2_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0__0"
    // InternalIDSLParser.g:9383:1: rule__Foot__Group_2_1_0_0__0 : rule__Foot__Group_2_1_0_0__0__Impl rule__Foot__Group_2_1_0_0__1 ;
    public final void rule__Foot__Group_2_1_0_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9387:1: ( rule__Foot__Group_2_1_0_0__0__Impl rule__Foot__Group_2_1_0_0__1 )
            // InternalIDSLParser.g:9388:2: rule__Foot__Group_2_1_0_0__0__Impl rule__Foot__Group_2_1_0_0__1
            {
            pushFollow(FOLLOW_34);
            rule__Foot__Group_2_1_0_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_0__0__Impl"
    // InternalIDSLParser.g:9395:1: rule__Foot__Group_2_1_0_0__0__Impl : ( RULE_BEGIN ) ;
    public final void rule__Foot__Group_2_1_0_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9399:1: ( ( RULE_BEGIN ) )
            // InternalIDSLParser.g:9400:1: ( RULE_BEGIN )
            {
            // InternalIDSLParser.g:9400:1: ( RULE_BEGIN )
            // InternalIDSLParser.g:9401:2: RULE_BEGIN
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBEGINTerminalRuleCall_2_1_0_0_0()); 
            }
            match(input,RULE_BEGIN,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBEGINTerminalRuleCall_2_1_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0__1"
    // InternalIDSLParser.g:9410:1: rule__Foot__Group_2_1_0_0__1 : rule__Foot__Group_2_1_0_0__1__Impl ;
    public final void rule__Foot__Group_2_1_0_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9414:1: ( rule__Foot__Group_2_1_0_0__1__Impl )
            // InternalIDSLParser.g:9415:2: rule__Foot__Group_2_1_0_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_0__1__Impl"
    // InternalIDSLParser.g:9421:1: rule__Foot__Group_2_1_0_0__1__Impl : ( ( rule__Foot__Alternatives_2_1_0_0_1 )? ) ;
    public final void rule__Foot__Group_2_1_0_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9425:1: ( ( ( rule__Foot__Alternatives_2_1_0_0_1 )? ) )
            // InternalIDSLParser.g:9426:1: ( ( rule__Foot__Alternatives_2_1_0_0_1 )? )
            {
            // InternalIDSLParser.g:9426:1: ( ( rule__Foot__Alternatives_2_1_0_0_1 )? )
            // InternalIDSLParser.g:9427:2: ( rule__Foot__Alternatives_2_1_0_0_1 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getAlternatives_2_1_0_0_1()); 
            }
            // InternalIDSLParser.g:9428:2: ( rule__Foot__Alternatives_2_1_0_0_1 )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==Bgpattern||(LA23_0>=Bgcolor && LA23_0<=Bgimage)) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // InternalIDSLParser.g:9428:3: rule__Foot__Alternatives_2_1_0_0_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Alternatives_2_1_0_0_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getAlternatives_2_1_0_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_0__0"
    // InternalIDSLParser.g:9437:1: rule__Foot__Group_2_1_0_0_1_0__0 : rule__Foot__Group_2_1_0_0_1_0__0__Impl rule__Foot__Group_2_1_0_0_1_0__1 ;
    public final void rule__Foot__Group_2_1_0_0_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9441:1: ( rule__Foot__Group_2_1_0_0_1_0__0__Impl rule__Foot__Group_2_1_0_0_1_0__1 )
            // InternalIDSLParser.g:9442:2: rule__Foot__Group_2_1_0_0_1_0__0__Impl rule__Foot__Group_2_1_0_0_1_0__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group_2_1_0_0_1_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_0__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_0__0__Impl"
    // InternalIDSLParser.g:9449:1: rule__Foot__Group_2_1_0_0_1_0__0__Impl : ( Bgcolor ) ;
    public final void rule__Foot__Group_2_1_0_0_1_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9453:1: ( ( Bgcolor ) )
            // InternalIDSLParser.g:9454:1: ( Bgcolor )
            {
            // InternalIDSLParser.g:9454:1: ( Bgcolor )
            // InternalIDSLParser.g:9455:2: Bgcolor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgcolorKeyword_2_1_0_0_1_0_0()); 
            }
            match(input,Bgcolor,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgcolorKeyword_2_1_0_0_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_0__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_0__1"
    // InternalIDSLParser.g:9464:1: rule__Foot__Group_2_1_0_0_1_0__1 : rule__Foot__Group_2_1_0_0_1_0__1__Impl rule__Foot__Group_2_1_0_0_1_0__2 ;
    public final void rule__Foot__Group_2_1_0_0_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9468:1: ( rule__Foot__Group_2_1_0_0_1_0__1__Impl rule__Foot__Group_2_1_0_0_1_0__2 )
            // InternalIDSLParser.g:9469:2: rule__Foot__Group_2_1_0_0_1_0__1__Impl rule__Foot__Group_2_1_0_0_1_0__2
            {
            pushFollow(FOLLOW_5);
            rule__Foot__Group_2_1_0_0_1_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_0__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_0__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_0__1__Impl"
    // InternalIDSLParser.g:9476:1: rule__Foot__Group_2_1_0_0_1_0__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group_2_1_0_0_1_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9480:1: ( ( Colon ) )
            // InternalIDSLParser.g:9481:1: ( Colon )
            {
            // InternalIDSLParser.g:9481:1: ( Colon )
            // InternalIDSLParser.g:9482:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_2_1_0_0_1_0_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_2_1_0_0_1_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_0__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_0__2"
    // InternalIDSLParser.g:9491:1: rule__Foot__Group_2_1_0_0_1_0__2 : rule__Foot__Group_2_1_0_0_1_0__2__Impl ;
    public final void rule__Foot__Group_2_1_0_0_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9495:1: ( rule__Foot__Group_2_1_0_0_1_0__2__Impl )
            // InternalIDSLParser.g:9496:2: rule__Foot__Group_2_1_0_0_1_0__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_0__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_0__2"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_0__2__Impl"
    // InternalIDSLParser.g:9502:1: rule__Foot__Group_2_1_0_0_1_0__2__Impl : ( ( rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 ) ) ;
    public final void rule__Foot__Group_2_1_0_0_1_0__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9506:1: ( ( ( rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 ) ) )
            // InternalIDSLParser.g:9507:1: ( ( rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 ) )
            {
            // InternalIDSLParser.g:9507:1: ( ( rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 ) )
            // InternalIDSLParser.g:9508:2: ( rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgcolorAssignment_2_1_0_0_1_0_2()); 
            }
            // InternalIDSLParser.g:9509:2: ( rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 )
            // InternalIDSLParser.g:9509:3: rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgcolorAssignment_2_1_0_0_1_0_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_0__2__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_1__0"
    // InternalIDSLParser.g:9518:1: rule__Foot__Group_2_1_0_0_1_1__0 : rule__Foot__Group_2_1_0_0_1_1__0__Impl rule__Foot__Group_2_1_0_0_1_1__1 ;
    public final void rule__Foot__Group_2_1_0_0_1_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9522:1: ( rule__Foot__Group_2_1_0_0_1_1__0__Impl rule__Foot__Group_2_1_0_0_1_1__1 )
            // InternalIDSLParser.g:9523:2: rule__Foot__Group_2_1_0_0_1_1__0__Impl rule__Foot__Group_2_1_0_0_1_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group_2_1_0_0_1_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_1__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_1__0__Impl"
    // InternalIDSLParser.g:9530:1: rule__Foot__Group_2_1_0_0_1_1__0__Impl : ( Bgpattern ) ;
    public final void rule__Foot__Group_2_1_0_0_1_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9534:1: ( ( Bgpattern ) )
            // InternalIDSLParser.g:9535:1: ( Bgpattern )
            {
            // InternalIDSLParser.g:9535:1: ( Bgpattern )
            // InternalIDSLParser.g:9536:2: Bgpattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgpatternKeyword_2_1_0_0_1_1_0()); 
            }
            match(input,Bgpattern,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgpatternKeyword_2_1_0_0_1_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_1__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_1__1"
    // InternalIDSLParser.g:9545:1: rule__Foot__Group_2_1_0_0_1_1__1 : rule__Foot__Group_2_1_0_0_1_1__1__Impl rule__Foot__Group_2_1_0_0_1_1__2 ;
    public final void rule__Foot__Group_2_1_0_0_1_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9549:1: ( rule__Foot__Group_2_1_0_0_1_1__1__Impl rule__Foot__Group_2_1_0_0_1_1__2 )
            // InternalIDSLParser.g:9550:2: rule__Foot__Group_2_1_0_0_1_1__1__Impl rule__Foot__Group_2_1_0_0_1_1__2
            {
            pushFollow(FOLLOW_6);
            rule__Foot__Group_2_1_0_0_1_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_1__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_1__1__Impl"
    // InternalIDSLParser.g:9557:1: rule__Foot__Group_2_1_0_0_1_1__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group_2_1_0_0_1_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9561:1: ( ( Colon ) )
            // InternalIDSLParser.g:9562:1: ( Colon )
            {
            // InternalIDSLParser.g:9562:1: ( Colon )
            // InternalIDSLParser.g:9563:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_2_1_0_0_1_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_2_1_0_0_1_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_1__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_1__2"
    // InternalIDSLParser.g:9572:1: rule__Foot__Group_2_1_0_0_1_1__2 : rule__Foot__Group_2_1_0_0_1_1__2__Impl ;
    public final void rule__Foot__Group_2_1_0_0_1_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9576:1: ( rule__Foot__Group_2_1_0_0_1_1__2__Impl )
            // InternalIDSLParser.g:9577:2: rule__Foot__Group_2_1_0_0_1_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_1__2"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_1__2__Impl"
    // InternalIDSLParser.g:9583:1: rule__Foot__Group_2_1_0_0_1_1__2__Impl : ( ( rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 ) ) ;
    public final void rule__Foot__Group_2_1_0_0_1_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9587:1: ( ( ( rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 ) ) )
            // InternalIDSLParser.g:9588:1: ( ( rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 ) )
            {
            // InternalIDSLParser.g:9588:1: ( ( rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 ) )
            // InternalIDSLParser.g:9589:2: ( rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgpatternAssignment_2_1_0_0_1_1_2()); 
            }
            // InternalIDSLParser.g:9590:2: ( rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 )
            // InternalIDSLParser.g:9590:3: rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgpatternAssignment_2_1_0_0_1_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_1__2__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_2__0"
    // InternalIDSLParser.g:9599:1: rule__Foot__Group_2_1_0_0_1_2__0 : rule__Foot__Group_2_1_0_0_1_2__0__Impl rule__Foot__Group_2_1_0_0_1_2__1 ;
    public final void rule__Foot__Group_2_1_0_0_1_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9603:1: ( rule__Foot__Group_2_1_0_0_1_2__0__Impl rule__Foot__Group_2_1_0_0_1_2__1 )
            // InternalIDSLParser.g:9604:2: rule__Foot__Group_2_1_0_0_1_2__0__Impl rule__Foot__Group_2_1_0_0_1_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group_2_1_0_0_1_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_2__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_2__0__Impl"
    // InternalIDSLParser.g:9611:1: rule__Foot__Group_2_1_0_0_1_2__0__Impl : ( Bgimage ) ;
    public final void rule__Foot__Group_2_1_0_0_1_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9615:1: ( ( Bgimage ) )
            // InternalIDSLParser.g:9616:1: ( Bgimage )
            {
            // InternalIDSLParser.g:9616:1: ( Bgimage )
            // InternalIDSLParser.g:9617:2: Bgimage
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgimageKeyword_2_1_0_0_1_2_0()); 
            }
            match(input,Bgimage,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgimageKeyword_2_1_0_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_2__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_2__1"
    // InternalIDSLParser.g:9626:1: rule__Foot__Group_2_1_0_0_1_2__1 : rule__Foot__Group_2_1_0_0_1_2__1__Impl rule__Foot__Group_2_1_0_0_1_2__2 ;
    public final void rule__Foot__Group_2_1_0_0_1_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9630:1: ( rule__Foot__Group_2_1_0_0_1_2__1__Impl rule__Foot__Group_2_1_0_0_1_2__2 )
            // InternalIDSLParser.g:9631:2: rule__Foot__Group_2_1_0_0_1_2__1__Impl rule__Foot__Group_2_1_0_0_1_2__2
            {
            pushFollow(FOLLOW_7);
            rule__Foot__Group_2_1_0_0_1_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_2__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_2__1__Impl"
    // InternalIDSLParser.g:9638:1: rule__Foot__Group_2_1_0_0_1_2__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group_2_1_0_0_1_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9642:1: ( ( Colon ) )
            // InternalIDSLParser.g:9643:1: ( Colon )
            {
            // InternalIDSLParser.g:9643:1: ( Colon )
            // InternalIDSLParser.g:9644:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_2_1_0_0_1_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_2_1_0_0_1_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_2__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_2__2"
    // InternalIDSLParser.g:9653:1: rule__Foot__Group_2_1_0_0_1_2__2 : rule__Foot__Group_2_1_0_0_1_2__2__Impl ;
    public final void rule__Foot__Group_2_1_0_0_1_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9657:1: ( rule__Foot__Group_2_1_0_0_1_2__2__Impl )
            // InternalIDSLParser.g:9658:2: rule__Foot__Group_2_1_0_0_1_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_0_1_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_2__2"


    // $ANTLR start "rule__Foot__Group_2_1_0_0_1_2__2__Impl"
    // InternalIDSLParser.g:9664:1: rule__Foot__Group_2_1_0_0_1_2__2__Impl : ( ( rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 ) ) ;
    public final void rule__Foot__Group_2_1_0_0_1_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9668:1: ( ( ( rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 ) ) )
            // InternalIDSLParser.g:9669:1: ( ( rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 ) )
            {
            // InternalIDSLParser.g:9669:1: ( ( rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 ) )
            // InternalIDSLParser.g:9670:2: ( rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgimageAssignment_2_1_0_0_1_2_2()); 
            }
            // InternalIDSLParser.g:9671:2: ( rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 )
            // InternalIDSLParser.g:9671:3: rule__Foot__BgimageAssignment_2_1_0_0_1_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__BgimageAssignment_2_1_0_0_1_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgimageAssignment_2_1_0_0_1_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_0_1_2__2__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_1__0"
    // InternalIDSLParser.g:9680:1: rule__Foot__Group_2_1_0_1__0 : rule__Foot__Group_2_1_0_1__0__Impl rule__Foot__Group_2_1_0_1__1 ;
    public final void rule__Foot__Group_2_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9684:1: ( rule__Foot__Group_2_1_0_1__0__Impl rule__Foot__Group_2_1_0_1__1 )
            // InternalIDSLParser.g:9685:2: rule__Foot__Group_2_1_0_1__0__Impl rule__Foot__Group_2_1_0_1__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group_2_1_0_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_1__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_1__0__Impl"
    // InternalIDSLParser.g:9692:1: rule__Foot__Group_2_1_0_1__0__Impl : ( Position ) ;
    public final void rule__Foot__Group_2_1_0_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9696:1: ( ( Position ) )
            // InternalIDSLParser.g:9697:1: ( Position )
            {
            // InternalIDSLParser.g:9697:1: ( Position )
            // InternalIDSLParser.g:9698:2: Position
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getPositionKeyword_2_1_0_1_0()); 
            }
            match(input,Position,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getPositionKeyword_2_1_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_1__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_1__1"
    // InternalIDSLParser.g:9707:1: rule__Foot__Group_2_1_0_1__1 : rule__Foot__Group_2_1_0_1__1__Impl rule__Foot__Group_2_1_0_1__2 ;
    public final void rule__Foot__Group_2_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9711:1: ( rule__Foot__Group_2_1_0_1__1__Impl rule__Foot__Group_2_1_0_1__2 )
            // InternalIDSLParser.g:9712:2: rule__Foot__Group_2_1_0_1__1__Impl rule__Foot__Group_2_1_0_1__2
            {
            pushFollow(FOLLOW_8);
            rule__Foot__Group_2_1_0_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_1__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_1__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_1__1__Impl"
    // InternalIDSLParser.g:9719:1: rule__Foot__Group_2_1_0_1__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group_2_1_0_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9723:1: ( ( Colon ) )
            // InternalIDSLParser.g:9724:1: ( Colon )
            {
            // InternalIDSLParser.g:9724:1: ( Colon )
            // InternalIDSLParser.g:9725:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_2_1_0_1_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_2_1_0_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_1__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_1__2"
    // InternalIDSLParser.g:9734:1: rule__Foot__Group_2_1_0_1__2 : rule__Foot__Group_2_1_0_1__2__Impl ;
    public final void rule__Foot__Group_2_1_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9738:1: ( rule__Foot__Group_2_1_0_1__2__Impl )
            // InternalIDSLParser.g:9739:2: rule__Foot__Group_2_1_0_1__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_1__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_1__2"


    // $ANTLR start "rule__Foot__Group_2_1_0_1__2__Impl"
    // InternalIDSLParser.g:9745:1: rule__Foot__Group_2_1_0_1__2__Impl : ( ( rule__Foot__PositionAssignment_2_1_0_1_2 ) ) ;
    public final void rule__Foot__Group_2_1_0_1__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9749:1: ( ( ( rule__Foot__PositionAssignment_2_1_0_1_2 ) ) )
            // InternalIDSLParser.g:9750:1: ( ( rule__Foot__PositionAssignment_2_1_0_1_2 ) )
            {
            // InternalIDSLParser.g:9750:1: ( ( rule__Foot__PositionAssignment_2_1_0_1_2 ) )
            // InternalIDSLParser.g:9751:2: ( rule__Foot__PositionAssignment_2_1_0_1_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getPositionAssignment_2_1_0_1_2()); 
            }
            // InternalIDSLParser.g:9752:2: ( rule__Foot__PositionAssignment_2_1_0_1_2 )
            // InternalIDSLParser.g:9752:3: rule__Foot__PositionAssignment_2_1_0_1_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__PositionAssignment_2_1_0_1_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getPositionAssignment_2_1_0_1_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_1__2__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_2__0"
    // InternalIDSLParser.g:9761:1: rule__Foot__Group_2_1_0_2__0 : rule__Foot__Group_2_1_0_2__0__Impl rule__Foot__Group_2_1_0_2__1 ;
    public final void rule__Foot__Group_2_1_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9765:1: ( rule__Foot__Group_2_1_0_2__0__Impl rule__Foot__Group_2_1_0_2__1 )
            // InternalIDSLParser.g:9766:2: rule__Foot__Group_2_1_0_2__0__Impl rule__Foot__Group_2_1_0_2__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group_2_1_0_2__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_2__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_2__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_2__0__Impl"
    // InternalIDSLParser.g:9773:1: rule__Foot__Group_2_1_0_2__0__Impl : ( Size ) ;
    public final void rule__Foot__Group_2_1_0_2__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9777:1: ( ( Size ) )
            // InternalIDSLParser.g:9778:1: ( Size )
            {
            // InternalIDSLParser.g:9778:1: ( Size )
            // InternalIDSLParser.g:9779:2: Size
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getSizeKeyword_2_1_0_2_0()); 
            }
            match(input,Size,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getSizeKeyword_2_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_2__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_2__1"
    // InternalIDSLParser.g:9788:1: rule__Foot__Group_2_1_0_2__1 : rule__Foot__Group_2_1_0_2__1__Impl rule__Foot__Group_2_1_0_2__2 ;
    public final void rule__Foot__Group_2_1_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9792:1: ( rule__Foot__Group_2_1_0_2__1__Impl rule__Foot__Group_2_1_0_2__2 )
            // InternalIDSLParser.g:9793:2: rule__Foot__Group_2_1_0_2__1__Impl rule__Foot__Group_2_1_0_2__2
            {
            pushFollow(FOLLOW_8);
            rule__Foot__Group_2_1_0_2__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_2__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_2__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_2__1__Impl"
    // InternalIDSLParser.g:9800:1: rule__Foot__Group_2_1_0_2__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group_2_1_0_2__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9804:1: ( ( Colon ) )
            // InternalIDSLParser.g:9805:1: ( Colon )
            {
            // InternalIDSLParser.g:9805:1: ( Colon )
            // InternalIDSLParser.g:9806:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_2_1_0_2_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_2_1_0_2_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_2__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_2__2"
    // InternalIDSLParser.g:9815:1: rule__Foot__Group_2_1_0_2__2 : rule__Foot__Group_2_1_0_2__2__Impl ;
    public final void rule__Foot__Group_2_1_0_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9819:1: ( rule__Foot__Group_2_1_0_2__2__Impl )
            // InternalIDSLParser.g:9820:2: rule__Foot__Group_2_1_0_2__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_2__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_2__2"


    // $ANTLR start "rule__Foot__Group_2_1_0_2__2__Impl"
    // InternalIDSLParser.g:9826:1: rule__Foot__Group_2_1_0_2__2__Impl : ( ( rule__Foot__SizeAssignment_2_1_0_2_2 ) ) ;
    public final void rule__Foot__Group_2_1_0_2__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9830:1: ( ( ( rule__Foot__SizeAssignment_2_1_0_2_2 ) ) )
            // InternalIDSLParser.g:9831:1: ( ( rule__Foot__SizeAssignment_2_1_0_2_2 ) )
            {
            // InternalIDSLParser.g:9831:1: ( ( rule__Foot__SizeAssignment_2_1_0_2_2 ) )
            // InternalIDSLParser.g:9832:2: ( rule__Foot__SizeAssignment_2_1_0_2_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getSizeAssignment_2_1_0_2_2()); 
            }
            // InternalIDSLParser.g:9833:2: ( rule__Foot__SizeAssignment_2_1_0_2_2 )
            // InternalIDSLParser.g:9833:3: rule__Foot__SizeAssignment_2_1_0_2_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__SizeAssignment_2_1_0_2_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getSizeAssignment_2_1_0_2_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_2__2__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_3__0"
    // InternalIDSLParser.g:9842:1: rule__Foot__Group_2_1_0_3__0 : rule__Foot__Group_2_1_0_3__0__Impl rule__Foot__Group_2_1_0_3__1 ;
    public final void rule__Foot__Group_2_1_0_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9846:1: ( rule__Foot__Group_2_1_0_3__0__Impl rule__Foot__Group_2_1_0_3__1 )
            // InternalIDSLParser.g:9847:2: rule__Foot__Group_2_1_0_3__0__Impl rule__Foot__Group_2_1_0_3__1
            {
            pushFollow(FOLLOW_3);
            rule__Foot__Group_2_1_0_3__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_3__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_3__0"


    // $ANTLR start "rule__Foot__Group_2_1_0_3__0__Impl"
    // InternalIDSLParser.g:9854:1: rule__Foot__Group_2_1_0_3__0__Impl : ( Text ) ;
    public final void rule__Foot__Group_2_1_0_3__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9858:1: ( ( Text ) )
            // InternalIDSLParser.g:9859:1: ( Text )
            {
            // InternalIDSLParser.g:9859:1: ( Text )
            // InternalIDSLParser.g:9860:2: Text
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getTextKeyword_2_1_0_3_0()); 
            }
            match(input,Text,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getTextKeyword_2_1_0_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_3__0__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_3__1"
    // InternalIDSLParser.g:9869:1: rule__Foot__Group_2_1_0_3__1 : rule__Foot__Group_2_1_0_3__1__Impl rule__Foot__Group_2_1_0_3__2 ;
    public final void rule__Foot__Group_2_1_0_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9873:1: ( rule__Foot__Group_2_1_0_3__1__Impl rule__Foot__Group_2_1_0_3__2 )
            // InternalIDSLParser.g:9874:2: rule__Foot__Group_2_1_0_3__1__Impl rule__Foot__Group_2_1_0_3__2
            {
            pushFollow(FOLLOW_7);
            rule__Foot__Group_2_1_0_3__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_3__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_3__1"


    // $ANTLR start "rule__Foot__Group_2_1_0_3__1__Impl"
    // InternalIDSLParser.g:9881:1: rule__Foot__Group_2_1_0_3__1__Impl : ( Colon ) ;
    public final void rule__Foot__Group_2_1_0_3__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9885:1: ( ( Colon ) )
            // InternalIDSLParser.g:9886:1: ( Colon )
            {
            // InternalIDSLParser.g:9886:1: ( Colon )
            // InternalIDSLParser.g:9887:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getColonKeyword_2_1_0_3_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getColonKeyword_2_1_0_3_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_3__1__Impl"


    // $ANTLR start "rule__Foot__Group_2_1_0_3__2"
    // InternalIDSLParser.g:9896:1: rule__Foot__Group_2_1_0_3__2 : rule__Foot__Group_2_1_0_3__2__Impl ;
    public final void rule__Foot__Group_2_1_0_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9900:1: ( rule__Foot__Group_2_1_0_3__2__Impl )
            // InternalIDSLParser.g:9901:2: rule__Foot__Group_2_1_0_3__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__Group_2_1_0_3__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_3__2"


    // $ANTLR start "rule__Foot__Group_2_1_0_3__2__Impl"
    // InternalIDSLParser.g:9907:1: rule__Foot__Group_2_1_0_3__2__Impl : ( ( rule__Foot__TextAssignment_2_1_0_3_2 ) ) ;
    public final void rule__Foot__Group_2_1_0_3__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9911:1: ( ( ( rule__Foot__TextAssignment_2_1_0_3_2 ) ) )
            // InternalIDSLParser.g:9912:1: ( ( rule__Foot__TextAssignment_2_1_0_3_2 ) )
            {
            // InternalIDSLParser.g:9912:1: ( ( rule__Foot__TextAssignment_2_1_0_3_2 ) )
            // InternalIDSLParser.g:9913:2: ( rule__Foot__TextAssignment_2_1_0_3_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getTextAssignment_2_1_0_3_2()); 
            }
            // InternalIDSLParser.g:9914:2: ( rule__Foot__TextAssignment_2_1_0_3_2 )
            // InternalIDSLParser.g:9914:3: rule__Foot__TextAssignment_2_1_0_3_2
            {
            pushFollow(FOLLOW_2);
            rule__Foot__TextAssignment_2_1_0_3_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getTextAssignment_2_1_0_3_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__Group_2_1_0_3__2__Impl"


    // $ANTLR start "rule__Color__Group_0__0"
    // InternalIDSLParser.g:9923:1: rule__Color__Group_0__0 : rule__Color__Group_0__0__Impl rule__Color__Group_0__1 ;
    public final void rule__Color__Group_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9927:1: ( rule__Color__Group_0__0__Impl rule__Color__Group_0__1 )
            // InternalIDSLParser.g:9928:2: rule__Color__Group_0__0__Impl rule__Color__Group_0__1
            {
            pushFollow(FOLLOW_35);
            rule__Color__Group_0__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Color__Group_0__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_0__0"


    // $ANTLR start "rule__Color__Group_0__0__Impl"
    // InternalIDSLParser.g:9935:1: rule__Color__Group_0__0__Impl : ( () ) ;
    public final void rule__Color__Group_0__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9939:1: ( ( () ) )
            // InternalIDSLParser.g:9940:1: ( () )
            {
            // InternalIDSLParser.g:9940:1: ( () )
            // InternalIDSLParser.g:9941:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorAccess().getColorAction_0_0()); 
            }
            // InternalIDSLParser.g:9942:2: ()
            // InternalIDSLParser.g:9942:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorAccess().getColorAction_0_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_0__0__Impl"


    // $ANTLR start "rule__Color__Group_0__1"
    // InternalIDSLParser.g:9950:1: rule__Color__Group_0__1 : rule__Color__Group_0__1__Impl ;
    public final void rule__Color__Group_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9954:1: ( rule__Color__Group_0__1__Impl )
            // InternalIDSLParser.g:9955:2: rule__Color__Group_0__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Color__Group_0__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_0__1"


    // $ANTLR start "rule__Color__Group_0__1__Impl"
    // InternalIDSLParser.g:9961:1: rule__Color__Group_0__1__Impl : ( ( rule__Color__ColorAssignment_0_1 ) ) ;
    public final void rule__Color__Group_0__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9965:1: ( ( ( rule__Color__ColorAssignment_0_1 ) ) )
            // InternalIDSLParser.g:9966:1: ( ( rule__Color__ColorAssignment_0_1 ) )
            {
            // InternalIDSLParser.g:9966:1: ( ( rule__Color__ColorAssignment_0_1 ) )
            // InternalIDSLParser.g:9967:2: ( rule__Color__ColorAssignment_0_1 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorAccess().getColorAssignment_0_1()); 
            }
            // InternalIDSLParser.g:9968:2: ( rule__Color__ColorAssignment_0_1 )
            // InternalIDSLParser.g:9968:3: rule__Color__ColorAssignment_0_1
            {
            pushFollow(FOLLOW_2);
            rule__Color__ColorAssignment_0_1();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorAccess().getColorAssignment_0_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_0__1__Impl"


    // $ANTLR start "rule__Color__Group_1__0"
    // InternalIDSLParser.g:9977:1: rule__Color__Group_1__0 : rule__Color__Group_1__0__Impl rule__Color__Group_1__1 ;
    public final void rule__Color__Group_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9981:1: ( rule__Color__Group_1__0__Impl rule__Color__Group_1__1 )
            // InternalIDSLParser.g:9982:2: rule__Color__Group_1__0__Impl rule__Color__Group_1__1
            {
            pushFollow(FOLLOW_5);
            rule__Color__Group_1__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__Color__Group_1__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_1__0"


    // $ANTLR start "rule__Color__Group_1__0__Impl"
    // InternalIDSLParser.g:9989:1: rule__Color__Group_1__0__Impl : ( () ) ;
    public final void rule__Color__Group_1__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:9993:1: ( ( () ) )
            // InternalIDSLParser.g:9994:1: ( () )
            {
            // InternalIDSLParser.g:9994:1: ( () )
            // InternalIDSLParser.g:9995:2: ()
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorAccess().getColorAction_1_0()); 
            }
            // InternalIDSLParser.g:9996:2: ()
            // InternalIDSLParser.g:9996:3: 
            {
            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorAccess().getColorAction_1_0()); 
            }

            }


            }

        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_1__0__Impl"


    // $ANTLR start "rule__Color__Group_1__1"
    // InternalIDSLParser.g:10004:1: rule__Color__Group_1__1 : rule__Color__Group_1__1__Impl ;
    public final void rule__Color__Group_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10008:1: ( rule__Color__Group_1__1__Impl )
            // InternalIDSLParser.g:10009:2: rule__Color__Group_1__1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Color__Group_1__1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_1__1"


    // $ANTLR start "rule__Color__Group_1__1__Impl"
    // InternalIDSLParser.g:10015:1: rule__Color__Group_1__1__Impl : ( RULE_COLOR_HEX ) ;
    public final void rule__Color__Group_1__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10019:1: ( ( RULE_COLOR_HEX ) )
            // InternalIDSLParser.g:10020:1: ( RULE_COLOR_HEX )
            {
            // InternalIDSLParser.g:10020:1: ( RULE_COLOR_HEX )
            // InternalIDSLParser.g:10021:2: RULE_COLOR_HEX
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorAccess().getCOLOR_HEXTerminalRuleCall_1_1()); 
            }
            match(input,RULE_COLOR_HEX,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorAccess().getCOLOR_HEXTerminalRuleCall_1_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__Group_1__1__Impl"


    // $ANTLR start "rule__FONT__Group__0"
    // InternalIDSLParser.g:10031:1: rule__FONT__Group__0 : rule__FONT__Group__0__Impl rule__FONT__Group__1 ;
    public final void rule__FONT__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10035:1: ( rule__FONT__Group__0__Impl rule__FONT__Group__1 )
            // InternalIDSLParser.g:10036:2: rule__FONT__Group__0__Impl rule__FONT__Group__1
            {
            pushFollow(FOLLOW_16);
            rule__FONT__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FONT__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__Group__0"


    // $ANTLR start "rule__FONT__Group__0__Impl"
    // InternalIDSLParser.g:10043:1: rule__FONT__Group__0__Impl : ( ( rule__FONT__WeightAssignment_0 )? ) ;
    public final void rule__FONT__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10047:1: ( ( ( rule__FONT__WeightAssignment_0 )? ) )
            // InternalIDSLParser.g:10048:1: ( ( rule__FONT__WeightAssignment_0 )? )
            {
            // InternalIDSLParser.g:10048:1: ( ( rule__FONT__WeightAssignment_0 )? )
            // InternalIDSLParser.g:10049:2: ( rule__FONT__WeightAssignment_0 )?
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTAccess().getWeightAssignment_0()); 
            }
            // InternalIDSLParser.g:10050:2: ( rule__FONT__WeightAssignment_0 )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Bold||(LA24_0>=DigitOneDigitZeroDigitZeroSpace && LA24_0<=DigitNineDigitZeroDigitZeroSpace)) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // InternalIDSLParser.g:10050:3: rule__FONT__WeightAssignment_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__FONT__WeightAssignment_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTAccess().getWeightAssignment_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__Group__0__Impl"


    // $ANTLR start "rule__FONT__Group__1"
    // InternalIDSLParser.g:10058:1: rule__FONT__Group__1 : rule__FONT__Group__1__Impl rule__FONT__Group__2 ;
    public final void rule__FONT__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10062:1: ( rule__FONT__Group__1__Impl rule__FONT__Group__2 )
            // InternalIDSLParser.g:10063:2: rule__FONT__Group__1__Impl rule__FONT__Group__2
            {
            pushFollow(FOLLOW_36);
            rule__FONT__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__FONT__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__Group__1"


    // $ANTLR start "rule__FONT__Group__1__Impl"
    // InternalIDSLParser.g:10070:1: rule__FONT__Group__1__Impl : ( RULE_FONT_SIZE ) ;
    public final void rule__FONT__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10074:1: ( ( RULE_FONT_SIZE ) )
            // InternalIDSLParser.g:10075:1: ( RULE_FONT_SIZE )
            {
            // InternalIDSLParser.g:10075:1: ( RULE_FONT_SIZE )
            // InternalIDSLParser.g:10076:2: RULE_FONT_SIZE
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTAccess().getFONT_SIZETerminalRuleCall_1()); 
            }
            match(input,RULE_FONT_SIZE,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTAccess().getFONT_SIZETerminalRuleCall_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__Group__1__Impl"


    // $ANTLR start "rule__FONT__Group__2"
    // InternalIDSLParser.g:10085:1: rule__FONT__Group__2 : rule__FONT__Group__2__Impl ;
    public final void rule__FONT__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10089:1: ( rule__FONT__Group__2__Impl )
            // InternalIDSLParser.g:10090:2: rule__FONT__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__FONT__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__Group__2"


    // $ANTLR start "rule__FONT__Group__2__Impl"
    // InternalIDSLParser.g:10096:1: rule__FONT__Group__2__Impl : ( ( rule__FONT__FamilyAssignment_2 ) ) ;
    public final void rule__FONT__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10100:1: ( ( ( rule__FONT__FamilyAssignment_2 ) ) )
            // InternalIDSLParser.g:10101:1: ( ( rule__FONT__FamilyAssignment_2 ) )
            {
            // InternalIDSLParser.g:10101:1: ( ( rule__FONT__FamilyAssignment_2 ) )
            // InternalIDSLParser.g:10102:2: ( rule__FONT__FamilyAssignment_2 )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTAccess().getFamilyAssignment_2()); 
            }
            // InternalIDSLParser.g:10103:2: ( rule__FONT__FamilyAssignment_2 )
            // InternalIDSLParser.g:10103:3: rule__FONT__FamilyAssignment_2
            {
            pushFollow(FOLLOW_2);
            rule__FONT__FamilyAssignment_2();

            state._fsp--;
            if (state.failed) return ;

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTAccess().getFamilyAssignment_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__Group__2__Impl"


    // $ANTLR start "rule__ChartData__Group__0"
    // InternalIDSLParser.g:10112:1: rule__ChartData__Group__0 : rule__ChartData__Group__0__Impl rule__ChartData__Group__1 ;
    public final void rule__ChartData__Group__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10116:1: ( rule__ChartData__Group__0__Impl rule__ChartData__Group__1 )
            // InternalIDSLParser.g:10117:2: rule__ChartData__Group__0__Impl rule__ChartData__Group__1
            {
            pushFollow(FOLLOW_3);
            rule__ChartData__Group__0__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ChartData__Group__1();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChartData__Group__0"


    // $ANTLR start "rule__ChartData__Group__0__Impl"
    // InternalIDSLParser.g:10124:1: rule__ChartData__Group__0__Impl : ( RULE_STRING ) ;
    public final void rule__ChartData__Group__0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10128:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:10129:1: ( RULE_STRING )
            {
            // InternalIDSLParser.g:10129:1: ( RULE_STRING )
            // InternalIDSLParser.g:10130:2: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getChartDataAccess().getSTRINGTerminalRuleCall_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getChartDataAccess().getSTRINGTerminalRuleCall_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChartData__Group__0__Impl"


    // $ANTLR start "rule__ChartData__Group__1"
    // InternalIDSLParser.g:10139:1: rule__ChartData__Group__1 : rule__ChartData__Group__1__Impl rule__ChartData__Group__2 ;
    public final void rule__ChartData__Group__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10143:1: ( rule__ChartData__Group__1__Impl rule__ChartData__Group__2 )
            // InternalIDSLParser.g:10144:2: rule__ChartData__Group__1__Impl rule__ChartData__Group__2
            {
            pushFollow(FOLLOW_7);
            rule__ChartData__Group__1__Impl();

            state._fsp--;
            if (state.failed) return ;
            pushFollow(FOLLOW_2);
            rule__ChartData__Group__2();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChartData__Group__1"


    // $ANTLR start "rule__ChartData__Group__1__Impl"
    // InternalIDSLParser.g:10151:1: rule__ChartData__Group__1__Impl : ( Colon ) ;
    public final void rule__ChartData__Group__1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10155:1: ( ( Colon ) )
            // InternalIDSLParser.g:10156:1: ( Colon )
            {
            // InternalIDSLParser.g:10156:1: ( Colon )
            // InternalIDSLParser.g:10157:2: Colon
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getChartDataAccess().getColonKeyword_1()); 
            }
            match(input,Colon,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getChartDataAccess().getColonKeyword_1()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChartData__Group__1__Impl"


    // $ANTLR start "rule__ChartData__Group__2"
    // InternalIDSLParser.g:10166:1: rule__ChartData__Group__2 : rule__ChartData__Group__2__Impl ;
    public final void rule__ChartData__Group__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10170:1: ( rule__ChartData__Group__2__Impl )
            // InternalIDSLParser.g:10171:2: rule__ChartData__Group__2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__ChartData__Group__2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChartData__Group__2"


    // $ANTLR start "rule__ChartData__Group__2__Impl"
    // InternalIDSLParser.g:10177:1: rule__ChartData__Group__2__Impl : ( RULE_STRING ) ;
    public final void rule__ChartData__Group__2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10181:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:10182:1: ( RULE_STRING )
            {
            // InternalIDSLParser.g:10182:1: ( RULE_STRING )
            // InternalIDSLParser.g:10183:2: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getChartDataAccess().getSTRINGTerminalRuleCall_2()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getChartDataAccess().getSTRINGTerminalRuleCall_2()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__ChartData__Group__2__Impl"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup"
    // InternalIDSLParser.g:10193:1: rule__InfographicElementType__UnorderedGroup : rule__InfographicElementType__UnorderedGroup__0 {...}?;
    public final void rule__InfographicElementType__UnorderedGroup() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup());
        	
        try {
            // InternalIDSLParser.g:10198:1: ( rule__InfographicElementType__UnorderedGroup__0 {...}?)
            // InternalIDSLParser.g:10199:2: rule__InfographicElementType__UnorderedGroup__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__UnorderedGroup__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup", "getUnorderedGroupHelper().canLeave(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__Impl"
    // InternalIDSLParser.g:10207:1: rule__InfographicElementType__UnorderedGroup__Impl : ( ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) ) ) ;
    public final void rule__InfographicElementType__UnorderedGroup__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:10212:1: ( ( ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) ) ) )
            // InternalIDSLParser.g:10213:3: ( ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) ) )
            {
            // InternalIDSLParser.g:10213:3: ( ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) ) )
            int alt31=11;
            alt31 = dfa31.predict(input);
            switch (alt31) {
                case 1 :
                    // InternalIDSLParser.g:10214:3: ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10214:3: ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) )
                    // InternalIDSLParser.g:10215:4: {...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0)");
                    }
                    // InternalIDSLParser.g:10215:116: ( ( ( rule__InfographicElementType__Group_0__0 ) ) )
                    // InternalIDSLParser.g:10216:5: ( ( rule__InfographicElementType__Group_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0);
                    selected = true;
                    // InternalIDSLParser.g:10222:5: ( ( rule__InfographicElementType__Group_0__0 ) )
                    // InternalIDSLParser.g:10223:6: ( rule__InfographicElementType__Group_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getGroup_0()); 
                    }
                    // InternalIDSLParser.g:10224:6: ( rule__InfographicElementType__Group_0__0 )
                    // InternalIDSLParser.g:10224:7: rule__InfographicElementType__Group_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__Group_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getGroup_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:10229:3: ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) )
                    {
                    // InternalIDSLParser.g:10229:3: ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) )
                    // InternalIDSLParser.g:10230:4: {...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1)");
                    }
                    // InternalIDSLParser.g:10230:116: ( ( ( rule__InfographicElementType__Alternatives_1 ) ) )
                    // InternalIDSLParser.g:10231:5: ( ( rule__InfographicElementType__Alternatives_1 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1);
                    selected = true;
                    // InternalIDSLParser.g:10237:5: ( ( rule__InfographicElementType__Alternatives_1 ) )
                    // InternalIDSLParser.g:10238:6: ( rule__InfographicElementType__Alternatives_1 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getAlternatives_1()); 
                    }
                    // InternalIDSLParser.g:10239:6: ( rule__InfographicElementType__Alternatives_1 )
                    // InternalIDSLParser.g:10239:7: rule__InfographicElementType__Alternatives_1
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__Alternatives_1();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getAlternatives_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:10244:3: ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10244:3: ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) )
                    // InternalIDSLParser.g:10245:4: {...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2)");
                    }
                    // InternalIDSLParser.g:10245:116: ( ( ( rule__InfographicElementType__Group_2__0 ) ) )
                    // InternalIDSLParser.g:10246:5: ( ( rule__InfographicElementType__Group_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2);
                    selected = true;
                    // InternalIDSLParser.g:10252:5: ( ( rule__InfographicElementType__Group_2__0 ) )
                    // InternalIDSLParser.g:10253:6: ( rule__InfographicElementType__Group_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getGroup_2()); 
                    }
                    // InternalIDSLParser.g:10254:6: ( rule__InfographicElementType__Group_2__0 )
                    // InternalIDSLParser.g:10254:7: rule__InfographicElementType__Group_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__Group_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getGroup_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:10259:3: ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) )
                    {
                    // InternalIDSLParser.g:10259:3: ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) )
                    // InternalIDSLParser.g:10260:4: {...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3)");
                    }
                    // InternalIDSLParser.g:10260:116: ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) )
                    // InternalIDSLParser.g:10261:5: ( ( rule__InfographicElementType__HeadAssignment_3 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3);
                    selected = true;
                    // InternalIDSLParser.g:10267:5: ( ( rule__InfographicElementType__HeadAssignment_3 ) )
                    // InternalIDSLParser.g:10268:6: ( rule__InfographicElementType__HeadAssignment_3 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getHeadAssignment_3()); 
                    }
                    // InternalIDSLParser.g:10269:6: ( rule__InfographicElementType__HeadAssignment_3 )
                    // InternalIDSLParser.g:10269:7: rule__InfographicElementType__HeadAssignment_3
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__HeadAssignment_3();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getHeadAssignment_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:10274:3: ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) )
                    {
                    // InternalIDSLParser.g:10274:3: ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) )
                    // InternalIDSLParser.g:10275:4: {...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4)");
                    }
                    // InternalIDSLParser.g:10275:116: ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) )
                    // InternalIDSLParser.g:10276:5: ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4);
                    selected = true;
                    // InternalIDSLParser.g:10282:5: ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) )
                    // InternalIDSLParser.g:10283:6: ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* )
                    {
                    // InternalIDSLParser.g:10283:6: ( ( rule__InfographicElementType__BoxesAssignment_4 ) )
                    // InternalIDSLParser.g:10284:7: ( rule__InfographicElementType__BoxesAssignment_4 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getBoxesAssignment_4()); 
                    }
                    // InternalIDSLParser.g:10285:7: ( rule__InfographicElementType__BoxesAssignment_4 )
                    // InternalIDSLParser.g:10285:8: rule__InfographicElementType__BoxesAssignment_4
                    {
                    pushFollow(FOLLOW_37);
                    rule__InfographicElementType__BoxesAssignment_4();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getBoxesAssignment_4()); 
                    }

                    }

                    // InternalIDSLParser.g:10288:6: ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* )
                    // InternalIDSLParser.g:10289:7: ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getBoxesAssignment_4()); 
                    }
                    // InternalIDSLParser.g:10290:7: ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )*
                    loop25:
                    do {
                        int alt25=2;
                        alt25 = dfa25.predict(input);
                        switch (alt25) {
                    	case 1 :
                    	    // InternalIDSLParser.g:10290:8: ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4
                    	    {
                    	    pushFollow(FOLLOW_37);
                    	    rule__InfographicElementType__BoxesAssignment_4();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getBoxesAssignment_4()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:10296:3: ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) )
                    {
                    // InternalIDSLParser.g:10296:3: ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) )
                    // InternalIDSLParser.g:10297:4: {...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5)");
                    }
                    // InternalIDSLParser.g:10297:116: ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) )
                    // InternalIDSLParser.g:10298:5: ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5);
                    selected = true;
                    // InternalIDSLParser.g:10304:5: ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) )
                    // InternalIDSLParser.g:10305:6: ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* )
                    {
                    // InternalIDSLParser.g:10305:6: ( ( rule__InfographicElementType__TextsAssignment_5 ) )
                    // InternalIDSLParser.g:10306:7: ( rule__InfographicElementType__TextsAssignment_5 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getTextsAssignment_5()); 
                    }
                    // InternalIDSLParser.g:10307:7: ( rule__InfographicElementType__TextsAssignment_5 )
                    // InternalIDSLParser.g:10307:8: rule__InfographicElementType__TextsAssignment_5
                    {
                    pushFollow(FOLLOW_38);
                    rule__InfographicElementType__TextsAssignment_5();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getTextsAssignment_5()); 
                    }

                    }

                    // InternalIDSLParser.g:10310:6: ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* )
                    // InternalIDSLParser.g:10311:7: ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getTextsAssignment_5()); 
                    }
                    // InternalIDSLParser.g:10312:7: ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )*
                    loop26:
                    do {
                        int alt26=2;
                        alt26 = dfa26.predict(input);
                        switch (alt26) {
                    	case 1 :
                    	    // InternalIDSLParser.g:10312:8: ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5
                    	    {
                    	    pushFollow(FOLLOW_38);
                    	    rule__InfographicElementType__TextsAssignment_5();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getTextsAssignment_5()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:10318:3: ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) )
                    {
                    // InternalIDSLParser.g:10318:3: ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) )
                    // InternalIDSLParser.g:10319:4: {...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6)");
                    }
                    // InternalIDSLParser.g:10319:116: ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) )
                    // InternalIDSLParser.g:10320:5: ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6);
                    selected = true;
                    // InternalIDSLParser.g:10326:5: ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) )
                    // InternalIDSLParser.g:10327:6: ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* )
                    {
                    // InternalIDSLParser.g:10327:6: ( ( rule__InfographicElementType__ImagesAssignment_6 ) )
                    // InternalIDSLParser.g:10328:7: ( rule__InfographicElementType__ImagesAssignment_6 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getImagesAssignment_6()); 
                    }
                    // InternalIDSLParser.g:10329:7: ( rule__InfographicElementType__ImagesAssignment_6 )
                    // InternalIDSLParser.g:10329:8: rule__InfographicElementType__ImagesAssignment_6
                    {
                    pushFollow(FOLLOW_39);
                    rule__InfographicElementType__ImagesAssignment_6();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getImagesAssignment_6()); 
                    }

                    }

                    // InternalIDSLParser.g:10332:6: ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* )
                    // InternalIDSLParser.g:10333:7: ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getImagesAssignment_6()); 
                    }
                    // InternalIDSLParser.g:10334:7: ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )*
                    loop27:
                    do {
                        int alt27=2;
                        alt27 = dfa27.predict(input);
                        switch (alt27) {
                    	case 1 :
                    	    // InternalIDSLParser.g:10334:8: ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6
                    	    {
                    	    pushFollow(FOLLOW_39);
                    	    rule__InfographicElementType__ImagesAssignment_6();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getImagesAssignment_6()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalIDSLParser.g:10340:3: ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) )
                    {
                    // InternalIDSLParser.g:10340:3: ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) )
                    // InternalIDSLParser.g:10341:4: {...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7)");
                    }
                    // InternalIDSLParser.g:10341:116: ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) )
                    // InternalIDSLParser.g:10342:5: ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7);
                    selected = true;
                    // InternalIDSLParser.g:10348:5: ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) )
                    // InternalIDSLParser.g:10349:6: ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* )
                    {
                    // InternalIDSLParser.g:10349:6: ( ( rule__InfographicElementType__PiechartsAssignment_7 ) )
                    // InternalIDSLParser.g:10350:7: ( rule__InfographicElementType__PiechartsAssignment_7 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getPiechartsAssignment_7()); 
                    }
                    // InternalIDSLParser.g:10351:7: ( rule__InfographicElementType__PiechartsAssignment_7 )
                    // InternalIDSLParser.g:10351:8: rule__InfographicElementType__PiechartsAssignment_7
                    {
                    pushFollow(FOLLOW_40);
                    rule__InfographicElementType__PiechartsAssignment_7();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getPiechartsAssignment_7()); 
                    }

                    }

                    // InternalIDSLParser.g:10354:6: ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* )
                    // InternalIDSLParser.g:10355:7: ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getPiechartsAssignment_7()); 
                    }
                    // InternalIDSLParser.g:10356:7: ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )*
                    loop28:
                    do {
                        int alt28=2;
                        alt28 = dfa28.predict(input);
                        switch (alt28) {
                    	case 1 :
                    	    // InternalIDSLParser.g:10356:8: ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7
                    	    {
                    	    pushFollow(FOLLOW_40);
                    	    rule__InfographicElementType__PiechartsAssignment_7();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getPiechartsAssignment_7()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 9 :
                    // InternalIDSLParser.g:10362:3: ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) )
                    {
                    // InternalIDSLParser.g:10362:3: ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) )
                    // InternalIDSLParser.g:10363:4: {...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8)");
                    }
                    // InternalIDSLParser.g:10363:116: ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) )
                    // InternalIDSLParser.g:10364:5: ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8);
                    selected = true;
                    // InternalIDSLParser.g:10370:5: ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) )
                    // InternalIDSLParser.g:10371:6: ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* )
                    {
                    // InternalIDSLParser.g:10371:6: ( ( rule__InfographicElementType__BarchartsAssignment_8 ) )
                    // InternalIDSLParser.g:10372:7: ( rule__InfographicElementType__BarchartsAssignment_8 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getBarchartsAssignment_8()); 
                    }
                    // InternalIDSLParser.g:10373:7: ( rule__InfographicElementType__BarchartsAssignment_8 )
                    // InternalIDSLParser.g:10373:8: rule__InfographicElementType__BarchartsAssignment_8
                    {
                    pushFollow(FOLLOW_41);
                    rule__InfographicElementType__BarchartsAssignment_8();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getBarchartsAssignment_8()); 
                    }

                    }

                    // InternalIDSLParser.g:10376:6: ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* )
                    // InternalIDSLParser.g:10377:7: ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getBarchartsAssignment_8()); 
                    }
                    // InternalIDSLParser.g:10378:7: ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )*
                    loop29:
                    do {
                        int alt29=2;
                        alt29 = dfa29.predict(input);
                        switch (alt29) {
                    	case 1 :
                    	    // InternalIDSLParser.g:10378:8: ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8
                    	    {
                    	    pushFollow(FOLLOW_41);
                    	    rule__InfographicElementType__BarchartsAssignment_8();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop29;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getBarchartsAssignment_8()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 10 :
                    // InternalIDSLParser.g:10384:3: ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) )
                    {
                    // InternalIDSLParser.g:10384:3: ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) )
                    // InternalIDSLParser.g:10385:4: {...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9)");
                    }
                    // InternalIDSLParser.g:10385:116: ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) )
                    // InternalIDSLParser.g:10386:5: ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9);
                    selected = true;
                    // InternalIDSLParser.g:10392:5: ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) )
                    // InternalIDSLParser.g:10393:6: ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* )
                    {
                    // InternalIDSLParser.g:10393:6: ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) )
                    // InternalIDSLParser.g:10394:7: ( rule__InfographicElementType__PicturegraphsAssignment_9 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getPicturegraphsAssignment_9()); 
                    }
                    // InternalIDSLParser.g:10395:7: ( rule__InfographicElementType__PicturegraphsAssignment_9 )
                    // InternalIDSLParser.g:10395:8: rule__InfographicElementType__PicturegraphsAssignment_9
                    {
                    pushFollow(FOLLOW_42);
                    rule__InfographicElementType__PicturegraphsAssignment_9();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getPicturegraphsAssignment_9()); 
                    }

                    }

                    // InternalIDSLParser.g:10398:6: ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* )
                    // InternalIDSLParser.g:10399:7: ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )*
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getPicturegraphsAssignment_9()); 
                    }
                    // InternalIDSLParser.g:10400:7: ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )*
                    loop30:
                    do {
                        int alt30=2;
                        alt30 = dfa30.predict(input);
                        switch (alt30) {
                    	case 1 :
                    	    // InternalIDSLParser.g:10400:8: ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9
                    	    {
                    	    pushFollow(FOLLOW_42);
                    	    rule__InfographicElementType__PicturegraphsAssignment_9();

                    	    state._fsp--;
                    	    if (state.failed) return ;

                    	    }
                    	    break;

                    	default :
                    	    break loop30;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getPicturegraphsAssignment_9()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 11 :
                    // InternalIDSLParser.g:10406:3: ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) )
                    {
                    // InternalIDSLParser.g:10406:3: ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) )
                    // InternalIDSLParser.g:10407:4: {...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__InfographicElementType__UnorderedGroup__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10)");
                    }
                    // InternalIDSLParser.g:10407:117: ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) )
                    // InternalIDSLParser.g:10408:5: ( ( rule__InfographicElementType__FootAssignment_10 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10);
                    selected = true;
                    // InternalIDSLParser.g:10414:5: ( ( rule__InfographicElementType__FootAssignment_10 ) )
                    // InternalIDSLParser.g:10415:6: ( rule__InfographicElementType__FootAssignment_10 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getInfographicElementTypeAccess().getFootAssignment_10()); 
                    }
                    // InternalIDSLParser.g:10416:6: ( rule__InfographicElementType__FootAssignment_10 )
                    // InternalIDSLParser.g:10416:7: rule__InfographicElementType__FootAssignment_10
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__FootAssignment_10();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getInfographicElementTypeAccess().getFootAssignment_10()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__Impl"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__0"
    // InternalIDSLParser.g:10429:1: rule__InfographicElementType__UnorderedGroup__0 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__1 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10433:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__1 )? )
            // InternalIDSLParser.g:10434:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__1 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10435:2: ( rule__InfographicElementType__UnorderedGroup__1 )?
            int alt32=2;
            alt32 = dfa32.predict(input);
            switch (alt32) {
                case 1 :
                    // InternalIDSLParser.g:10435:2: rule__InfographicElementType__UnorderedGroup__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__0"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__1"
    // InternalIDSLParser.g:10441:1: rule__InfographicElementType__UnorderedGroup__1 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__2 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10445:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__2 )? )
            // InternalIDSLParser.g:10446:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__2 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10447:2: ( rule__InfographicElementType__UnorderedGroup__2 )?
            int alt33=2;
            alt33 = dfa33.predict(input);
            switch (alt33) {
                case 1 :
                    // InternalIDSLParser.g:10447:2: rule__InfographicElementType__UnorderedGroup__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__1"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__2"
    // InternalIDSLParser.g:10453:1: rule__InfographicElementType__UnorderedGroup__2 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__3 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10457:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__3 )? )
            // InternalIDSLParser.g:10458:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__3 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10459:2: ( rule__InfographicElementType__UnorderedGroup__3 )?
            int alt34=2;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // InternalIDSLParser.g:10459:2: rule__InfographicElementType__UnorderedGroup__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__2"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__3"
    // InternalIDSLParser.g:10465:1: rule__InfographicElementType__UnorderedGroup__3 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__4 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10469:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__4 )? )
            // InternalIDSLParser.g:10470:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__4 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10471:2: ( rule__InfographicElementType__UnorderedGroup__4 )?
            int alt35=2;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // InternalIDSLParser.g:10471:2: rule__InfographicElementType__UnorderedGroup__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__3"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__4"
    // InternalIDSLParser.g:10477:1: rule__InfographicElementType__UnorderedGroup__4 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__5 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10481:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__5 )? )
            // InternalIDSLParser.g:10482:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__5 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10483:2: ( rule__InfographicElementType__UnorderedGroup__5 )?
            int alt36=2;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // InternalIDSLParser.g:10483:2: rule__InfographicElementType__UnorderedGroup__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__4"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__5"
    // InternalIDSLParser.g:10489:1: rule__InfographicElementType__UnorderedGroup__5 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__6 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10493:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__6 )? )
            // InternalIDSLParser.g:10494:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__6 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10495:2: ( rule__InfographicElementType__UnorderedGroup__6 )?
            int alt37=2;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // InternalIDSLParser.g:10495:2: rule__InfographicElementType__UnorderedGroup__6
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__5"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__6"
    // InternalIDSLParser.g:10501:1: rule__InfographicElementType__UnorderedGroup__6 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__7 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10505:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__7 )? )
            // InternalIDSLParser.g:10506:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__7 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10507:2: ( rule__InfographicElementType__UnorderedGroup__7 )?
            int alt38=2;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // InternalIDSLParser.g:10507:2: rule__InfographicElementType__UnorderedGroup__7
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__7();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__6"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__7"
    // InternalIDSLParser.g:10513:1: rule__InfographicElementType__UnorderedGroup__7 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__8 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10517:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__8 )? )
            // InternalIDSLParser.g:10518:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__8 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10519:2: ( rule__InfographicElementType__UnorderedGroup__8 )?
            int alt39=2;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // InternalIDSLParser.g:10519:2: rule__InfographicElementType__UnorderedGroup__8
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__8();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__7"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__8"
    // InternalIDSLParser.g:10525:1: rule__InfographicElementType__UnorderedGroup__8 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__9 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10529:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__9 )? )
            // InternalIDSLParser.g:10530:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__9 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10531:2: ( rule__InfographicElementType__UnorderedGroup__9 )?
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // InternalIDSLParser.g:10531:2: rule__InfographicElementType__UnorderedGroup__9
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__8"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__9"
    // InternalIDSLParser.g:10537:1: rule__InfographicElementType__UnorderedGroup__9 : rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__10 )? ;
    public final void rule__InfographicElementType__UnorderedGroup__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10541:1: ( rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__10 )? )
            // InternalIDSLParser.g:10542:2: rule__InfographicElementType__UnorderedGroup__Impl ( rule__InfographicElementType__UnorderedGroup__10 )?
            {
            pushFollow(FOLLOW_43);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10543:2: ( rule__InfographicElementType__UnorderedGroup__10 )?
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // InternalIDSLParser.g:10543:2: rule__InfographicElementType__UnorderedGroup__10
                    {
                    pushFollow(FOLLOW_2);
                    rule__InfographicElementType__UnorderedGroup__10();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__9"


    // $ANTLR start "rule__InfographicElementType__UnorderedGroup__10"
    // InternalIDSLParser.g:10549:1: rule__InfographicElementType__UnorderedGroup__10 : rule__InfographicElementType__UnorderedGroup__Impl ;
    public final void rule__InfographicElementType__UnorderedGroup__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10553:1: ( rule__InfographicElementType__UnorderedGroup__Impl )
            // InternalIDSLParser.g:10554:2: rule__InfographicElementType__UnorderedGroup__Impl
            {
            pushFollow(FOLLOW_2);
            rule__InfographicElementType__UnorderedGroup__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__UnorderedGroup__10"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1"
    // InternalIDSLParser.g:10561:1: rule__Head__UnorderedGroup_2_1_0_1 : ( rule__Head__UnorderedGroup_2_1_0_1__0 )? ;
    public final void rule__Head__UnorderedGroup_2_1_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1());
        	
        try {
            // InternalIDSLParser.g:10566:1: ( ( rule__Head__UnorderedGroup_2_1_0_1__0 )? )
            // InternalIDSLParser.g:10567:2: ( rule__Head__UnorderedGroup_2_1_0_1__0 )?
            {
            // InternalIDSLParser.g:10567:2: ( rule__Head__UnorderedGroup_2_1_0_1__0 )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( ( LA42_0 == Bgpattern || LA42_0 >= Bgcolor && LA42_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt42=1;
            }
            else if ( LA42_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt42=1;
            }
            else if ( LA42_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt42=1;
            }
            else if ( LA42_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt42=1;
            }
            else if ( LA42_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt42=1;
            }
            else if ( LA42_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // InternalIDSLParser.g:10567:2: rule__Head__UnorderedGroup_2_1_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__UnorderedGroup_2_1_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__Impl"
    // InternalIDSLParser.g:10575:1: rule__Head__UnorderedGroup_2_1_0_1__Impl : ( ({...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) ) ) ) ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:10580:1: ( ( ({...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) ) ) ) )
            // InternalIDSLParser.g:10581:3: ( ({...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:10581:3: ( ({...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) ) ) )
            int alt43=6;
            int LA43_0 = input.LA(1);

            if ( ( LA43_0 == Bgpattern || LA43_0 >= Bgcolor && LA43_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt43=1;
            }
            else if ( LA43_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt43=2;
            }
            else if ( LA43_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt43=3;
            }
            else if ( LA43_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt43=4;
            }
            else if ( LA43_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt43=5;
            }
            else if ( LA43_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt43=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // InternalIDSLParser.g:10582:3: ({...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10582:3: ({...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) ) )
                    // InternalIDSLParser.g:10583:4: {...}? => ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Head__UnorderedGroup_2_1_0_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0)");
                    }
                    // InternalIDSLParser.g:10583:106: ( ( ( rule__Head__Alternatives_2_1_0_1_0 ) ) )
                    // InternalIDSLParser.g:10584:5: ( ( rule__Head__Alternatives_2_1_0_1_0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0);
                    selected = true;
                    // InternalIDSLParser.g:10590:5: ( ( rule__Head__Alternatives_2_1_0_1_0 ) )
                    // InternalIDSLParser.g:10591:6: ( rule__Head__Alternatives_2_1_0_1_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getAlternatives_2_1_0_1_0()); 
                    }
                    // InternalIDSLParser.g:10592:6: ( rule__Head__Alternatives_2_1_0_1_0 )
                    // InternalIDSLParser.g:10592:7: rule__Head__Alternatives_2_1_0_1_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Alternatives_2_1_0_1_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getAlternatives_2_1_0_1_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:10597:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10597:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) ) )
                    // InternalIDSLParser.g:10598:4: {...}? => ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Head__UnorderedGroup_2_1_0_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1)");
                    }
                    // InternalIDSLParser.g:10598:106: ( ( ( rule__Head__Group_2_1_0_1_1__0 ) ) )
                    // InternalIDSLParser.g:10599:5: ( ( rule__Head__Group_2_1_0_1_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1);
                    selected = true;
                    // InternalIDSLParser.g:10605:5: ( ( rule__Head__Group_2_1_0_1_1__0 ) )
                    // InternalIDSLParser.g:10606:6: ( rule__Head__Group_2_1_0_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_1()); 
                    }
                    // InternalIDSLParser.g:10607:6: ( rule__Head__Group_2_1_0_1_1__0 )
                    // InternalIDSLParser.g:10607:7: rule__Head__Group_2_1_0_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:10612:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10612:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) ) )
                    // InternalIDSLParser.g:10613:4: {...}? => ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Head__UnorderedGroup_2_1_0_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2)");
                    }
                    // InternalIDSLParser.g:10613:106: ( ( ( rule__Head__Group_2_1_0_1_2__0 ) ) )
                    // InternalIDSLParser.g:10614:5: ( ( rule__Head__Group_2_1_0_1_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2);
                    selected = true;
                    // InternalIDSLParser.g:10620:5: ( ( rule__Head__Group_2_1_0_1_2__0 ) )
                    // InternalIDSLParser.g:10621:6: ( rule__Head__Group_2_1_0_1_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_2()); 
                    }
                    // InternalIDSLParser.g:10622:6: ( rule__Head__Group_2_1_0_1_2__0 )
                    // InternalIDSLParser.g:10622:7: rule__Head__Group_2_1_0_1_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:10627:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10627:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) ) )
                    // InternalIDSLParser.g:10628:4: {...}? => ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Head__UnorderedGroup_2_1_0_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3)");
                    }
                    // InternalIDSLParser.g:10628:106: ( ( ( rule__Head__Group_2_1_0_1_3__0 ) ) )
                    // InternalIDSLParser.g:10629:5: ( ( rule__Head__Group_2_1_0_1_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3);
                    selected = true;
                    // InternalIDSLParser.g:10635:5: ( ( rule__Head__Group_2_1_0_1_3__0 ) )
                    // InternalIDSLParser.g:10636:6: ( rule__Head__Group_2_1_0_1_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_3()); 
                    }
                    // InternalIDSLParser.g:10637:6: ( rule__Head__Group_2_1_0_1_3__0 )
                    // InternalIDSLParser.g:10637:7: rule__Head__Group_2_1_0_1_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:10642:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10642:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) ) )
                    // InternalIDSLParser.g:10643:4: {...}? => ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Head__UnorderedGroup_2_1_0_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4)");
                    }
                    // InternalIDSLParser.g:10643:106: ( ( ( rule__Head__Group_2_1_0_1_4__0 ) ) )
                    // InternalIDSLParser.g:10644:5: ( ( rule__Head__Group_2_1_0_1_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4);
                    selected = true;
                    // InternalIDSLParser.g:10650:5: ( ( rule__Head__Group_2_1_0_1_4__0 ) )
                    // InternalIDSLParser.g:10651:6: ( rule__Head__Group_2_1_0_1_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_4()); 
                    }
                    // InternalIDSLParser.g:10652:6: ( rule__Head__Group_2_1_0_1_4__0 )
                    // InternalIDSLParser.g:10652:7: rule__Head__Group_2_1_0_1_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:10657:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10657:3: ({...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) ) )
                    // InternalIDSLParser.g:10658:4: {...}? => ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Head__UnorderedGroup_2_1_0_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5)");
                    }
                    // InternalIDSLParser.g:10658:106: ( ( ( rule__Head__Group_2_1_0_1_5__0 ) ) )
                    // InternalIDSLParser.g:10659:5: ( ( rule__Head__Group_2_1_0_1_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5);
                    selected = true;
                    // InternalIDSLParser.g:10665:5: ( ( rule__Head__Group_2_1_0_1_5__0 ) )
                    // InternalIDSLParser.g:10666:6: ( rule__Head__Group_2_1_0_1_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getHeadAccess().getGroup_2_1_0_1_5()); 
                    }
                    // InternalIDSLParser.g:10667:6: ( rule__Head__Group_2_1_0_1_5__0 )
                    // InternalIDSLParser.g:10667:7: rule__Head__Group_2_1_0_1_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__Group_2_1_0_1_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getHeadAccess().getGroup_2_1_0_1_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__Impl"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__0"
    // InternalIDSLParser.g:10680:1: rule__Head__UnorderedGroup_2_1_0_1__0 : rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__1 )? ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10684:1: ( rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__1 )? )
            // InternalIDSLParser.g:10685:2: rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__1 )?
            {
            pushFollow(FOLLOW_44);
            rule__Head__UnorderedGroup_2_1_0_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10686:2: ( rule__Head__UnorderedGroup_2_1_0_1__1 )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( ( LA44_0 == Bgpattern || LA44_0 >= Bgcolor && LA44_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt44=1;
            }
            else if ( LA44_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt44=1;
            }
            else if ( LA44_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt44=1;
            }
            else if ( LA44_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt44=1;
            }
            else if ( LA44_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt44=1;
            }
            else if ( LA44_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // InternalIDSLParser.g:10686:2: rule__Head__UnorderedGroup_2_1_0_1__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__UnorderedGroup_2_1_0_1__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__0"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__1"
    // InternalIDSLParser.g:10692:1: rule__Head__UnorderedGroup_2_1_0_1__1 : rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__2 )? ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10696:1: ( rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__2 )? )
            // InternalIDSLParser.g:10697:2: rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__2 )?
            {
            pushFollow(FOLLOW_44);
            rule__Head__UnorderedGroup_2_1_0_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10698:2: ( rule__Head__UnorderedGroup_2_1_0_1__2 )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( ( LA45_0 == Bgpattern || LA45_0 >= Bgcolor && LA45_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt45=1;
            }
            else if ( LA45_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt45=1;
            }
            else if ( LA45_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt45=1;
            }
            else if ( LA45_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt45=1;
            }
            else if ( LA45_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt45=1;
            }
            else if ( LA45_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // InternalIDSLParser.g:10698:2: rule__Head__UnorderedGroup_2_1_0_1__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__UnorderedGroup_2_1_0_1__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__1"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__2"
    // InternalIDSLParser.g:10704:1: rule__Head__UnorderedGroup_2_1_0_1__2 : rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__3 )? ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10708:1: ( rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__3 )? )
            // InternalIDSLParser.g:10709:2: rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__3 )?
            {
            pushFollow(FOLLOW_44);
            rule__Head__UnorderedGroup_2_1_0_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10710:2: ( rule__Head__UnorderedGroup_2_1_0_1__3 )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( ( LA46_0 == Bgpattern || LA46_0 >= Bgcolor && LA46_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt46=1;
            }
            else if ( LA46_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt46=1;
            }
            else if ( LA46_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt46=1;
            }
            else if ( LA46_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt46=1;
            }
            else if ( LA46_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt46=1;
            }
            else if ( LA46_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // InternalIDSLParser.g:10710:2: rule__Head__UnorderedGroup_2_1_0_1__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__UnorderedGroup_2_1_0_1__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__2"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__3"
    // InternalIDSLParser.g:10716:1: rule__Head__UnorderedGroup_2_1_0_1__3 : rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__4 )? ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10720:1: ( rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__4 )? )
            // InternalIDSLParser.g:10721:2: rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__4 )?
            {
            pushFollow(FOLLOW_44);
            rule__Head__UnorderedGroup_2_1_0_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10722:2: ( rule__Head__UnorderedGroup_2_1_0_1__4 )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( ( LA47_0 == Bgpattern || LA47_0 >= Bgcolor && LA47_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt47=1;
            }
            else if ( LA47_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt47=1;
            }
            else if ( LA47_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt47=1;
            }
            else if ( LA47_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt47=1;
            }
            else if ( LA47_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt47=1;
            }
            else if ( LA47_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // InternalIDSLParser.g:10722:2: rule__Head__UnorderedGroup_2_1_0_1__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__UnorderedGroup_2_1_0_1__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__3"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__4"
    // InternalIDSLParser.g:10728:1: rule__Head__UnorderedGroup_2_1_0_1__4 : rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__5 )? ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10732:1: ( rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__5 )? )
            // InternalIDSLParser.g:10733:2: rule__Head__UnorderedGroup_2_1_0_1__Impl ( rule__Head__UnorderedGroup_2_1_0_1__5 )?
            {
            pushFollow(FOLLOW_44);
            rule__Head__UnorderedGroup_2_1_0_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10734:2: ( rule__Head__UnorderedGroup_2_1_0_1__5 )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( ( LA48_0 == Bgpattern || LA48_0 >= Bgcolor && LA48_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 0) ) {
                alt48=1;
            }
            else if ( LA48_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 1) ) {
                alt48=1;
            }
            else if ( LA48_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 2) ) {
                alt48=1;
            }
            else if ( LA48_0 == Logo && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 3) ) {
                alt48=1;
            }
            else if ( LA48_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 4) ) {
                alt48=1;
            }
            else if ( LA48_0 == Subtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getHeadAccess().getUnorderedGroup_2_1_0_1(), 5) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // InternalIDSLParser.g:10734:2: rule__Head__UnorderedGroup_2_1_0_1__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Head__UnorderedGroup_2_1_0_1__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__4"


    // $ANTLR start "rule__Head__UnorderedGroup_2_1_0_1__5"
    // InternalIDSLParser.g:10740:1: rule__Head__UnorderedGroup_2_1_0_1__5 : rule__Head__UnorderedGroup_2_1_0_1__Impl ;
    public final void rule__Head__UnorderedGroup_2_1_0_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10744:1: ( rule__Head__UnorderedGroup_2_1_0_1__Impl )
            // InternalIDSLParser.g:10745:2: rule__Head__UnorderedGroup_2_1_0_1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Head__UnorderedGroup_2_1_0_1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__UnorderedGroup_2_1_0_1__5"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2"
    // InternalIDSLParser.g:10752:1: rule__Title__UnorderedGroup_1_0_2 : ( rule__Title__UnorderedGroup_1_0_2__0 )? ;
    public final void rule__Title__UnorderedGroup_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2());
        	
        try {
            // InternalIDSLParser.g:10757:1: ( ( rule__Title__UnorderedGroup_1_0_2__0 )? )
            // InternalIDSLParser.g:10758:2: ( rule__Title__UnorderedGroup_1_0_2__0 )?
            {
            // InternalIDSLParser.g:10758:2: ( rule__Title__UnorderedGroup_1_0_2__0 )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( LA49_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt49=1;
            }
            else if ( LA49_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt49=1;
            }
            else if ( LA49_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt49=1;
            }
            else if ( LA49_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt49=1;
            }
            else if ( LA49_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt49=1;
            }
            else if ( LA49_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // InternalIDSLParser.g:10758:2: rule__Title__UnorderedGroup_1_0_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__UnorderedGroup_1_0_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__Impl"
    // InternalIDSLParser.g:10766:1: rule__Title__UnorderedGroup_1_0_2__Impl : ( ({...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) ) ) ) ;
    public final void rule__Title__UnorderedGroup_1_0_2__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:10771:1: ( ( ({...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) ) ) ) )
            // InternalIDSLParser.g:10772:3: ( ({...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:10772:3: ( ({...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) ) ) )
            int alt50=6;
            int LA50_0 = input.LA(1);

            if ( LA50_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt50=1;
            }
            else if ( LA50_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt50=2;
            }
            else if ( LA50_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt50=3;
            }
            else if ( LA50_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt50=4;
            }
            else if ( LA50_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt50=5;
            }
            else if ( LA50_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt50=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // InternalIDSLParser.g:10773:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10773:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) ) )
                    // InternalIDSLParser.g:10774:4: {...}? => ( ( ( rule__Title__Group_1_0_2_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Title__UnorderedGroup_1_0_2__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0)");
                    }
                    // InternalIDSLParser.g:10774:105: ( ( ( rule__Title__Group_1_0_2_0__0 ) ) )
                    // InternalIDSLParser.g:10775:5: ( ( rule__Title__Group_1_0_2_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0);
                    selected = true;
                    // InternalIDSLParser.g:10781:5: ( ( rule__Title__Group_1_0_2_0__0 ) )
                    // InternalIDSLParser.g:10782:6: ( rule__Title__Group_1_0_2_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1_0_2_0()); 
                    }
                    // InternalIDSLParser.g:10783:6: ( rule__Title__Group_1_0_2_0__0 )
                    // InternalIDSLParser.g:10783:7: rule__Title__Group_1_0_2_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1_0_2_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1_0_2_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:10788:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10788:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) ) )
                    // InternalIDSLParser.g:10789:4: {...}? => ( ( ( rule__Title__Group_1_0_2_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Title__UnorderedGroup_1_0_2__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1)");
                    }
                    // InternalIDSLParser.g:10789:105: ( ( ( rule__Title__Group_1_0_2_1__0 ) ) )
                    // InternalIDSLParser.g:10790:5: ( ( rule__Title__Group_1_0_2_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1);
                    selected = true;
                    // InternalIDSLParser.g:10796:5: ( ( rule__Title__Group_1_0_2_1__0 ) )
                    // InternalIDSLParser.g:10797:6: ( rule__Title__Group_1_0_2_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1_0_2_1()); 
                    }
                    // InternalIDSLParser.g:10798:6: ( rule__Title__Group_1_0_2_1__0 )
                    // InternalIDSLParser.g:10798:7: rule__Title__Group_1_0_2_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1_0_2_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1_0_2_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:10803:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10803:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) ) )
                    // InternalIDSLParser.g:10804:4: {...}? => ( ( ( rule__Title__Group_1_0_2_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Title__UnorderedGroup_1_0_2__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2)");
                    }
                    // InternalIDSLParser.g:10804:105: ( ( ( rule__Title__Group_1_0_2_2__0 ) ) )
                    // InternalIDSLParser.g:10805:5: ( ( rule__Title__Group_1_0_2_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2);
                    selected = true;
                    // InternalIDSLParser.g:10811:5: ( ( rule__Title__Group_1_0_2_2__0 ) )
                    // InternalIDSLParser.g:10812:6: ( rule__Title__Group_1_0_2_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1_0_2_2()); 
                    }
                    // InternalIDSLParser.g:10813:6: ( rule__Title__Group_1_0_2_2__0 )
                    // InternalIDSLParser.g:10813:7: rule__Title__Group_1_0_2_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1_0_2_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1_0_2_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:10818:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10818:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) ) )
                    // InternalIDSLParser.g:10819:4: {...}? => ( ( ( rule__Title__Group_1_0_2_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Title__UnorderedGroup_1_0_2__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3)");
                    }
                    // InternalIDSLParser.g:10819:105: ( ( ( rule__Title__Group_1_0_2_3__0 ) ) )
                    // InternalIDSLParser.g:10820:5: ( ( rule__Title__Group_1_0_2_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3);
                    selected = true;
                    // InternalIDSLParser.g:10826:5: ( ( rule__Title__Group_1_0_2_3__0 ) )
                    // InternalIDSLParser.g:10827:6: ( rule__Title__Group_1_0_2_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1_0_2_3()); 
                    }
                    // InternalIDSLParser.g:10828:6: ( rule__Title__Group_1_0_2_3__0 )
                    // InternalIDSLParser.g:10828:7: rule__Title__Group_1_0_2_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1_0_2_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1_0_2_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:10833:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10833:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) ) )
                    // InternalIDSLParser.g:10834:4: {...}? => ( ( ( rule__Title__Group_1_0_2_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Title__UnorderedGroup_1_0_2__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4)");
                    }
                    // InternalIDSLParser.g:10834:105: ( ( ( rule__Title__Group_1_0_2_4__0 ) ) )
                    // InternalIDSLParser.g:10835:5: ( ( rule__Title__Group_1_0_2_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4);
                    selected = true;
                    // InternalIDSLParser.g:10841:5: ( ( rule__Title__Group_1_0_2_4__0 ) )
                    // InternalIDSLParser.g:10842:6: ( rule__Title__Group_1_0_2_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1_0_2_4()); 
                    }
                    // InternalIDSLParser.g:10843:6: ( rule__Title__Group_1_0_2_4__0 )
                    // InternalIDSLParser.g:10843:7: rule__Title__Group_1_0_2_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1_0_2_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1_0_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:10848:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10848:3: ({...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) ) )
                    // InternalIDSLParser.g:10849:4: {...}? => ( ( ( rule__Title__Group_1_0_2_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Title__UnorderedGroup_1_0_2__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5)");
                    }
                    // InternalIDSLParser.g:10849:105: ( ( ( rule__Title__Group_1_0_2_5__0 ) ) )
                    // InternalIDSLParser.g:10850:5: ( ( rule__Title__Group_1_0_2_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5);
                    selected = true;
                    // InternalIDSLParser.g:10856:5: ( ( rule__Title__Group_1_0_2_5__0 ) )
                    // InternalIDSLParser.g:10857:6: ( rule__Title__Group_1_0_2_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTitleAccess().getGroup_1_0_2_5()); 
                    }
                    // InternalIDSLParser.g:10858:6: ( rule__Title__Group_1_0_2_5__0 )
                    // InternalIDSLParser.g:10858:7: rule__Title__Group_1_0_2_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__Group_1_0_2_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTitleAccess().getGroup_1_0_2_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__Impl"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__0"
    // InternalIDSLParser.g:10871:1: rule__Title__UnorderedGroup_1_0_2__0 : rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__1 )? ;
    public final void rule__Title__UnorderedGroup_1_0_2__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10875:1: ( rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__1 )? )
            // InternalIDSLParser.g:10876:2: rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__1 )?
            {
            pushFollow(FOLLOW_45);
            rule__Title__UnorderedGroup_1_0_2__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10877:2: ( rule__Title__UnorderedGroup_1_0_2__1 )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( LA51_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt51=1;
            }
            else if ( LA51_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt51=1;
            }
            else if ( LA51_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt51=1;
            }
            else if ( LA51_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt51=1;
            }
            else if ( LA51_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt51=1;
            }
            else if ( LA51_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // InternalIDSLParser.g:10877:2: rule__Title__UnorderedGroup_1_0_2__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__UnorderedGroup_1_0_2__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__0"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__1"
    // InternalIDSLParser.g:10883:1: rule__Title__UnorderedGroup_1_0_2__1 : rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__2 )? ;
    public final void rule__Title__UnorderedGroup_1_0_2__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10887:1: ( rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__2 )? )
            // InternalIDSLParser.g:10888:2: rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__2 )?
            {
            pushFollow(FOLLOW_45);
            rule__Title__UnorderedGroup_1_0_2__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10889:2: ( rule__Title__UnorderedGroup_1_0_2__2 )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( LA52_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt52=1;
            }
            else if ( LA52_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt52=1;
            }
            else if ( LA52_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt52=1;
            }
            else if ( LA52_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt52=1;
            }
            else if ( LA52_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt52=1;
            }
            else if ( LA52_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // InternalIDSLParser.g:10889:2: rule__Title__UnorderedGroup_1_0_2__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__UnorderedGroup_1_0_2__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__1"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__2"
    // InternalIDSLParser.g:10895:1: rule__Title__UnorderedGroup_1_0_2__2 : rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__3 )? ;
    public final void rule__Title__UnorderedGroup_1_0_2__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10899:1: ( rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__3 )? )
            // InternalIDSLParser.g:10900:2: rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__3 )?
            {
            pushFollow(FOLLOW_45);
            rule__Title__UnorderedGroup_1_0_2__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10901:2: ( rule__Title__UnorderedGroup_1_0_2__3 )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( LA53_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt53=1;
            }
            else if ( LA53_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt53=1;
            }
            else if ( LA53_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt53=1;
            }
            else if ( LA53_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt53=1;
            }
            else if ( LA53_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt53=1;
            }
            else if ( LA53_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // InternalIDSLParser.g:10901:2: rule__Title__UnorderedGroup_1_0_2__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__UnorderedGroup_1_0_2__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__2"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__3"
    // InternalIDSLParser.g:10907:1: rule__Title__UnorderedGroup_1_0_2__3 : rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__4 )? ;
    public final void rule__Title__UnorderedGroup_1_0_2__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10911:1: ( rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__4 )? )
            // InternalIDSLParser.g:10912:2: rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__4 )?
            {
            pushFollow(FOLLOW_45);
            rule__Title__UnorderedGroup_1_0_2__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10913:2: ( rule__Title__UnorderedGroup_1_0_2__4 )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( LA54_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt54=1;
            }
            else if ( LA54_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt54=1;
            }
            else if ( LA54_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt54=1;
            }
            else if ( LA54_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt54=1;
            }
            else if ( LA54_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt54=1;
            }
            else if ( LA54_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // InternalIDSLParser.g:10913:2: rule__Title__UnorderedGroup_1_0_2__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__UnorderedGroup_1_0_2__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__3"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__4"
    // InternalIDSLParser.g:10919:1: rule__Title__UnorderedGroup_1_0_2__4 : rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__5 )? ;
    public final void rule__Title__UnorderedGroup_1_0_2__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10923:1: ( rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__5 )? )
            // InternalIDSLParser.g:10924:2: rule__Title__UnorderedGroup_1_0_2__Impl ( rule__Title__UnorderedGroup_1_0_2__5 )?
            {
            pushFollow(FOLLOW_45);
            rule__Title__UnorderedGroup_1_0_2__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:10925:2: ( rule__Title__UnorderedGroup_1_0_2__5 )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( LA55_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 0) ) {
                alt55=1;
            }
            else if ( LA55_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 1) ) {
                alt55=1;
            }
            else if ( LA55_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 2) ) {
                alt55=1;
            }
            else if ( LA55_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 3) ) {
                alt55=1;
            }
            else if ( LA55_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 4) ) {
                alt55=1;
            }
            else if ( LA55_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTitleAccess().getUnorderedGroup_1_0_2(), 5) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // InternalIDSLParser.g:10925:2: rule__Title__UnorderedGroup_1_0_2__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Title__UnorderedGroup_1_0_2__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__4"


    // $ANTLR start "rule__Title__UnorderedGroup_1_0_2__5"
    // InternalIDSLParser.g:10931:1: rule__Title__UnorderedGroup_1_0_2__5 : rule__Title__UnorderedGroup_1_0_2__Impl ;
    public final void rule__Title__UnorderedGroup_1_0_2__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:10935:1: ( rule__Title__UnorderedGroup_1_0_2__Impl )
            // InternalIDSLParser.g:10936:2: rule__Title__UnorderedGroup_1_0_2__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Title__UnorderedGroup_1_0_2__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__UnorderedGroup_1_0_2__5"


    // $ANTLR start "rule__Logo__UnorderedGroup_1"
    // InternalIDSLParser.g:10943:1: rule__Logo__UnorderedGroup_1 : rule__Logo__UnorderedGroup_1__0 {...}?;
    public final void rule__Logo__UnorderedGroup_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getLogoAccess().getUnorderedGroup_1());
        	
        try {
            // InternalIDSLParser.g:10948:1: ( rule__Logo__UnorderedGroup_1__0 {...}?)
            // InternalIDSLParser.g:10949:2: rule__Logo__UnorderedGroup_1__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Logo__UnorderedGroup_1__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getLogoAccess().getUnorderedGroup_1()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Logo__UnorderedGroup_1", "getUnorderedGroupHelper().canLeave(grammarAccess.getLogoAccess().getUnorderedGroup_1())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getLogoAccess().getUnorderedGroup_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__UnorderedGroup_1"


    // $ANTLR start "rule__Logo__UnorderedGroup_1__Impl"
    // InternalIDSLParser.g:10957:1: rule__Logo__UnorderedGroup_1__Impl : ( ({...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) ) ) ) ;
    public final void rule__Logo__UnorderedGroup_1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:10962:1: ( ( ({...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) ) ) ) )
            // InternalIDSLParser.g:10963:3: ( ({...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:10963:3: ( ({...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) ) ) )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( LA56_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 0) ) {
                alt56=1;
            }
            else if ( LA56_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 1) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // InternalIDSLParser.g:10964:3: ({...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10964:3: ({...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) ) )
                    // InternalIDSLParser.g:10965:4: {...}? => ( ( ( rule__Logo__Group_1_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Logo__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 0)");
                    }
                    // InternalIDSLParser.g:10965:100: ( ( ( rule__Logo__Group_1_0__0 ) ) )
                    // InternalIDSLParser.g:10966:5: ( ( rule__Logo__Group_1_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 0);
                    selected = true;
                    // InternalIDSLParser.g:10972:5: ( ( rule__Logo__Group_1_0__0 ) )
                    // InternalIDSLParser.g:10973:6: ( rule__Logo__Group_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLogoAccess().getGroup_1_0()); 
                    }
                    // InternalIDSLParser.g:10974:6: ( rule__Logo__Group_1_0__0 )
                    // InternalIDSLParser.g:10974:7: rule__Logo__Group_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Logo__Group_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLogoAccess().getGroup_1_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:10979:3: ({...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:10979:3: ({...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) ) )
                    // InternalIDSLParser.g:10980:4: {...}? => ( ( ( rule__Logo__Group_1_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Logo__UnorderedGroup_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 1)");
                    }
                    // InternalIDSLParser.g:10980:100: ( ( ( rule__Logo__Group_1_1__0 ) ) )
                    // InternalIDSLParser.g:10981:5: ( ( rule__Logo__Group_1_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 1);
                    selected = true;
                    // InternalIDSLParser.g:10987:5: ( ( rule__Logo__Group_1_1__0 ) )
                    // InternalIDSLParser.g:10988:6: ( rule__Logo__Group_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getLogoAccess().getGroup_1_1()); 
                    }
                    // InternalIDSLParser.g:10989:6: ( rule__Logo__Group_1_1__0 )
                    // InternalIDSLParser.g:10989:7: rule__Logo__Group_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Logo__Group_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getLogoAccess().getGroup_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getLogoAccess().getUnorderedGroup_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__UnorderedGroup_1__Impl"


    // $ANTLR start "rule__Logo__UnorderedGroup_1__0"
    // InternalIDSLParser.g:11002:1: rule__Logo__UnorderedGroup_1__0 : rule__Logo__UnorderedGroup_1__Impl ( rule__Logo__UnorderedGroup_1__1 )? ;
    public final void rule__Logo__UnorderedGroup_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11006:1: ( rule__Logo__UnorderedGroup_1__Impl ( rule__Logo__UnorderedGroup_1__1 )? )
            // InternalIDSLParser.g:11007:2: rule__Logo__UnorderedGroup_1__Impl ( rule__Logo__UnorderedGroup_1__1 )?
            {
            pushFollow(FOLLOW_46);
            rule__Logo__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11008:2: ( rule__Logo__UnorderedGroup_1__1 )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( LA57_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 0) ) {
                alt57=1;
            }
            else if ( LA57_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getLogoAccess().getUnorderedGroup_1(), 1) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // InternalIDSLParser.g:11008:2: rule__Logo__UnorderedGroup_1__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Logo__UnorderedGroup_1__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__UnorderedGroup_1__0"


    // $ANTLR start "rule__Logo__UnorderedGroup_1__1"
    // InternalIDSLParser.g:11014:1: rule__Logo__UnorderedGroup_1__1 : rule__Logo__UnorderedGroup_1__Impl ;
    public final void rule__Logo__UnorderedGroup_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11018:1: ( rule__Logo__UnorderedGroup_1__Impl )
            // InternalIDSLParser.g:11019:2: rule__Logo__UnorderedGroup_1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Logo__UnorderedGroup_1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__UnorderedGroup_1__1"


    // $ANTLR start "rule__Box__UnorderedGroup_3"
    // InternalIDSLParser.g:11026:1: rule__Box__UnorderedGroup_3 : rule__Box__UnorderedGroup_3__0 {...}?;
    public final void rule__Box__UnorderedGroup_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getBoxAccess().getUnorderedGroup_3());
        	
        try {
            // InternalIDSLParser.g:11031:1: ( rule__Box__UnorderedGroup_3__0 {...}?)
            // InternalIDSLParser.g:11032:2: rule__Box__UnorderedGroup_3__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Box__UnorderedGroup_3__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getBoxAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Box__UnorderedGroup_3", "getUnorderedGroupHelper().canLeave(grammarAccess.getBoxAccess().getUnorderedGroup_3())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getBoxAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__UnorderedGroup_3"


    // $ANTLR start "rule__Box__UnorderedGroup_3__Impl"
    // InternalIDSLParser.g:11040:1: rule__Box__UnorderedGroup_3__Impl : ( ({...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_2__0 ) ) ) ) ) ;
    public final void rule__Box__UnorderedGroup_3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:11045:1: ( ( ({...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_2__0 ) ) ) ) ) )
            // InternalIDSLParser.g:11046:3: ( ({...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_2__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:11046:3: ( ({...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Box__Group_3_2__0 ) ) ) ) )
            int alt58=3;
            int LA58_0 = input.LA(1);

            if ( ( LA58_0 == Bgpattern || LA58_0 >= Bgcolor && LA58_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 0) ) {
                alt58=1;
            }
            else if ( LA58_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 1) ) {
                alt58=2;
            }
            else if ( LA58_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 2) ) {
                alt58=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);

                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    // InternalIDSLParser.g:11047:3: ({...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11047:3: ({...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) ) )
                    // InternalIDSLParser.g:11048:4: {...}? => ( ( ( rule__Box__Alternatives_3_0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Box__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 0)");
                    }
                    // InternalIDSLParser.g:11048:99: ( ( ( rule__Box__Alternatives_3_0 ) ) )
                    // InternalIDSLParser.g:11049:5: ( ( rule__Box__Alternatives_3_0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 0);
                    selected = true;
                    // InternalIDSLParser.g:11055:5: ( ( rule__Box__Alternatives_3_0 ) )
                    // InternalIDSLParser.g:11056:6: ( rule__Box__Alternatives_3_0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBoxAccess().getAlternatives_3_0()); 
                    }
                    // InternalIDSLParser.g:11057:6: ( rule__Box__Alternatives_3_0 )
                    // InternalIDSLParser.g:11057:7: rule__Box__Alternatives_3_0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__Alternatives_3_0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBoxAccess().getAlternatives_3_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:11062:3: ({...}? => ( ( ( rule__Box__Group_3_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11062:3: ({...}? => ( ( ( rule__Box__Group_3_1__0 ) ) ) )
                    // InternalIDSLParser.g:11063:4: {...}? => ( ( ( rule__Box__Group_3_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Box__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 1)");
                    }
                    // InternalIDSLParser.g:11063:99: ( ( ( rule__Box__Group_3_1__0 ) ) )
                    // InternalIDSLParser.g:11064:5: ( ( rule__Box__Group_3_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 1);
                    selected = true;
                    // InternalIDSLParser.g:11070:5: ( ( rule__Box__Group_3_1__0 ) )
                    // InternalIDSLParser.g:11071:6: ( rule__Box__Group_3_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBoxAccess().getGroup_3_1()); 
                    }
                    // InternalIDSLParser.g:11072:6: ( rule__Box__Group_3_1__0 )
                    // InternalIDSLParser.g:11072:7: rule__Box__Group_3_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__Group_3_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBoxAccess().getGroup_3_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:11077:3: ({...}? => ( ( ( rule__Box__Group_3_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11077:3: ({...}? => ( ( ( rule__Box__Group_3_2__0 ) ) ) )
                    // InternalIDSLParser.g:11078:4: {...}? => ( ( ( rule__Box__Group_3_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Box__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 2)");
                    }
                    // InternalIDSLParser.g:11078:99: ( ( ( rule__Box__Group_3_2__0 ) ) )
                    // InternalIDSLParser.g:11079:5: ( ( rule__Box__Group_3_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 2);
                    selected = true;
                    // InternalIDSLParser.g:11085:5: ( ( rule__Box__Group_3_2__0 ) )
                    // InternalIDSLParser.g:11086:6: ( rule__Box__Group_3_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBoxAccess().getGroup_3_2()); 
                    }
                    // InternalIDSLParser.g:11087:6: ( rule__Box__Group_3_2__0 )
                    // InternalIDSLParser.g:11087:7: rule__Box__Group_3_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__Group_3_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBoxAccess().getGroup_3_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBoxAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__UnorderedGroup_3__Impl"


    // $ANTLR start "rule__Box__UnorderedGroup_3__0"
    // InternalIDSLParser.g:11100:1: rule__Box__UnorderedGroup_3__0 : rule__Box__UnorderedGroup_3__Impl ( rule__Box__UnorderedGroup_3__1 )? ;
    public final void rule__Box__UnorderedGroup_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11104:1: ( rule__Box__UnorderedGroup_3__Impl ( rule__Box__UnorderedGroup_3__1 )? )
            // InternalIDSLParser.g:11105:2: rule__Box__UnorderedGroup_3__Impl ( rule__Box__UnorderedGroup_3__1 )?
            {
            pushFollow(FOLLOW_47);
            rule__Box__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11106:2: ( rule__Box__UnorderedGroup_3__1 )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( ( LA59_0 == Bgpattern || LA59_0 >= Bgcolor && LA59_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 0) ) {
                alt59=1;
            }
            else if ( LA59_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 1) ) {
                alt59=1;
            }
            else if ( LA59_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 2) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // InternalIDSLParser.g:11106:2: rule__Box__UnorderedGroup_3__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__UnorderedGroup_3__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__UnorderedGroup_3__0"


    // $ANTLR start "rule__Box__UnorderedGroup_3__1"
    // InternalIDSLParser.g:11112:1: rule__Box__UnorderedGroup_3__1 : rule__Box__UnorderedGroup_3__Impl ( rule__Box__UnorderedGroup_3__2 )? ;
    public final void rule__Box__UnorderedGroup_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11116:1: ( rule__Box__UnorderedGroup_3__Impl ( rule__Box__UnorderedGroup_3__2 )? )
            // InternalIDSLParser.g:11117:2: rule__Box__UnorderedGroup_3__Impl ( rule__Box__UnorderedGroup_3__2 )?
            {
            pushFollow(FOLLOW_47);
            rule__Box__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11118:2: ( rule__Box__UnorderedGroup_3__2 )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( ( LA60_0 == Bgpattern || LA60_0 >= Bgcolor && LA60_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 0) ) {
                alt60=1;
            }
            else if ( LA60_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 1) ) {
                alt60=1;
            }
            else if ( LA60_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBoxAccess().getUnorderedGroup_3(), 2) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // InternalIDSLParser.g:11118:2: rule__Box__UnorderedGroup_3__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Box__UnorderedGroup_3__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__UnorderedGroup_3__1"


    // $ANTLR start "rule__Box__UnorderedGroup_3__2"
    // InternalIDSLParser.g:11124:1: rule__Box__UnorderedGroup_3__2 : rule__Box__UnorderedGroup_3__Impl ;
    public final void rule__Box__UnorderedGroup_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11128:1: ( rule__Box__UnorderedGroup_3__Impl )
            // InternalIDSLParser.g:11129:2: rule__Box__UnorderedGroup_3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Box__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__UnorderedGroup_3__2"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1"
    // InternalIDSLParser.g:11136:1: rule__Text__UnorderedGroup_0_2_1 : rule__Text__UnorderedGroup_0_2_1__0 {...}?;
    public final void rule__Text__UnorderedGroup_0_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1());
        	
        try {
            // InternalIDSLParser.g:11141:1: ( rule__Text__UnorderedGroup_0_2_1__0 {...}?)
            // InternalIDSLParser.g:11142:2: rule__Text__UnorderedGroup_0_2_1__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Text__UnorderedGroup_0_2_1__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1", "getUnorderedGroupHelper().canLeave(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__Impl"
    // InternalIDSLParser.g:11150:1: rule__Text__UnorderedGroup_0_2_1__Impl : ( ({...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) ) ) ) ;
    public final void rule__Text__UnorderedGroup_0_2_1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:11155:1: ( ( ({...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) ) ) ) )
            // InternalIDSLParser.g:11156:3: ( ({...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:11156:3: ( ({...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) ) ) )
            int alt61=7;
            int LA61_0 = input.LA(1);

            if ( LA61_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt61=1;
            }
            else if ( LA61_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt61=2;
            }
            else if ( LA61_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt61=3;
            }
            else if ( LA61_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt61=4;
            }
            else if ( LA61_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt61=5;
            }
            else if ( LA61_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt61=6;
            }
            else if ( LA61_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt61=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;
            }
            switch (alt61) {
                case 1 :
                    // InternalIDSLParser.g:11157:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11157:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) ) )
                    // InternalIDSLParser.g:11158:4: {...}? => ( ( ( rule__Text__Group_0_2_1_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0)");
                    }
                    // InternalIDSLParser.g:11158:104: ( ( ( rule__Text__Group_0_2_1_0__0 ) ) )
                    // InternalIDSLParser.g:11159:5: ( ( rule__Text__Group_0_2_1_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0);
                    selected = true;
                    // InternalIDSLParser.g:11165:5: ( ( rule__Text__Group_0_2_1_0__0 ) )
                    // InternalIDSLParser.g:11166:6: ( rule__Text__Group_0_2_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_0()); 
                    }
                    // InternalIDSLParser.g:11167:6: ( rule__Text__Group_0_2_1_0__0 )
                    // InternalIDSLParser.g:11167:7: rule__Text__Group_0_2_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:11172:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11172:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) ) )
                    // InternalIDSLParser.g:11173:4: {...}? => ( ( ( rule__Text__Group_0_2_1_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1)");
                    }
                    // InternalIDSLParser.g:11173:104: ( ( ( rule__Text__Group_0_2_1_1__0 ) ) )
                    // InternalIDSLParser.g:11174:5: ( ( rule__Text__Group_0_2_1_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1);
                    selected = true;
                    // InternalIDSLParser.g:11180:5: ( ( rule__Text__Group_0_2_1_1__0 ) )
                    // InternalIDSLParser.g:11181:6: ( rule__Text__Group_0_2_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_1()); 
                    }
                    // InternalIDSLParser.g:11182:6: ( rule__Text__Group_0_2_1_1__0 )
                    // InternalIDSLParser.g:11182:7: rule__Text__Group_0_2_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:11187:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11187:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) ) )
                    // InternalIDSLParser.g:11188:4: {...}? => ( ( ( rule__Text__Group_0_2_1_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2)");
                    }
                    // InternalIDSLParser.g:11188:104: ( ( ( rule__Text__Group_0_2_1_2__0 ) ) )
                    // InternalIDSLParser.g:11189:5: ( ( rule__Text__Group_0_2_1_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2);
                    selected = true;
                    // InternalIDSLParser.g:11195:5: ( ( rule__Text__Group_0_2_1_2__0 ) )
                    // InternalIDSLParser.g:11196:6: ( rule__Text__Group_0_2_1_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_2()); 
                    }
                    // InternalIDSLParser.g:11197:6: ( rule__Text__Group_0_2_1_2__0 )
                    // InternalIDSLParser.g:11197:7: rule__Text__Group_0_2_1_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:11202:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11202:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) ) )
                    // InternalIDSLParser.g:11203:4: {...}? => ( ( ( rule__Text__Group_0_2_1_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3)");
                    }
                    // InternalIDSLParser.g:11203:104: ( ( ( rule__Text__Group_0_2_1_3__0 ) ) )
                    // InternalIDSLParser.g:11204:5: ( ( rule__Text__Group_0_2_1_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3);
                    selected = true;
                    // InternalIDSLParser.g:11210:5: ( ( rule__Text__Group_0_2_1_3__0 ) )
                    // InternalIDSLParser.g:11211:6: ( rule__Text__Group_0_2_1_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_3()); 
                    }
                    // InternalIDSLParser.g:11212:6: ( rule__Text__Group_0_2_1_3__0 )
                    // InternalIDSLParser.g:11212:7: rule__Text__Group_0_2_1_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:11217:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11217:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) ) )
                    // InternalIDSLParser.g:11218:4: {...}? => ( ( ( rule__Text__Group_0_2_1_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4)");
                    }
                    // InternalIDSLParser.g:11218:104: ( ( ( rule__Text__Group_0_2_1_4__0 ) ) )
                    // InternalIDSLParser.g:11219:5: ( ( rule__Text__Group_0_2_1_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4);
                    selected = true;
                    // InternalIDSLParser.g:11225:5: ( ( rule__Text__Group_0_2_1_4__0 ) )
                    // InternalIDSLParser.g:11226:6: ( rule__Text__Group_0_2_1_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_4()); 
                    }
                    // InternalIDSLParser.g:11227:6: ( rule__Text__Group_0_2_1_4__0 )
                    // InternalIDSLParser.g:11227:7: rule__Text__Group_0_2_1_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:11232:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11232:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) ) )
                    // InternalIDSLParser.g:11233:4: {...}? => ( ( ( rule__Text__Group_0_2_1_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5)");
                    }
                    // InternalIDSLParser.g:11233:104: ( ( ( rule__Text__Group_0_2_1_5__0 ) ) )
                    // InternalIDSLParser.g:11234:5: ( ( rule__Text__Group_0_2_1_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5);
                    selected = true;
                    // InternalIDSLParser.g:11240:5: ( ( rule__Text__Group_0_2_1_5__0 ) )
                    // InternalIDSLParser.g:11241:6: ( rule__Text__Group_0_2_1_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_5()); 
                    }
                    // InternalIDSLParser.g:11242:6: ( rule__Text__Group_0_2_1_5__0 )
                    // InternalIDSLParser.g:11242:7: rule__Text__Group_0_2_1_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:11247:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11247:3: ({...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) ) )
                    // InternalIDSLParser.g:11248:4: {...}? => ( ( ( rule__Text__Group_0_2_1_6__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_0_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6)");
                    }
                    // InternalIDSLParser.g:11248:104: ( ( ( rule__Text__Group_0_2_1_6__0 ) ) )
                    // InternalIDSLParser.g:11249:5: ( ( rule__Text__Group_0_2_1_6__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6);
                    selected = true;
                    // InternalIDSLParser.g:11255:5: ( ( rule__Text__Group_0_2_1_6__0 ) )
                    // InternalIDSLParser.g:11256:6: ( rule__Text__Group_0_2_1_6__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_0_2_1_6()); 
                    }
                    // InternalIDSLParser.g:11257:6: ( rule__Text__Group_0_2_1_6__0 )
                    // InternalIDSLParser.g:11257:7: rule__Text__Group_0_2_1_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_0_2_1_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_0_2_1_6()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__Impl"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__0"
    // InternalIDSLParser.g:11270:1: rule__Text__UnorderedGroup_0_2_1__0 : rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__1 )? ;
    public final void rule__Text__UnorderedGroup_0_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11274:1: ( rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__1 )? )
            // InternalIDSLParser.g:11275:2: rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__1 )?
            {
            pushFollow(FOLLOW_48);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11276:2: ( rule__Text__UnorderedGroup_0_2_1__1 )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( LA62_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt62=1;
            }
            else if ( LA62_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt62=1;
            }
            else if ( LA62_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt62=1;
            }
            else if ( LA62_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt62=1;
            }
            else if ( LA62_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt62=1;
            }
            else if ( LA62_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt62=1;
            }
            else if ( LA62_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // InternalIDSLParser.g:11276:2: rule__Text__UnorderedGroup_0_2_1__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_0_2_1__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__0"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__1"
    // InternalIDSLParser.g:11282:1: rule__Text__UnorderedGroup_0_2_1__1 : rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__2 )? ;
    public final void rule__Text__UnorderedGroup_0_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11286:1: ( rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__2 )? )
            // InternalIDSLParser.g:11287:2: rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__2 )?
            {
            pushFollow(FOLLOW_48);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11288:2: ( rule__Text__UnorderedGroup_0_2_1__2 )?
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( LA63_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt63=1;
            }
            else if ( LA63_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt63=1;
            }
            else if ( LA63_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt63=1;
            }
            else if ( LA63_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt63=1;
            }
            else if ( LA63_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt63=1;
            }
            else if ( LA63_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt63=1;
            }
            else if ( LA63_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    // InternalIDSLParser.g:11288:2: rule__Text__UnorderedGroup_0_2_1__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_0_2_1__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__1"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__2"
    // InternalIDSLParser.g:11294:1: rule__Text__UnorderedGroup_0_2_1__2 : rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__3 )? ;
    public final void rule__Text__UnorderedGroup_0_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11298:1: ( rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__3 )? )
            // InternalIDSLParser.g:11299:2: rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__3 )?
            {
            pushFollow(FOLLOW_48);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11300:2: ( rule__Text__UnorderedGroup_0_2_1__3 )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( LA64_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt64=1;
            }
            else if ( LA64_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt64=1;
            }
            else if ( LA64_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt64=1;
            }
            else if ( LA64_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt64=1;
            }
            else if ( LA64_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt64=1;
            }
            else if ( LA64_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt64=1;
            }
            else if ( LA64_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // InternalIDSLParser.g:11300:2: rule__Text__UnorderedGroup_0_2_1__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_0_2_1__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__2"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__3"
    // InternalIDSLParser.g:11306:1: rule__Text__UnorderedGroup_0_2_1__3 : rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__4 )? ;
    public final void rule__Text__UnorderedGroup_0_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11310:1: ( rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__4 )? )
            // InternalIDSLParser.g:11311:2: rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__4 )?
            {
            pushFollow(FOLLOW_48);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11312:2: ( rule__Text__UnorderedGroup_0_2_1__4 )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( LA65_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt65=1;
            }
            else if ( LA65_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt65=1;
            }
            else if ( LA65_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt65=1;
            }
            else if ( LA65_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt65=1;
            }
            else if ( LA65_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt65=1;
            }
            else if ( LA65_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt65=1;
            }
            else if ( LA65_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // InternalIDSLParser.g:11312:2: rule__Text__UnorderedGroup_0_2_1__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_0_2_1__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__3"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__4"
    // InternalIDSLParser.g:11318:1: rule__Text__UnorderedGroup_0_2_1__4 : rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__5 )? ;
    public final void rule__Text__UnorderedGroup_0_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11322:1: ( rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__5 )? )
            // InternalIDSLParser.g:11323:2: rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__5 )?
            {
            pushFollow(FOLLOW_48);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11324:2: ( rule__Text__UnorderedGroup_0_2_1__5 )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( LA66_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt66=1;
            }
            else if ( LA66_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt66=1;
            }
            else if ( LA66_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt66=1;
            }
            else if ( LA66_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt66=1;
            }
            else if ( LA66_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt66=1;
            }
            else if ( LA66_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt66=1;
            }
            else if ( LA66_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // InternalIDSLParser.g:11324:2: rule__Text__UnorderedGroup_0_2_1__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_0_2_1__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__4"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__5"
    // InternalIDSLParser.g:11330:1: rule__Text__UnorderedGroup_0_2_1__5 : rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__6 )? ;
    public final void rule__Text__UnorderedGroup_0_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11334:1: ( rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__6 )? )
            // InternalIDSLParser.g:11335:2: rule__Text__UnorderedGroup_0_2_1__Impl ( rule__Text__UnorderedGroup_0_2_1__6 )?
            {
            pushFollow(FOLLOW_48);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11336:2: ( rule__Text__UnorderedGroup_0_2_1__6 )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( LA67_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 0) ) {
                alt67=1;
            }
            else if ( LA67_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 1) ) {
                alt67=1;
            }
            else if ( LA67_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 2) ) {
                alt67=1;
            }
            else if ( LA67_0 == Lineheight && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 3) ) {
                alt67=1;
            }
            else if ( LA67_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 4) ) {
                alt67=1;
            }
            else if ( LA67_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 5) ) {
                alt67=1;
            }
            else if ( LA67_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_0_2_1(), 6) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // InternalIDSLParser.g:11336:2: rule__Text__UnorderedGroup_0_2_1__6
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_0_2_1__6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__5"


    // $ANTLR start "rule__Text__UnorderedGroup_0_2_1__6"
    // InternalIDSLParser.g:11342:1: rule__Text__UnorderedGroup_0_2_1__6 : rule__Text__UnorderedGroup_0_2_1__Impl ;
    public final void rule__Text__UnorderedGroup_0_2_1__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11346:1: ( rule__Text__UnorderedGroup_0_2_1__Impl )
            // InternalIDSLParser.g:11347:2: rule__Text__UnorderedGroup_0_2_1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__UnorderedGroup_0_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_0_2_1__6"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1"
    // InternalIDSLParser.g:11354:1: rule__Text__UnorderedGroup_1_2_1 : rule__Text__UnorderedGroup_1_2_1__0 {...}?;
    public final void rule__Text__UnorderedGroup_1_2_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1());
        	
        try {
            // InternalIDSLParser.g:11359:1: ( rule__Text__UnorderedGroup_1_2_1__0 {...}?)
            // InternalIDSLParser.g:11360:2: rule__Text__UnorderedGroup_1_2_1__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Text__UnorderedGroup_1_2_1__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1", "getUnorderedGroupHelper().canLeave(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__Impl"
    // InternalIDSLParser.g:11368:1: rule__Text__UnorderedGroup_1_2_1__Impl : ( ({...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) ) ) ) ;
    public final void rule__Text__UnorderedGroup_1_2_1__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:11373:1: ( ( ({...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) ) ) ) )
            // InternalIDSLParser.g:11374:3: ( ({...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:11374:3: ( ({...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) ) ) )
            int alt68=6;
            int LA68_0 = input.LA(1);

            if ( LA68_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                alt68=1;
            }
            else if ( LA68_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                alt68=2;
            }
            else if ( LA68_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                alt68=3;
            }
            else if ( LA68_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                alt68=4;
            }
            else if ( LA68_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                alt68=5;
            }
            else if ( LA68_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                alt68=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // InternalIDSLParser.g:11375:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11375:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) ) )
                    // InternalIDSLParser.g:11376:4: {...}? => ( ( ( rule__Text__Group_1_2_1_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0)");
                    }
                    // InternalIDSLParser.g:11376:104: ( ( ( rule__Text__Group_1_2_1_0__0 ) ) )
                    // InternalIDSLParser.g:11377:5: ( ( rule__Text__Group_1_2_1_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0);
                    selected = true;
                    // InternalIDSLParser.g:11383:5: ( ( rule__Text__Group_1_2_1_0__0 ) )
                    // InternalIDSLParser.g:11384:6: ( rule__Text__Group_1_2_1_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1_2_1_0()); 
                    }
                    // InternalIDSLParser.g:11385:6: ( rule__Text__Group_1_2_1_0__0 )
                    // InternalIDSLParser.g:11385:7: rule__Text__Group_1_2_1_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1_2_1_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1_2_1_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:11390:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11390:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) ) )
                    // InternalIDSLParser.g:11391:4: {...}? => ( ( ( rule__Text__Group_1_2_1_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1)");
                    }
                    // InternalIDSLParser.g:11391:104: ( ( ( rule__Text__Group_1_2_1_1__0 ) ) )
                    // InternalIDSLParser.g:11392:5: ( ( rule__Text__Group_1_2_1_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1);
                    selected = true;
                    // InternalIDSLParser.g:11398:5: ( ( rule__Text__Group_1_2_1_1__0 ) )
                    // InternalIDSLParser.g:11399:6: ( rule__Text__Group_1_2_1_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1_2_1_1()); 
                    }
                    // InternalIDSLParser.g:11400:6: ( rule__Text__Group_1_2_1_1__0 )
                    // InternalIDSLParser.g:11400:7: rule__Text__Group_1_2_1_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1_2_1_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1_2_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:11405:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11405:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) ) )
                    // InternalIDSLParser.g:11406:4: {...}? => ( ( ( rule__Text__Group_1_2_1_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2)");
                    }
                    // InternalIDSLParser.g:11406:104: ( ( ( rule__Text__Group_1_2_1_2__0 ) ) )
                    // InternalIDSLParser.g:11407:5: ( ( rule__Text__Group_1_2_1_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2);
                    selected = true;
                    // InternalIDSLParser.g:11413:5: ( ( rule__Text__Group_1_2_1_2__0 ) )
                    // InternalIDSLParser.g:11414:6: ( rule__Text__Group_1_2_1_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1_2_1_2()); 
                    }
                    // InternalIDSLParser.g:11415:6: ( rule__Text__Group_1_2_1_2__0 )
                    // InternalIDSLParser.g:11415:7: rule__Text__Group_1_2_1_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1_2_1_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1_2_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:11420:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11420:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) ) )
                    // InternalIDSLParser.g:11421:4: {...}? => ( ( ( rule__Text__Group_1_2_1_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3)");
                    }
                    // InternalIDSLParser.g:11421:104: ( ( ( rule__Text__Group_1_2_1_3__0 ) ) )
                    // InternalIDSLParser.g:11422:5: ( ( rule__Text__Group_1_2_1_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3);
                    selected = true;
                    // InternalIDSLParser.g:11428:5: ( ( rule__Text__Group_1_2_1_3__0 ) )
                    // InternalIDSLParser.g:11429:6: ( rule__Text__Group_1_2_1_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1_2_1_3()); 
                    }
                    // InternalIDSLParser.g:11430:6: ( rule__Text__Group_1_2_1_3__0 )
                    // InternalIDSLParser.g:11430:7: rule__Text__Group_1_2_1_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1_2_1_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1_2_1_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:11435:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11435:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) ) )
                    // InternalIDSLParser.g:11436:4: {...}? => ( ( ( rule__Text__Group_1_2_1_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4)");
                    }
                    // InternalIDSLParser.g:11436:104: ( ( ( rule__Text__Group_1_2_1_4__0 ) ) )
                    // InternalIDSLParser.g:11437:5: ( ( rule__Text__Group_1_2_1_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4);
                    selected = true;
                    // InternalIDSLParser.g:11443:5: ( ( rule__Text__Group_1_2_1_4__0 ) )
                    // InternalIDSLParser.g:11444:6: ( rule__Text__Group_1_2_1_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1_2_1_4()); 
                    }
                    // InternalIDSLParser.g:11445:6: ( rule__Text__Group_1_2_1_4__0 )
                    // InternalIDSLParser.g:11445:7: rule__Text__Group_1_2_1_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1_2_1_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1_2_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:11450:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11450:3: ({...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) ) )
                    // InternalIDSLParser.g:11451:4: {...}? => ( ( ( rule__Text__Group_1_2_1_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Text__UnorderedGroup_1_2_1__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5)");
                    }
                    // InternalIDSLParser.g:11451:104: ( ( ( rule__Text__Group_1_2_1_5__0 ) ) )
                    // InternalIDSLParser.g:11452:5: ( ( rule__Text__Group_1_2_1_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5);
                    selected = true;
                    // InternalIDSLParser.g:11458:5: ( ( rule__Text__Group_1_2_1_5__0 ) )
                    // InternalIDSLParser.g:11459:6: ( rule__Text__Group_1_2_1_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getTextAccess().getGroup_1_2_1_5()); 
                    }
                    // InternalIDSLParser.g:11460:6: ( rule__Text__Group_1_2_1_5__0 )
                    // InternalIDSLParser.g:11460:7: rule__Text__Group_1_2_1_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__Group_1_2_1_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getTextAccess().getGroup_1_2_1_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__Impl"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__0"
    // InternalIDSLParser.g:11473:1: rule__Text__UnorderedGroup_1_2_1__0 : rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__1 )? ;
    public final void rule__Text__UnorderedGroup_1_2_1__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11477:1: ( rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__1 )? )
            // InternalIDSLParser.g:11478:2: rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__1 )?
            {
            pushFollow(FOLLOW_45);
            rule__Text__UnorderedGroup_1_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11479:2: ( rule__Text__UnorderedGroup_1_2_1__1 )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( LA69_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                alt69=1;
            }
            else if ( LA69_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                alt69=1;
            }
            else if ( LA69_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                alt69=1;
            }
            else if ( LA69_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                alt69=1;
            }
            else if ( LA69_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                alt69=1;
            }
            else if ( LA69_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // InternalIDSLParser.g:11479:2: rule__Text__UnorderedGroup_1_2_1__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_1_2_1__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__0"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__1"
    // InternalIDSLParser.g:11485:1: rule__Text__UnorderedGroup_1_2_1__1 : rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__2 )? ;
    public final void rule__Text__UnorderedGroup_1_2_1__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11489:1: ( rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__2 )? )
            // InternalIDSLParser.g:11490:2: rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__2 )?
            {
            pushFollow(FOLLOW_45);
            rule__Text__UnorderedGroup_1_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11491:2: ( rule__Text__UnorderedGroup_1_2_1__2 )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( LA70_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                alt70=1;
            }
            else if ( LA70_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                alt70=1;
            }
            else if ( LA70_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                alt70=1;
            }
            else if ( LA70_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                alt70=1;
            }
            else if ( LA70_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                alt70=1;
            }
            else if ( LA70_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // InternalIDSLParser.g:11491:2: rule__Text__UnorderedGroup_1_2_1__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_1_2_1__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__1"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__2"
    // InternalIDSLParser.g:11497:1: rule__Text__UnorderedGroup_1_2_1__2 : rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__3 )? ;
    public final void rule__Text__UnorderedGroup_1_2_1__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11501:1: ( rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__3 )? )
            // InternalIDSLParser.g:11502:2: rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__3 )?
            {
            pushFollow(FOLLOW_45);
            rule__Text__UnorderedGroup_1_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11503:2: ( rule__Text__UnorderedGroup_1_2_1__3 )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( LA71_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                alt71=1;
            }
            else if ( LA71_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                alt71=1;
            }
            else if ( LA71_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                alt71=1;
            }
            else if ( LA71_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                alt71=1;
            }
            else if ( LA71_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                alt71=1;
            }
            else if ( LA71_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // InternalIDSLParser.g:11503:2: rule__Text__UnorderedGroup_1_2_1__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_1_2_1__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__2"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__3"
    // InternalIDSLParser.g:11509:1: rule__Text__UnorderedGroup_1_2_1__3 : rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__4 )? ;
    public final void rule__Text__UnorderedGroup_1_2_1__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11513:1: ( rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__4 )? )
            // InternalIDSLParser.g:11514:2: rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__4 )?
            {
            pushFollow(FOLLOW_45);
            rule__Text__UnorderedGroup_1_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11515:2: ( rule__Text__UnorderedGroup_1_2_1__4 )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( LA72_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                alt72=1;
            }
            else if ( LA72_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                alt72=1;
            }
            else if ( LA72_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                alt72=1;
            }
            else if ( LA72_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                alt72=1;
            }
            else if ( LA72_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                alt72=1;
            }
            else if ( LA72_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // InternalIDSLParser.g:11515:2: rule__Text__UnorderedGroup_1_2_1__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_1_2_1__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__3"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__4"
    // InternalIDSLParser.g:11521:1: rule__Text__UnorderedGroup_1_2_1__4 : rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__5 )? ;
    public final void rule__Text__UnorderedGroup_1_2_1__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11525:1: ( rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__5 )? )
            // InternalIDSLParser.g:11526:2: rule__Text__UnorderedGroup_1_2_1__Impl ( rule__Text__UnorderedGroup_1_2_1__5 )?
            {
            pushFollow(FOLLOW_45);
            rule__Text__UnorderedGroup_1_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11527:2: ( rule__Text__UnorderedGroup_1_2_1__5 )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( LA73_0 == Align && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 0) ) {
                alt73=1;
            }
            else if ( LA73_0 == Color && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 1) ) {
                alt73=1;
            }
            else if ( LA73_0 == Font && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 2) ) {
                alt73=1;
            }
            else if ( LA73_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 3) ) {
                alt73=1;
            }
            else if ( LA73_0 == Maxwidth && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 4) ) {
                alt73=1;
            }
            else if ( LA73_0 == Value && getUnorderedGroupHelper().canSelect(grammarAccess.getTextAccess().getUnorderedGroup_1_2_1(), 5) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // InternalIDSLParser.g:11527:2: rule__Text__UnorderedGroup_1_2_1__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Text__UnorderedGroup_1_2_1__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__4"


    // $ANTLR start "rule__Text__UnorderedGroup_1_2_1__5"
    // InternalIDSLParser.g:11533:1: rule__Text__UnorderedGroup_1_2_1__5 : rule__Text__UnorderedGroup_1_2_1__Impl ;
    public final void rule__Text__UnorderedGroup_1_2_1__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11537:1: ( rule__Text__UnorderedGroup_1_2_1__Impl )
            // InternalIDSLParser.g:11538:2: rule__Text__UnorderedGroup_1_2_1__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Text__UnorderedGroup_1_2_1__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__UnorderedGroup_1_2_1__5"


    // $ANTLR start "rule__Image__UnorderedGroup_3"
    // InternalIDSLParser.g:11545:1: rule__Image__UnorderedGroup_3 : rule__Image__UnorderedGroup_3__0 {...}?;
    public final void rule__Image__UnorderedGroup_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getImageAccess().getUnorderedGroup_3());
        	
        try {
            // InternalIDSLParser.g:11550:1: ( rule__Image__UnorderedGroup_3__0 {...}?)
            // InternalIDSLParser.g:11551:2: rule__Image__UnorderedGroup_3__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Image__UnorderedGroup_3__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getImageAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Image__UnorderedGroup_3", "getUnorderedGroupHelper().canLeave(grammarAccess.getImageAccess().getUnorderedGroup_3())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getImageAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__UnorderedGroup_3"


    // $ANTLR start "rule__Image__UnorderedGroup_3__Impl"
    // InternalIDSLParser.g:11559:1: rule__Image__UnorderedGroup_3__Impl : ( ({...}? => ( ( ( rule__Image__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_2__0 ) ) ) ) ) ;
    public final void rule__Image__UnorderedGroup_3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:11564:1: ( ( ({...}? => ( ( ( rule__Image__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_2__0 ) ) ) ) ) )
            // InternalIDSLParser.g:11565:3: ( ({...}? => ( ( ( rule__Image__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_2__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:11565:3: ( ({...}? => ( ( ( rule__Image__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Image__Group_3_2__0 ) ) ) ) )
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( LA74_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 0) ) {
                alt74=1;
            }
            else if ( LA74_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 1) ) {
                alt74=2;
            }
            else if ( LA74_0 == Src && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 2) ) {
                alt74=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // InternalIDSLParser.g:11566:3: ({...}? => ( ( ( rule__Image__Group_3_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11566:3: ({...}? => ( ( ( rule__Image__Group_3_0__0 ) ) ) )
                    // InternalIDSLParser.g:11567:4: {...}? => ( ( ( rule__Image__Group_3_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Image__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 0)");
                    }
                    // InternalIDSLParser.g:11567:101: ( ( ( rule__Image__Group_3_0__0 ) ) )
                    // InternalIDSLParser.g:11568:5: ( ( rule__Image__Group_3_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getImageAccess().getUnorderedGroup_3(), 0);
                    selected = true;
                    // InternalIDSLParser.g:11574:5: ( ( rule__Image__Group_3_0__0 ) )
                    // InternalIDSLParser.g:11575:6: ( rule__Image__Group_3_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getImageAccess().getGroup_3_0()); 
                    }
                    // InternalIDSLParser.g:11576:6: ( rule__Image__Group_3_0__0 )
                    // InternalIDSLParser.g:11576:7: rule__Image__Group_3_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Image__Group_3_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getImageAccess().getGroup_3_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:11581:3: ({...}? => ( ( ( rule__Image__Group_3_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11581:3: ({...}? => ( ( ( rule__Image__Group_3_1__0 ) ) ) )
                    // InternalIDSLParser.g:11582:4: {...}? => ( ( ( rule__Image__Group_3_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Image__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 1)");
                    }
                    // InternalIDSLParser.g:11582:101: ( ( ( rule__Image__Group_3_1__0 ) ) )
                    // InternalIDSLParser.g:11583:5: ( ( rule__Image__Group_3_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getImageAccess().getUnorderedGroup_3(), 1);
                    selected = true;
                    // InternalIDSLParser.g:11589:5: ( ( rule__Image__Group_3_1__0 ) )
                    // InternalIDSLParser.g:11590:6: ( rule__Image__Group_3_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getImageAccess().getGroup_3_1()); 
                    }
                    // InternalIDSLParser.g:11591:6: ( rule__Image__Group_3_1__0 )
                    // InternalIDSLParser.g:11591:7: rule__Image__Group_3_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Image__Group_3_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getImageAccess().getGroup_3_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:11596:3: ({...}? => ( ( ( rule__Image__Group_3_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11596:3: ({...}? => ( ( ( rule__Image__Group_3_2__0 ) ) ) )
                    // InternalIDSLParser.g:11597:4: {...}? => ( ( ( rule__Image__Group_3_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Image__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 2)");
                    }
                    // InternalIDSLParser.g:11597:101: ( ( ( rule__Image__Group_3_2__0 ) ) )
                    // InternalIDSLParser.g:11598:5: ( ( rule__Image__Group_3_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getImageAccess().getUnorderedGroup_3(), 2);
                    selected = true;
                    // InternalIDSLParser.g:11604:5: ( ( rule__Image__Group_3_2__0 ) )
                    // InternalIDSLParser.g:11605:6: ( rule__Image__Group_3_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getImageAccess().getGroup_3_2()); 
                    }
                    // InternalIDSLParser.g:11606:6: ( rule__Image__Group_3_2__0 )
                    // InternalIDSLParser.g:11606:7: rule__Image__Group_3_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Image__Group_3_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getImageAccess().getGroup_3_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getImageAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__UnorderedGroup_3__Impl"


    // $ANTLR start "rule__Image__UnorderedGroup_3__0"
    // InternalIDSLParser.g:11619:1: rule__Image__UnorderedGroup_3__0 : rule__Image__UnorderedGroup_3__Impl ( rule__Image__UnorderedGroup_3__1 )? ;
    public final void rule__Image__UnorderedGroup_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11623:1: ( rule__Image__UnorderedGroup_3__Impl ( rule__Image__UnorderedGroup_3__1 )? )
            // InternalIDSLParser.g:11624:2: rule__Image__UnorderedGroup_3__Impl ( rule__Image__UnorderedGroup_3__1 )?
            {
            pushFollow(FOLLOW_49);
            rule__Image__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11625:2: ( rule__Image__UnorderedGroup_3__1 )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( LA75_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 0) ) {
                alt75=1;
            }
            else if ( LA75_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 1) ) {
                alt75=1;
            }
            else if ( LA75_0 == Src && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 2) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // InternalIDSLParser.g:11625:2: rule__Image__UnorderedGroup_3__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Image__UnorderedGroup_3__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__UnorderedGroup_3__0"


    // $ANTLR start "rule__Image__UnorderedGroup_3__1"
    // InternalIDSLParser.g:11631:1: rule__Image__UnorderedGroup_3__1 : rule__Image__UnorderedGroup_3__Impl ( rule__Image__UnorderedGroup_3__2 )? ;
    public final void rule__Image__UnorderedGroup_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11635:1: ( rule__Image__UnorderedGroup_3__Impl ( rule__Image__UnorderedGroup_3__2 )? )
            // InternalIDSLParser.g:11636:2: rule__Image__UnorderedGroup_3__Impl ( rule__Image__UnorderedGroup_3__2 )?
            {
            pushFollow(FOLLOW_49);
            rule__Image__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11637:2: ( rule__Image__UnorderedGroup_3__2 )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( LA76_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 0) ) {
                alt76=1;
            }
            else if ( LA76_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 1) ) {
                alt76=1;
            }
            else if ( LA76_0 == Src && getUnorderedGroupHelper().canSelect(grammarAccess.getImageAccess().getUnorderedGroup_3(), 2) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // InternalIDSLParser.g:11637:2: rule__Image__UnorderedGroup_3__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Image__UnorderedGroup_3__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__UnorderedGroup_3__1"


    // $ANTLR start "rule__Image__UnorderedGroup_3__2"
    // InternalIDSLParser.g:11643:1: rule__Image__UnorderedGroup_3__2 : rule__Image__UnorderedGroup_3__Impl ;
    public final void rule__Image__UnorderedGroup_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11647:1: ( rule__Image__UnorderedGroup_3__Impl )
            // InternalIDSLParser.g:11648:2: rule__Image__UnorderedGroup_3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Image__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__UnorderedGroup_3__2"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3"
    // InternalIDSLParser.g:11655:1: rule__Piechart__UnorderedGroup_3 : rule__Piechart__UnorderedGroup_3__0 {...}?;
    public final void rule__Piechart__UnorderedGroup_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getPiechartAccess().getUnorderedGroup_3());
        	
        try {
            // InternalIDSLParser.g:11660:1: ( rule__Piechart__UnorderedGroup_3__0 {...}?)
            // InternalIDSLParser.g:11661:2: rule__Piechart__UnorderedGroup_3__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__UnorderedGroup_3__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPiechartAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3", "getUnorderedGroupHelper().canLeave(grammarAccess.getPiechartAccess().getUnorderedGroup_3())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getPiechartAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__Impl"
    // InternalIDSLParser.g:11669:1: rule__Piechart__UnorderedGroup_3__Impl : ( ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) ) ) ;
    public final void rule__Piechart__UnorderedGroup_3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:11674:1: ( ( ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) ) ) )
            // InternalIDSLParser.g:11675:3: ( ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:11675:3: ( ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) ) )
            int alt77=12;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // InternalIDSLParser.g:11676:3: ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11676:3: ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) )
                    // InternalIDSLParser.g:11677:4: {...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0)");
                    }
                    // InternalIDSLParser.g:11677:104: ( ( ( rule__Piechart__Group_3_0__0 ) ) )
                    // InternalIDSLParser.g:11678:5: ( ( rule__Piechart__Group_3_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0);
                    selected = true;
                    // InternalIDSLParser.g:11684:5: ( ( rule__Piechart__Group_3_0__0 ) )
                    // InternalIDSLParser.g:11685:6: ( rule__Piechart__Group_3_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_0()); 
                    }
                    // InternalIDSLParser.g:11686:6: ( rule__Piechart__Group_3_0__0 )
                    // InternalIDSLParser.g:11686:7: rule__Piechart__Group_3_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:11691:3: ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11691:3: ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) )
                    // InternalIDSLParser.g:11692:4: {...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1)");
                    }
                    // InternalIDSLParser.g:11692:104: ( ( ( rule__Piechart__Group_3_1__0 ) ) )
                    // InternalIDSLParser.g:11693:5: ( ( rule__Piechart__Group_3_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1);
                    selected = true;
                    // InternalIDSLParser.g:11699:5: ( ( rule__Piechart__Group_3_1__0 ) )
                    // InternalIDSLParser.g:11700:6: ( rule__Piechart__Group_3_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_1()); 
                    }
                    // InternalIDSLParser.g:11701:6: ( rule__Piechart__Group_3_1__0 )
                    // InternalIDSLParser.g:11701:7: rule__Piechart__Group_3_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:11706:3: ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11706:3: ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) )
                    // InternalIDSLParser.g:11707:4: {...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2)");
                    }
                    // InternalIDSLParser.g:11707:104: ( ( ( rule__Piechart__Group_3_2__0 ) ) )
                    // InternalIDSLParser.g:11708:5: ( ( rule__Piechart__Group_3_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2);
                    selected = true;
                    // InternalIDSLParser.g:11714:5: ( ( rule__Piechart__Group_3_2__0 ) )
                    // InternalIDSLParser.g:11715:6: ( rule__Piechart__Group_3_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_2()); 
                    }
                    // InternalIDSLParser.g:11716:6: ( rule__Piechart__Group_3_2__0 )
                    // InternalIDSLParser.g:11716:7: rule__Piechart__Group_3_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:11721:3: ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11721:3: ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) )
                    // InternalIDSLParser.g:11722:4: {...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3)");
                    }
                    // InternalIDSLParser.g:11722:104: ( ( ( rule__Piechart__Group_3_3__0 ) ) )
                    // InternalIDSLParser.g:11723:5: ( ( rule__Piechart__Group_3_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3);
                    selected = true;
                    // InternalIDSLParser.g:11729:5: ( ( rule__Piechart__Group_3_3__0 ) )
                    // InternalIDSLParser.g:11730:6: ( rule__Piechart__Group_3_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_3()); 
                    }
                    // InternalIDSLParser.g:11731:6: ( rule__Piechart__Group_3_3__0 )
                    // InternalIDSLParser.g:11731:7: rule__Piechart__Group_3_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:11736:3: ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11736:3: ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) )
                    // InternalIDSLParser.g:11737:4: {...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4)");
                    }
                    // InternalIDSLParser.g:11737:104: ( ( ( rule__Piechart__Group_3_4__0 ) ) )
                    // InternalIDSLParser.g:11738:5: ( ( rule__Piechart__Group_3_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4);
                    selected = true;
                    // InternalIDSLParser.g:11744:5: ( ( rule__Piechart__Group_3_4__0 ) )
                    // InternalIDSLParser.g:11745:6: ( rule__Piechart__Group_3_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_4()); 
                    }
                    // InternalIDSLParser.g:11746:6: ( rule__Piechart__Group_3_4__0 )
                    // InternalIDSLParser.g:11746:7: rule__Piechart__Group_3_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:11751:3: ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11751:3: ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) )
                    // InternalIDSLParser.g:11752:4: {...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5)");
                    }
                    // InternalIDSLParser.g:11752:104: ( ( ( rule__Piechart__Group_3_5__0 ) ) )
                    // InternalIDSLParser.g:11753:5: ( ( rule__Piechart__Group_3_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5);
                    selected = true;
                    // InternalIDSLParser.g:11759:5: ( ( rule__Piechart__Group_3_5__0 ) )
                    // InternalIDSLParser.g:11760:6: ( rule__Piechart__Group_3_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_5()); 
                    }
                    // InternalIDSLParser.g:11761:6: ( rule__Piechart__Group_3_5__0 )
                    // InternalIDSLParser.g:11761:7: rule__Piechart__Group_3_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:11766:3: ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11766:3: ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) )
                    // InternalIDSLParser.g:11767:4: {...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6)");
                    }
                    // InternalIDSLParser.g:11767:104: ( ( ( rule__Piechart__Group_3_6__0 ) ) )
                    // InternalIDSLParser.g:11768:5: ( ( rule__Piechart__Group_3_6__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6);
                    selected = true;
                    // InternalIDSLParser.g:11774:5: ( ( rule__Piechart__Group_3_6__0 ) )
                    // InternalIDSLParser.g:11775:6: ( rule__Piechart__Group_3_6__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_6()); 
                    }
                    // InternalIDSLParser.g:11776:6: ( rule__Piechart__Group_3_6__0 )
                    // InternalIDSLParser.g:11776:7: rule__Piechart__Group_3_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_6()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalIDSLParser.g:11781:3: ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11781:3: ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) )
                    // InternalIDSLParser.g:11782:4: {...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7)");
                    }
                    // InternalIDSLParser.g:11782:104: ( ( ( rule__Piechart__Group_3_7__0 ) ) )
                    // InternalIDSLParser.g:11783:5: ( ( rule__Piechart__Group_3_7__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7);
                    selected = true;
                    // InternalIDSLParser.g:11789:5: ( ( rule__Piechart__Group_3_7__0 ) )
                    // InternalIDSLParser.g:11790:6: ( rule__Piechart__Group_3_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_7()); 
                    }
                    // InternalIDSLParser.g:11791:6: ( rule__Piechart__Group_3_7__0 )
                    // InternalIDSLParser.g:11791:7: rule__Piechart__Group_3_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_7()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 9 :
                    // InternalIDSLParser.g:11796:3: ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11796:3: ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) )
                    // InternalIDSLParser.g:11797:4: {...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8)");
                    }
                    // InternalIDSLParser.g:11797:104: ( ( ( rule__Piechart__Group_3_8__0 ) ) )
                    // InternalIDSLParser.g:11798:5: ( ( rule__Piechart__Group_3_8__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8);
                    selected = true;
                    // InternalIDSLParser.g:11804:5: ( ( rule__Piechart__Group_3_8__0 ) )
                    // InternalIDSLParser.g:11805:6: ( rule__Piechart__Group_3_8__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_8()); 
                    }
                    // InternalIDSLParser.g:11806:6: ( rule__Piechart__Group_3_8__0 )
                    // InternalIDSLParser.g:11806:7: rule__Piechart__Group_3_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_8()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 10 :
                    // InternalIDSLParser.g:11811:3: ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11811:3: ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) )
                    // InternalIDSLParser.g:11812:4: {...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9)");
                    }
                    // InternalIDSLParser.g:11812:104: ( ( ( rule__Piechart__Group_3_9__0 ) ) )
                    // InternalIDSLParser.g:11813:5: ( ( rule__Piechart__Group_3_9__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9);
                    selected = true;
                    // InternalIDSLParser.g:11819:5: ( ( rule__Piechart__Group_3_9__0 ) )
                    // InternalIDSLParser.g:11820:6: ( rule__Piechart__Group_3_9__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_9()); 
                    }
                    // InternalIDSLParser.g:11821:6: ( rule__Piechart__Group_3_9__0 )
                    // InternalIDSLParser.g:11821:7: rule__Piechart__Group_3_9__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_9__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_9()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 11 :
                    // InternalIDSLParser.g:11826:3: ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11826:3: ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) )
                    // InternalIDSLParser.g:11827:4: {...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10)");
                    }
                    // InternalIDSLParser.g:11827:105: ( ( ( rule__Piechart__Group_3_10__0 ) ) )
                    // InternalIDSLParser.g:11828:5: ( ( rule__Piechart__Group_3_10__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10);
                    selected = true;
                    // InternalIDSLParser.g:11834:5: ( ( rule__Piechart__Group_3_10__0 ) )
                    // InternalIDSLParser.g:11835:6: ( rule__Piechart__Group_3_10__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_10()); 
                    }
                    // InternalIDSLParser.g:11836:6: ( rule__Piechart__Group_3_10__0 )
                    // InternalIDSLParser.g:11836:7: rule__Piechart__Group_3_10__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_10__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_10()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 12 :
                    // InternalIDSLParser.g:11841:3: ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:11841:3: ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) )
                    // InternalIDSLParser.g:11842:4: {...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Piechart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11)");
                    }
                    // InternalIDSLParser.g:11842:105: ( ( ( rule__Piechart__Group_3_11__0 ) ) )
                    // InternalIDSLParser.g:11843:5: ( ( rule__Piechart__Group_3_11__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11);
                    selected = true;
                    // InternalIDSLParser.g:11849:5: ( ( rule__Piechart__Group_3_11__0 ) )
                    // InternalIDSLParser.g:11850:6: ( rule__Piechart__Group_3_11__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPiechartAccess().getGroup_3_11()); 
                    }
                    // InternalIDSLParser.g:11851:6: ( rule__Piechart__Group_3_11__0 )
                    // InternalIDSLParser.g:11851:7: rule__Piechart__Group_3_11__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__Group_3_11__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPiechartAccess().getGroup_3_11()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPiechartAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__Impl"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__0"
    // InternalIDSLParser.g:11864:1: rule__Piechart__UnorderedGroup_3__0 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__1 )? ;
    public final void rule__Piechart__UnorderedGroup_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11868:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__1 )? )
            // InternalIDSLParser.g:11869:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__1 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11870:2: ( rule__Piechart__UnorderedGroup_3__1 )?
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // InternalIDSLParser.g:11870:2: rule__Piechart__UnorderedGroup_3__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__0"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__1"
    // InternalIDSLParser.g:11876:1: rule__Piechart__UnorderedGroup_3__1 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__2 )? ;
    public final void rule__Piechart__UnorderedGroup_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11880:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__2 )? )
            // InternalIDSLParser.g:11881:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__2 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11882:2: ( rule__Piechart__UnorderedGroup_3__2 )?
            int alt79=2;
            alt79 = dfa79.predict(input);
            switch (alt79) {
                case 1 :
                    // InternalIDSLParser.g:11882:2: rule__Piechart__UnorderedGroup_3__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__1"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__2"
    // InternalIDSLParser.g:11888:1: rule__Piechart__UnorderedGroup_3__2 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__3 )? ;
    public final void rule__Piechart__UnorderedGroup_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11892:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__3 )? )
            // InternalIDSLParser.g:11893:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__3 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11894:2: ( rule__Piechart__UnorderedGroup_3__3 )?
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // InternalIDSLParser.g:11894:2: rule__Piechart__UnorderedGroup_3__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__2"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__3"
    // InternalIDSLParser.g:11900:1: rule__Piechart__UnorderedGroup_3__3 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__4 )? ;
    public final void rule__Piechart__UnorderedGroup_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11904:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__4 )? )
            // InternalIDSLParser.g:11905:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__4 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11906:2: ( rule__Piechart__UnorderedGroup_3__4 )?
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // InternalIDSLParser.g:11906:2: rule__Piechart__UnorderedGroup_3__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__3"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__4"
    // InternalIDSLParser.g:11912:1: rule__Piechart__UnorderedGroup_3__4 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__5 )? ;
    public final void rule__Piechart__UnorderedGroup_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11916:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__5 )? )
            // InternalIDSLParser.g:11917:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__5 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11918:2: ( rule__Piechart__UnorderedGroup_3__5 )?
            int alt82=2;
            alt82 = dfa82.predict(input);
            switch (alt82) {
                case 1 :
                    // InternalIDSLParser.g:11918:2: rule__Piechart__UnorderedGroup_3__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__4"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__5"
    // InternalIDSLParser.g:11924:1: rule__Piechart__UnorderedGroup_3__5 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__6 )? ;
    public final void rule__Piechart__UnorderedGroup_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11928:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__6 )? )
            // InternalIDSLParser.g:11929:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__6 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11930:2: ( rule__Piechart__UnorderedGroup_3__6 )?
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // InternalIDSLParser.g:11930:2: rule__Piechart__UnorderedGroup_3__6
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__5"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__6"
    // InternalIDSLParser.g:11936:1: rule__Piechart__UnorderedGroup_3__6 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__7 )? ;
    public final void rule__Piechart__UnorderedGroup_3__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11940:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__7 )? )
            // InternalIDSLParser.g:11941:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__7 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11942:2: ( rule__Piechart__UnorderedGroup_3__7 )?
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // InternalIDSLParser.g:11942:2: rule__Piechart__UnorderedGroup_3__7
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__7();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__6"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__7"
    // InternalIDSLParser.g:11948:1: rule__Piechart__UnorderedGroup_3__7 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__8 )? ;
    public final void rule__Piechart__UnorderedGroup_3__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11952:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__8 )? )
            // InternalIDSLParser.g:11953:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__8 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11954:2: ( rule__Piechart__UnorderedGroup_3__8 )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // InternalIDSLParser.g:11954:2: rule__Piechart__UnorderedGroup_3__8
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__8();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__7"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__8"
    // InternalIDSLParser.g:11960:1: rule__Piechart__UnorderedGroup_3__8 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__9 )? ;
    public final void rule__Piechart__UnorderedGroup_3__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11964:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__9 )? )
            // InternalIDSLParser.g:11965:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__9 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11966:2: ( rule__Piechart__UnorderedGroup_3__9 )?
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // InternalIDSLParser.g:11966:2: rule__Piechart__UnorderedGroup_3__9
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__8"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__9"
    // InternalIDSLParser.g:11972:1: rule__Piechart__UnorderedGroup_3__9 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__10 )? ;
    public final void rule__Piechart__UnorderedGroup_3__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11976:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__10 )? )
            // InternalIDSLParser.g:11977:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__10 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11978:2: ( rule__Piechart__UnorderedGroup_3__10 )?
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // InternalIDSLParser.g:11978:2: rule__Piechart__UnorderedGroup_3__10
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__10();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__9"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__10"
    // InternalIDSLParser.g:11984:1: rule__Piechart__UnorderedGroup_3__10 : rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__11 )? ;
    public final void rule__Piechart__UnorderedGroup_3__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:11988:1: ( rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__11 )? )
            // InternalIDSLParser.g:11989:2: rule__Piechart__UnorderedGroup_3__Impl ( rule__Piechart__UnorderedGroup_3__11 )?
            {
            pushFollow(FOLLOW_50);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:11990:2: ( rule__Piechart__UnorderedGroup_3__11 )?
            int alt88=2;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // InternalIDSLParser.g:11990:2: rule__Piechart__UnorderedGroup_3__11
                    {
                    pushFollow(FOLLOW_2);
                    rule__Piechart__UnorderedGroup_3__11();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__10"


    // $ANTLR start "rule__Piechart__UnorderedGroup_3__11"
    // InternalIDSLParser.g:11996:1: rule__Piechart__UnorderedGroup_3__11 : rule__Piechart__UnorderedGroup_3__Impl ;
    public final void rule__Piechart__UnorderedGroup_3__11() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12000:1: ( rule__Piechart__UnorderedGroup_3__Impl )
            // InternalIDSLParser.g:12001:2: rule__Piechart__UnorderedGroup_3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Piechart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__UnorderedGroup_3__11"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3"
    // InternalIDSLParser.g:12008:1: rule__Barchart__UnorderedGroup_3 : rule__Barchart__UnorderedGroup_3__0 {...}?;
    public final void rule__Barchart__UnorderedGroup_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getBarchartAccess().getUnorderedGroup_3());
        	
        try {
            // InternalIDSLParser.g:12013:1: ( rule__Barchart__UnorderedGroup_3__0 {...}?)
            // InternalIDSLParser.g:12014:2: rule__Barchart__UnorderedGroup_3__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__UnorderedGroup_3__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getBarchartAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3", "getUnorderedGroupHelper().canLeave(grammarAccess.getBarchartAccess().getUnorderedGroup_3())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getBarchartAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__Impl"
    // InternalIDSLParser.g:12022:1: rule__Barchart__UnorderedGroup_3__Impl : ( ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) ) ) ;
    public final void rule__Barchart__UnorderedGroup_3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:12027:1: ( ( ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) ) ) )
            // InternalIDSLParser.g:12028:3: ( ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:12028:3: ( ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) ) )
            int alt89=13;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // InternalIDSLParser.g:12029:3: ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12029:3: ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) )
                    // InternalIDSLParser.g:12030:4: {...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0)");
                    }
                    // InternalIDSLParser.g:12030:104: ( ( ( rule__Barchart__Group_3_0__0 ) ) )
                    // InternalIDSLParser.g:12031:5: ( ( rule__Barchart__Group_3_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0);
                    selected = true;
                    // InternalIDSLParser.g:12037:5: ( ( rule__Barchart__Group_3_0__0 ) )
                    // InternalIDSLParser.g:12038:6: ( rule__Barchart__Group_3_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_0()); 
                    }
                    // InternalIDSLParser.g:12039:6: ( rule__Barchart__Group_3_0__0 )
                    // InternalIDSLParser.g:12039:7: rule__Barchart__Group_3_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:12044:3: ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12044:3: ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) )
                    // InternalIDSLParser.g:12045:4: {...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1)");
                    }
                    // InternalIDSLParser.g:12045:104: ( ( ( rule__Barchart__Group_3_1__0 ) ) )
                    // InternalIDSLParser.g:12046:5: ( ( rule__Barchart__Group_3_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1);
                    selected = true;
                    // InternalIDSLParser.g:12052:5: ( ( rule__Barchart__Group_3_1__0 ) )
                    // InternalIDSLParser.g:12053:6: ( rule__Barchart__Group_3_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_1()); 
                    }
                    // InternalIDSLParser.g:12054:6: ( rule__Barchart__Group_3_1__0 )
                    // InternalIDSLParser.g:12054:7: rule__Barchart__Group_3_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:12059:3: ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12059:3: ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) )
                    // InternalIDSLParser.g:12060:4: {...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2)");
                    }
                    // InternalIDSLParser.g:12060:104: ( ( ( rule__Barchart__Group_3_2__0 ) ) )
                    // InternalIDSLParser.g:12061:5: ( ( rule__Barchart__Group_3_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2);
                    selected = true;
                    // InternalIDSLParser.g:12067:5: ( ( rule__Barchart__Group_3_2__0 ) )
                    // InternalIDSLParser.g:12068:6: ( rule__Barchart__Group_3_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_2()); 
                    }
                    // InternalIDSLParser.g:12069:6: ( rule__Barchart__Group_3_2__0 )
                    // InternalIDSLParser.g:12069:7: rule__Barchart__Group_3_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:12074:3: ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12074:3: ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) )
                    // InternalIDSLParser.g:12075:4: {...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3)");
                    }
                    // InternalIDSLParser.g:12075:104: ( ( ( rule__Barchart__Group_3_3__0 ) ) )
                    // InternalIDSLParser.g:12076:5: ( ( rule__Barchart__Group_3_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3);
                    selected = true;
                    // InternalIDSLParser.g:12082:5: ( ( rule__Barchart__Group_3_3__0 ) )
                    // InternalIDSLParser.g:12083:6: ( rule__Barchart__Group_3_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_3()); 
                    }
                    // InternalIDSLParser.g:12084:6: ( rule__Barchart__Group_3_3__0 )
                    // InternalIDSLParser.g:12084:7: rule__Barchart__Group_3_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:12089:3: ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12089:3: ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) )
                    // InternalIDSLParser.g:12090:4: {...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4)");
                    }
                    // InternalIDSLParser.g:12090:104: ( ( ( rule__Barchart__Group_3_4__0 ) ) )
                    // InternalIDSLParser.g:12091:5: ( ( rule__Barchart__Group_3_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4);
                    selected = true;
                    // InternalIDSLParser.g:12097:5: ( ( rule__Barchart__Group_3_4__0 ) )
                    // InternalIDSLParser.g:12098:6: ( rule__Barchart__Group_3_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_4()); 
                    }
                    // InternalIDSLParser.g:12099:6: ( rule__Barchart__Group_3_4__0 )
                    // InternalIDSLParser.g:12099:7: rule__Barchart__Group_3_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:12104:3: ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12104:3: ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) )
                    // InternalIDSLParser.g:12105:4: {...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5)");
                    }
                    // InternalIDSLParser.g:12105:104: ( ( ( rule__Barchart__Group_3_5__0 ) ) )
                    // InternalIDSLParser.g:12106:5: ( ( rule__Barchart__Group_3_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5);
                    selected = true;
                    // InternalIDSLParser.g:12112:5: ( ( rule__Barchart__Group_3_5__0 ) )
                    // InternalIDSLParser.g:12113:6: ( rule__Barchart__Group_3_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_5()); 
                    }
                    // InternalIDSLParser.g:12114:6: ( rule__Barchart__Group_3_5__0 )
                    // InternalIDSLParser.g:12114:7: rule__Barchart__Group_3_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:12119:3: ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12119:3: ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) )
                    // InternalIDSLParser.g:12120:4: {...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6)");
                    }
                    // InternalIDSLParser.g:12120:104: ( ( ( rule__Barchart__Group_3_6__0 ) ) )
                    // InternalIDSLParser.g:12121:5: ( ( rule__Barchart__Group_3_6__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6);
                    selected = true;
                    // InternalIDSLParser.g:12127:5: ( ( rule__Barchart__Group_3_6__0 ) )
                    // InternalIDSLParser.g:12128:6: ( rule__Barchart__Group_3_6__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_6()); 
                    }
                    // InternalIDSLParser.g:12129:6: ( rule__Barchart__Group_3_6__0 )
                    // InternalIDSLParser.g:12129:7: rule__Barchart__Group_3_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_6()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalIDSLParser.g:12134:3: ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12134:3: ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) )
                    // InternalIDSLParser.g:12135:4: {...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7)");
                    }
                    // InternalIDSLParser.g:12135:104: ( ( ( rule__Barchart__Group_3_7__0 ) ) )
                    // InternalIDSLParser.g:12136:5: ( ( rule__Barchart__Group_3_7__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7);
                    selected = true;
                    // InternalIDSLParser.g:12142:5: ( ( rule__Barchart__Group_3_7__0 ) )
                    // InternalIDSLParser.g:12143:6: ( rule__Barchart__Group_3_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_7()); 
                    }
                    // InternalIDSLParser.g:12144:6: ( rule__Barchart__Group_3_7__0 )
                    // InternalIDSLParser.g:12144:7: rule__Barchart__Group_3_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_7()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 9 :
                    // InternalIDSLParser.g:12149:3: ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12149:3: ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) )
                    // InternalIDSLParser.g:12150:4: {...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8)");
                    }
                    // InternalIDSLParser.g:12150:104: ( ( ( rule__Barchart__Group_3_8__0 ) ) )
                    // InternalIDSLParser.g:12151:5: ( ( rule__Barchart__Group_3_8__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8);
                    selected = true;
                    // InternalIDSLParser.g:12157:5: ( ( rule__Barchart__Group_3_8__0 ) )
                    // InternalIDSLParser.g:12158:6: ( rule__Barchart__Group_3_8__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_8()); 
                    }
                    // InternalIDSLParser.g:12159:6: ( rule__Barchart__Group_3_8__0 )
                    // InternalIDSLParser.g:12159:7: rule__Barchart__Group_3_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_8()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 10 :
                    // InternalIDSLParser.g:12164:3: ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12164:3: ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) )
                    // InternalIDSLParser.g:12165:4: {...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9)");
                    }
                    // InternalIDSLParser.g:12165:104: ( ( ( rule__Barchart__Group_3_9__0 ) ) )
                    // InternalIDSLParser.g:12166:5: ( ( rule__Barchart__Group_3_9__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9);
                    selected = true;
                    // InternalIDSLParser.g:12172:5: ( ( rule__Barchart__Group_3_9__0 ) )
                    // InternalIDSLParser.g:12173:6: ( rule__Barchart__Group_3_9__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_9()); 
                    }
                    // InternalIDSLParser.g:12174:6: ( rule__Barchart__Group_3_9__0 )
                    // InternalIDSLParser.g:12174:7: rule__Barchart__Group_3_9__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_9__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_9()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 11 :
                    // InternalIDSLParser.g:12179:3: ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12179:3: ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) )
                    // InternalIDSLParser.g:12180:4: {...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10)");
                    }
                    // InternalIDSLParser.g:12180:105: ( ( ( rule__Barchart__Group_3_10__0 ) ) )
                    // InternalIDSLParser.g:12181:5: ( ( rule__Barchart__Group_3_10__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10);
                    selected = true;
                    // InternalIDSLParser.g:12187:5: ( ( rule__Barchart__Group_3_10__0 ) )
                    // InternalIDSLParser.g:12188:6: ( rule__Barchart__Group_3_10__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_10()); 
                    }
                    // InternalIDSLParser.g:12189:6: ( rule__Barchart__Group_3_10__0 )
                    // InternalIDSLParser.g:12189:7: rule__Barchart__Group_3_10__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_10__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_10()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 12 :
                    // InternalIDSLParser.g:12194:3: ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12194:3: ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) )
                    // InternalIDSLParser.g:12195:4: {...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11)");
                    }
                    // InternalIDSLParser.g:12195:105: ( ( ( rule__Barchart__Group_3_11__0 ) ) )
                    // InternalIDSLParser.g:12196:5: ( ( rule__Barchart__Group_3_11__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11);
                    selected = true;
                    // InternalIDSLParser.g:12202:5: ( ( rule__Barchart__Group_3_11__0 ) )
                    // InternalIDSLParser.g:12203:6: ( rule__Barchart__Group_3_11__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_11()); 
                    }
                    // InternalIDSLParser.g:12204:6: ( rule__Barchart__Group_3_11__0 )
                    // InternalIDSLParser.g:12204:7: rule__Barchart__Group_3_11__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_11__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_11()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 13 :
                    // InternalIDSLParser.g:12209:3: ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12209:3: ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) )
                    // InternalIDSLParser.g:12210:4: {...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Barchart__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12)");
                    }
                    // InternalIDSLParser.g:12210:105: ( ( ( rule__Barchart__Group_3_12__0 ) ) )
                    // InternalIDSLParser.g:12211:5: ( ( rule__Barchart__Group_3_12__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12);
                    selected = true;
                    // InternalIDSLParser.g:12217:5: ( ( rule__Barchart__Group_3_12__0 ) )
                    // InternalIDSLParser.g:12218:6: ( rule__Barchart__Group_3_12__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getBarchartAccess().getGroup_3_12()); 
                    }
                    // InternalIDSLParser.g:12219:6: ( rule__Barchart__Group_3_12__0 )
                    // InternalIDSLParser.g:12219:7: rule__Barchart__Group_3_12__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__Group_3_12__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getBarchartAccess().getGroup_3_12()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getBarchartAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__Impl"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__0"
    // InternalIDSLParser.g:12232:1: rule__Barchart__UnorderedGroup_3__0 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__1 )? ;
    public final void rule__Barchart__UnorderedGroup_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12236:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__1 )? )
            // InternalIDSLParser.g:12237:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__1 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12238:2: ( rule__Barchart__UnorderedGroup_3__1 )?
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // InternalIDSLParser.g:12238:2: rule__Barchart__UnorderedGroup_3__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__0"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__1"
    // InternalIDSLParser.g:12244:1: rule__Barchart__UnorderedGroup_3__1 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__2 )? ;
    public final void rule__Barchart__UnorderedGroup_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12248:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__2 )? )
            // InternalIDSLParser.g:12249:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__2 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12250:2: ( rule__Barchart__UnorderedGroup_3__2 )?
            int alt91=2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // InternalIDSLParser.g:12250:2: rule__Barchart__UnorderedGroup_3__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__1"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__2"
    // InternalIDSLParser.g:12256:1: rule__Barchart__UnorderedGroup_3__2 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__3 )? ;
    public final void rule__Barchart__UnorderedGroup_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12260:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__3 )? )
            // InternalIDSLParser.g:12261:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__3 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12262:2: ( rule__Barchart__UnorderedGroup_3__3 )?
            int alt92=2;
            alt92 = dfa92.predict(input);
            switch (alt92) {
                case 1 :
                    // InternalIDSLParser.g:12262:2: rule__Barchart__UnorderedGroup_3__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__2"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__3"
    // InternalIDSLParser.g:12268:1: rule__Barchart__UnorderedGroup_3__3 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__4 )? ;
    public final void rule__Barchart__UnorderedGroup_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12272:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__4 )? )
            // InternalIDSLParser.g:12273:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__4 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12274:2: ( rule__Barchart__UnorderedGroup_3__4 )?
            int alt93=2;
            alt93 = dfa93.predict(input);
            switch (alt93) {
                case 1 :
                    // InternalIDSLParser.g:12274:2: rule__Barchart__UnorderedGroup_3__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__3"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__4"
    // InternalIDSLParser.g:12280:1: rule__Barchart__UnorderedGroup_3__4 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__5 )? ;
    public final void rule__Barchart__UnorderedGroup_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12284:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__5 )? )
            // InternalIDSLParser.g:12285:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__5 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12286:2: ( rule__Barchart__UnorderedGroup_3__5 )?
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    // InternalIDSLParser.g:12286:2: rule__Barchart__UnorderedGroup_3__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__4"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__5"
    // InternalIDSLParser.g:12292:1: rule__Barchart__UnorderedGroup_3__5 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__6 )? ;
    public final void rule__Barchart__UnorderedGroup_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12296:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__6 )? )
            // InternalIDSLParser.g:12297:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__6 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12298:2: ( rule__Barchart__UnorderedGroup_3__6 )?
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // InternalIDSLParser.g:12298:2: rule__Barchart__UnorderedGroup_3__6
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__5"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__6"
    // InternalIDSLParser.g:12304:1: rule__Barchart__UnorderedGroup_3__6 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__7 )? ;
    public final void rule__Barchart__UnorderedGroup_3__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12308:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__7 )? )
            // InternalIDSLParser.g:12309:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__7 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12310:2: ( rule__Barchart__UnorderedGroup_3__7 )?
            int alt96=2;
            alt96 = dfa96.predict(input);
            switch (alt96) {
                case 1 :
                    // InternalIDSLParser.g:12310:2: rule__Barchart__UnorderedGroup_3__7
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__7();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__6"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__7"
    // InternalIDSLParser.g:12316:1: rule__Barchart__UnorderedGroup_3__7 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__8 )? ;
    public final void rule__Barchart__UnorderedGroup_3__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12320:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__8 )? )
            // InternalIDSLParser.g:12321:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__8 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12322:2: ( rule__Barchart__UnorderedGroup_3__8 )?
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // InternalIDSLParser.g:12322:2: rule__Barchart__UnorderedGroup_3__8
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__8();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__7"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__8"
    // InternalIDSLParser.g:12328:1: rule__Barchart__UnorderedGroup_3__8 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__9 )? ;
    public final void rule__Barchart__UnorderedGroup_3__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12332:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__9 )? )
            // InternalIDSLParser.g:12333:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__9 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12334:2: ( rule__Barchart__UnorderedGroup_3__9 )?
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // InternalIDSLParser.g:12334:2: rule__Barchart__UnorderedGroup_3__9
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__8"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__9"
    // InternalIDSLParser.g:12340:1: rule__Barchart__UnorderedGroup_3__9 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__10 )? ;
    public final void rule__Barchart__UnorderedGroup_3__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12344:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__10 )? )
            // InternalIDSLParser.g:12345:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__10 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12346:2: ( rule__Barchart__UnorderedGroup_3__10 )?
            int alt99=2;
            alt99 = dfa99.predict(input);
            switch (alt99) {
                case 1 :
                    // InternalIDSLParser.g:12346:2: rule__Barchart__UnorderedGroup_3__10
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__10();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__9"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__10"
    // InternalIDSLParser.g:12352:1: rule__Barchart__UnorderedGroup_3__10 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__11 )? ;
    public final void rule__Barchart__UnorderedGroup_3__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12356:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__11 )? )
            // InternalIDSLParser.g:12357:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__11 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12358:2: ( rule__Barchart__UnorderedGroup_3__11 )?
            int alt100=2;
            alt100 = dfa100.predict(input);
            switch (alt100) {
                case 1 :
                    // InternalIDSLParser.g:12358:2: rule__Barchart__UnorderedGroup_3__11
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__11();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__10"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__11"
    // InternalIDSLParser.g:12364:1: rule__Barchart__UnorderedGroup_3__11 : rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__12 )? ;
    public final void rule__Barchart__UnorderedGroup_3__11() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12368:1: ( rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__12 )? )
            // InternalIDSLParser.g:12369:2: rule__Barchart__UnorderedGroup_3__Impl ( rule__Barchart__UnorderedGroup_3__12 )?
            {
            pushFollow(FOLLOW_51);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12370:2: ( rule__Barchart__UnorderedGroup_3__12 )?
            int alt101=2;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // InternalIDSLParser.g:12370:2: rule__Barchart__UnorderedGroup_3__12
                    {
                    pushFollow(FOLLOW_2);
                    rule__Barchart__UnorderedGroup_3__12();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__11"


    // $ANTLR start "rule__Barchart__UnorderedGroup_3__12"
    // InternalIDSLParser.g:12376:1: rule__Barchart__UnorderedGroup_3__12 : rule__Barchart__UnorderedGroup_3__Impl ;
    public final void rule__Barchart__UnorderedGroup_3__12() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12380:1: ( rule__Barchart__UnorderedGroup_3__Impl )
            // InternalIDSLParser.g:12381:2: rule__Barchart__UnorderedGroup_3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Barchart__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__UnorderedGroup_3__12"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3"
    // InternalIDSLParser.g:12388:1: rule__Picturegraph__UnorderedGroup_3 : rule__Picturegraph__UnorderedGroup_3__0 {...}?;
    public final void rule__Picturegraph__UnorderedGroup_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3());
        	
        try {
            // InternalIDSLParser.g:12393:1: ( rule__Picturegraph__UnorderedGroup_3__0 {...}?)
            // InternalIDSLParser.g:12394:2: rule__Picturegraph__UnorderedGroup_3__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__UnorderedGroup_3__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3", "getUnorderedGroupHelper().canLeave(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__Impl"
    // InternalIDSLParser.g:12402:1: rule__Picturegraph__UnorderedGroup_3__Impl : ( ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) ) ) ;
    public final void rule__Picturegraph__UnorderedGroup_3__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:12407:1: ( ( ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) ) ) )
            // InternalIDSLParser.g:12408:3: ( ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:12408:3: ( ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) ) )
            int alt102=11;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // InternalIDSLParser.g:12409:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12409:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) )
                    // InternalIDSLParser.g:12410:4: {...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0)");
                    }
                    // InternalIDSLParser.g:12410:108: ( ( ( rule__Picturegraph__Group_3_0__0 ) ) )
                    // InternalIDSLParser.g:12411:5: ( ( rule__Picturegraph__Group_3_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0);
                    selected = true;
                    // InternalIDSLParser.g:12417:5: ( ( rule__Picturegraph__Group_3_0__0 ) )
                    // InternalIDSLParser.g:12418:6: ( rule__Picturegraph__Group_3_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_0()); 
                    }
                    // InternalIDSLParser.g:12419:6: ( rule__Picturegraph__Group_3_0__0 )
                    // InternalIDSLParser.g:12419:7: rule__Picturegraph__Group_3_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:12424:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12424:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) )
                    // InternalIDSLParser.g:12425:4: {...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1)");
                    }
                    // InternalIDSLParser.g:12425:108: ( ( ( rule__Picturegraph__Group_3_1__0 ) ) )
                    // InternalIDSLParser.g:12426:5: ( ( rule__Picturegraph__Group_3_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1);
                    selected = true;
                    // InternalIDSLParser.g:12432:5: ( ( rule__Picturegraph__Group_3_1__0 ) )
                    // InternalIDSLParser.g:12433:6: ( rule__Picturegraph__Group_3_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_1()); 
                    }
                    // InternalIDSLParser.g:12434:6: ( rule__Picturegraph__Group_3_1__0 )
                    // InternalIDSLParser.g:12434:7: rule__Picturegraph__Group_3_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:12439:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12439:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) )
                    // InternalIDSLParser.g:12440:4: {...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2)");
                    }
                    // InternalIDSLParser.g:12440:108: ( ( ( rule__Picturegraph__Group_3_2__0 ) ) )
                    // InternalIDSLParser.g:12441:5: ( ( rule__Picturegraph__Group_3_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2);
                    selected = true;
                    // InternalIDSLParser.g:12447:5: ( ( rule__Picturegraph__Group_3_2__0 ) )
                    // InternalIDSLParser.g:12448:6: ( rule__Picturegraph__Group_3_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_2()); 
                    }
                    // InternalIDSLParser.g:12449:6: ( rule__Picturegraph__Group_3_2__0 )
                    // InternalIDSLParser.g:12449:7: rule__Picturegraph__Group_3_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:12454:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12454:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) )
                    // InternalIDSLParser.g:12455:4: {...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3)");
                    }
                    // InternalIDSLParser.g:12455:108: ( ( ( rule__Picturegraph__Group_3_3__0 ) ) )
                    // InternalIDSLParser.g:12456:5: ( ( rule__Picturegraph__Group_3_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3);
                    selected = true;
                    // InternalIDSLParser.g:12462:5: ( ( rule__Picturegraph__Group_3_3__0 ) )
                    // InternalIDSLParser.g:12463:6: ( rule__Picturegraph__Group_3_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_3()); 
                    }
                    // InternalIDSLParser.g:12464:6: ( rule__Picturegraph__Group_3_3__0 )
                    // InternalIDSLParser.g:12464:7: rule__Picturegraph__Group_3_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 5 :
                    // InternalIDSLParser.g:12469:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12469:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) )
                    // InternalIDSLParser.g:12470:4: {...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4)");
                    }
                    // InternalIDSLParser.g:12470:108: ( ( ( rule__Picturegraph__Group_3_4__0 ) ) )
                    // InternalIDSLParser.g:12471:5: ( ( rule__Picturegraph__Group_3_4__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4);
                    selected = true;
                    // InternalIDSLParser.g:12477:5: ( ( rule__Picturegraph__Group_3_4__0 ) )
                    // InternalIDSLParser.g:12478:6: ( rule__Picturegraph__Group_3_4__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_4()); 
                    }
                    // InternalIDSLParser.g:12479:6: ( rule__Picturegraph__Group_3_4__0 )
                    // InternalIDSLParser.g:12479:7: rule__Picturegraph__Group_3_4__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_4__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 6 :
                    // InternalIDSLParser.g:12484:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12484:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) )
                    // InternalIDSLParser.g:12485:4: {...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5)");
                    }
                    // InternalIDSLParser.g:12485:108: ( ( ( rule__Picturegraph__Group_3_5__0 ) ) )
                    // InternalIDSLParser.g:12486:5: ( ( rule__Picturegraph__Group_3_5__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5);
                    selected = true;
                    // InternalIDSLParser.g:12492:5: ( ( rule__Picturegraph__Group_3_5__0 ) )
                    // InternalIDSLParser.g:12493:6: ( rule__Picturegraph__Group_3_5__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_5()); 
                    }
                    // InternalIDSLParser.g:12494:6: ( rule__Picturegraph__Group_3_5__0 )
                    // InternalIDSLParser.g:12494:7: rule__Picturegraph__Group_3_5__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_5__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_5()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 7 :
                    // InternalIDSLParser.g:12499:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12499:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) )
                    // InternalIDSLParser.g:12500:4: {...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6)");
                    }
                    // InternalIDSLParser.g:12500:108: ( ( ( rule__Picturegraph__Group_3_6__0 ) ) )
                    // InternalIDSLParser.g:12501:5: ( ( rule__Picturegraph__Group_3_6__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6);
                    selected = true;
                    // InternalIDSLParser.g:12507:5: ( ( rule__Picturegraph__Group_3_6__0 ) )
                    // InternalIDSLParser.g:12508:6: ( rule__Picturegraph__Group_3_6__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_6()); 
                    }
                    // InternalIDSLParser.g:12509:6: ( rule__Picturegraph__Group_3_6__0 )
                    // InternalIDSLParser.g:12509:7: rule__Picturegraph__Group_3_6__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_6__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_6()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 8 :
                    // InternalIDSLParser.g:12514:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12514:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) )
                    // InternalIDSLParser.g:12515:4: {...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7)");
                    }
                    // InternalIDSLParser.g:12515:108: ( ( ( rule__Picturegraph__Group_3_7__0 ) ) )
                    // InternalIDSLParser.g:12516:5: ( ( rule__Picturegraph__Group_3_7__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7);
                    selected = true;
                    // InternalIDSLParser.g:12522:5: ( ( rule__Picturegraph__Group_3_7__0 ) )
                    // InternalIDSLParser.g:12523:6: ( rule__Picturegraph__Group_3_7__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_7()); 
                    }
                    // InternalIDSLParser.g:12524:6: ( rule__Picturegraph__Group_3_7__0 )
                    // InternalIDSLParser.g:12524:7: rule__Picturegraph__Group_3_7__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_7__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_7()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 9 :
                    // InternalIDSLParser.g:12529:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12529:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) )
                    // InternalIDSLParser.g:12530:4: {...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8)");
                    }
                    // InternalIDSLParser.g:12530:108: ( ( ( rule__Picturegraph__Group_3_8__0 ) ) )
                    // InternalIDSLParser.g:12531:5: ( ( rule__Picturegraph__Group_3_8__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8);
                    selected = true;
                    // InternalIDSLParser.g:12537:5: ( ( rule__Picturegraph__Group_3_8__0 ) )
                    // InternalIDSLParser.g:12538:6: ( rule__Picturegraph__Group_3_8__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_8()); 
                    }
                    // InternalIDSLParser.g:12539:6: ( rule__Picturegraph__Group_3_8__0 )
                    // InternalIDSLParser.g:12539:7: rule__Picturegraph__Group_3_8__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_8__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_8()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 10 :
                    // InternalIDSLParser.g:12544:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12544:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) )
                    // InternalIDSLParser.g:12545:4: {...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9)");
                    }
                    // InternalIDSLParser.g:12545:108: ( ( ( rule__Picturegraph__Group_3_9__0 ) ) )
                    // InternalIDSLParser.g:12546:5: ( ( rule__Picturegraph__Group_3_9__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9);
                    selected = true;
                    // InternalIDSLParser.g:12552:5: ( ( rule__Picturegraph__Group_3_9__0 ) )
                    // InternalIDSLParser.g:12553:6: ( rule__Picturegraph__Group_3_9__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_9()); 
                    }
                    // InternalIDSLParser.g:12554:6: ( rule__Picturegraph__Group_3_9__0 )
                    // InternalIDSLParser.g:12554:7: rule__Picturegraph__Group_3_9__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_9__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_9()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 11 :
                    // InternalIDSLParser.g:12559:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12559:3: ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) )
                    // InternalIDSLParser.g:12560:4: {...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Picturegraph__UnorderedGroup_3__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10)");
                    }
                    // InternalIDSLParser.g:12560:109: ( ( ( rule__Picturegraph__Group_3_10__0 ) ) )
                    // InternalIDSLParser.g:12561:5: ( ( rule__Picturegraph__Group_3_10__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10);
                    selected = true;
                    // InternalIDSLParser.g:12567:5: ( ( rule__Picturegraph__Group_3_10__0 ) )
                    // InternalIDSLParser.g:12568:6: ( rule__Picturegraph__Group_3_10__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getPicturegraphAccess().getGroup_3_10()); 
                    }
                    // InternalIDSLParser.g:12569:6: ( rule__Picturegraph__Group_3_10__0 )
                    // InternalIDSLParser.g:12569:7: rule__Picturegraph__Group_3_10__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__Group_3_10__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getPicturegraphAccess().getGroup_3_10()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__Impl"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__0"
    // InternalIDSLParser.g:12582:1: rule__Picturegraph__UnorderedGroup_3__0 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__1 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12586:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__1 )? )
            // InternalIDSLParser.g:12587:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__1 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12588:2: ( rule__Picturegraph__UnorderedGroup_3__1 )?
            int alt103=2;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    // InternalIDSLParser.g:12588:2: rule__Picturegraph__UnorderedGroup_3__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__0"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__1"
    // InternalIDSLParser.g:12594:1: rule__Picturegraph__UnorderedGroup_3__1 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__2 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12598:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__2 )? )
            // InternalIDSLParser.g:12599:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__2 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12600:2: ( rule__Picturegraph__UnorderedGroup_3__2 )?
            int alt104=2;
            alt104 = dfa104.predict(input);
            switch (alt104) {
                case 1 :
                    // InternalIDSLParser.g:12600:2: rule__Picturegraph__UnorderedGroup_3__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__1"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__2"
    // InternalIDSLParser.g:12606:1: rule__Picturegraph__UnorderedGroup_3__2 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__3 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12610:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__3 )? )
            // InternalIDSLParser.g:12611:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__3 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12612:2: ( rule__Picturegraph__UnorderedGroup_3__3 )?
            int alt105=2;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    // InternalIDSLParser.g:12612:2: rule__Picturegraph__UnorderedGroup_3__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__2"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__3"
    // InternalIDSLParser.g:12618:1: rule__Picturegraph__UnorderedGroup_3__3 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__4 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12622:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__4 )? )
            // InternalIDSLParser.g:12623:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__4 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12624:2: ( rule__Picturegraph__UnorderedGroup_3__4 )?
            int alt106=2;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // InternalIDSLParser.g:12624:2: rule__Picturegraph__UnorderedGroup_3__4
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__4();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__3"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__4"
    // InternalIDSLParser.g:12630:1: rule__Picturegraph__UnorderedGroup_3__4 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__5 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12634:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__5 )? )
            // InternalIDSLParser.g:12635:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__5 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12636:2: ( rule__Picturegraph__UnorderedGroup_3__5 )?
            int alt107=2;
            alt107 = dfa107.predict(input);
            switch (alt107) {
                case 1 :
                    // InternalIDSLParser.g:12636:2: rule__Picturegraph__UnorderedGroup_3__5
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__5();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__4"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__5"
    // InternalIDSLParser.g:12642:1: rule__Picturegraph__UnorderedGroup_3__5 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__6 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12646:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__6 )? )
            // InternalIDSLParser.g:12647:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__6 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12648:2: ( rule__Picturegraph__UnorderedGroup_3__6 )?
            int alt108=2;
            alt108 = dfa108.predict(input);
            switch (alt108) {
                case 1 :
                    // InternalIDSLParser.g:12648:2: rule__Picturegraph__UnorderedGroup_3__6
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__6();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__5"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__6"
    // InternalIDSLParser.g:12654:1: rule__Picturegraph__UnorderedGroup_3__6 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__7 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12658:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__7 )? )
            // InternalIDSLParser.g:12659:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__7 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12660:2: ( rule__Picturegraph__UnorderedGroup_3__7 )?
            int alt109=2;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // InternalIDSLParser.g:12660:2: rule__Picturegraph__UnorderedGroup_3__7
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__7();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__6"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__7"
    // InternalIDSLParser.g:12666:1: rule__Picturegraph__UnorderedGroup_3__7 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__8 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12670:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__8 )? )
            // InternalIDSLParser.g:12671:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__8 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12672:2: ( rule__Picturegraph__UnorderedGroup_3__8 )?
            int alt110=2;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // InternalIDSLParser.g:12672:2: rule__Picturegraph__UnorderedGroup_3__8
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__8();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__7"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__8"
    // InternalIDSLParser.g:12678:1: rule__Picturegraph__UnorderedGroup_3__8 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__9 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12682:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__9 )? )
            // InternalIDSLParser.g:12683:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__9 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12684:2: ( rule__Picturegraph__UnorderedGroup_3__9 )?
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    // InternalIDSLParser.g:12684:2: rule__Picturegraph__UnorderedGroup_3__9
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__9();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__8"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__9"
    // InternalIDSLParser.g:12690:1: rule__Picturegraph__UnorderedGroup_3__9 : rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__10 )? ;
    public final void rule__Picturegraph__UnorderedGroup_3__9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12694:1: ( rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__10 )? )
            // InternalIDSLParser.g:12695:2: rule__Picturegraph__UnorderedGroup_3__Impl ( rule__Picturegraph__UnorderedGroup_3__10 )?
            {
            pushFollow(FOLLOW_52);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12696:2: ( rule__Picturegraph__UnorderedGroup_3__10 )?
            int alt112=2;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // InternalIDSLParser.g:12696:2: rule__Picturegraph__UnorderedGroup_3__10
                    {
                    pushFollow(FOLLOW_2);
                    rule__Picturegraph__UnorderedGroup_3__10();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__9"


    // $ANTLR start "rule__Picturegraph__UnorderedGroup_3__10"
    // InternalIDSLParser.g:12702:1: rule__Picturegraph__UnorderedGroup_3__10 : rule__Picturegraph__UnorderedGroup_3__Impl ;
    public final void rule__Picturegraph__UnorderedGroup_3__10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12706:1: ( rule__Picturegraph__UnorderedGroup_3__Impl )
            // InternalIDSLParser.g:12707:2: rule__Picturegraph__UnorderedGroup_3__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Picturegraph__UnorderedGroup_3__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__UnorderedGroup_3__10"


    // $ANTLR start "rule__Foot__UnorderedGroup_2_1_0"
    // InternalIDSLParser.g:12714:1: rule__Foot__UnorderedGroup_2_1_0 : rule__Foot__UnorderedGroup_2_1_0__0 {...}?;
    public final void rule__Foot__UnorderedGroup_2_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        		getUnorderedGroupHelper().enter(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0());
        	
        try {
            // InternalIDSLParser.g:12719:1: ( rule__Foot__UnorderedGroup_2_1_0__0 {...}?)
            // InternalIDSLParser.g:12720:2: rule__Foot__UnorderedGroup_2_1_0__0 {...}?
            {
            pushFollow(FOLLOW_2);
            rule__Foot__UnorderedGroup_2_1_0__0();

            state._fsp--;
            if (state.failed) return ;
            if ( ! getUnorderedGroupHelper().canLeave(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0()) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "rule__Foot__UnorderedGroup_2_1_0", "getUnorderedGroupHelper().canLeave(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0())");
            }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	getUnorderedGroupHelper().leave(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__UnorderedGroup_2_1_0"


    // $ANTLR start "rule__Foot__UnorderedGroup_2_1_0__Impl"
    // InternalIDSLParser.g:12728:1: rule__Foot__UnorderedGroup_2_1_0__Impl : ( ({...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) ) ) ) ;
    public final void rule__Foot__UnorderedGroup_2_1_0__Impl() throws RecognitionException {

        		int stackSize = keepStackSize();
        		boolean selected = false;
        	
        try {
            // InternalIDSLParser.g:12733:1: ( ( ({...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) ) ) ) )
            // InternalIDSLParser.g:12734:3: ( ({...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) ) ) )
            {
            // InternalIDSLParser.g:12734:3: ( ({...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) ) ) )
            int alt113=4;
            int LA113_0 = input.LA(1);

            if ( LA113_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0) ) {
                alt113=1;
            }
            else if ( LA113_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1) ) {
                alt113=2;
            }
            else if ( LA113_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2) ) {
                alt113=3;
            }
            else if ( LA113_0 == Text && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3) ) {
                alt113=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // InternalIDSLParser.g:12735:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12735:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) ) )
                    // InternalIDSLParser.g:12736:4: {...}? => ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Foot__UnorderedGroup_2_1_0__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0)");
                    }
                    // InternalIDSLParser.g:12736:104: ( ( ( rule__Foot__Group_2_1_0_0__0 ) ) )
                    // InternalIDSLParser.g:12737:5: ( ( rule__Foot__Group_2_1_0_0__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0);
                    selected = true;
                    // InternalIDSLParser.g:12743:5: ( ( rule__Foot__Group_2_1_0_0__0 ) )
                    // InternalIDSLParser.g:12744:6: ( rule__Foot__Group_2_1_0_0__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_0()); 
                    }
                    // InternalIDSLParser.g:12745:6: ( rule__Foot__Group_2_1_0_0__0 )
                    // InternalIDSLParser.g:12745:7: rule__Foot__Group_2_1_0_0__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_0__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_0()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    // InternalIDSLParser.g:12750:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12750:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) ) )
                    // InternalIDSLParser.g:12751:4: {...}? => ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Foot__UnorderedGroup_2_1_0__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1)");
                    }
                    // InternalIDSLParser.g:12751:104: ( ( ( rule__Foot__Group_2_1_0_1__0 ) ) )
                    // InternalIDSLParser.g:12752:5: ( ( rule__Foot__Group_2_1_0_1__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1);
                    selected = true;
                    // InternalIDSLParser.g:12758:5: ( ( rule__Foot__Group_2_1_0_1__0 ) )
                    // InternalIDSLParser.g:12759:6: ( rule__Foot__Group_2_1_0_1__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_1()); 
                    }
                    // InternalIDSLParser.g:12760:6: ( rule__Foot__Group_2_1_0_1__0 )
                    // InternalIDSLParser.g:12760:7: rule__Foot__Group_2_1_0_1__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_1__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    // InternalIDSLParser.g:12765:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12765:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) ) )
                    // InternalIDSLParser.g:12766:4: {...}? => ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Foot__UnorderedGroup_2_1_0__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2)");
                    }
                    // InternalIDSLParser.g:12766:104: ( ( ( rule__Foot__Group_2_1_0_2__0 ) ) )
                    // InternalIDSLParser.g:12767:5: ( ( rule__Foot__Group_2_1_0_2__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2);
                    selected = true;
                    // InternalIDSLParser.g:12773:5: ( ( rule__Foot__Group_2_1_0_2__0 ) )
                    // InternalIDSLParser.g:12774:6: ( rule__Foot__Group_2_1_0_2__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_2()); 
                    }
                    // InternalIDSLParser.g:12775:6: ( rule__Foot__Group_2_1_0_2__0 )
                    // InternalIDSLParser.g:12775:7: rule__Foot__Group_2_1_0_2__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_2__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    // InternalIDSLParser.g:12780:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) ) )
                    {
                    // InternalIDSLParser.g:12780:3: ({...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) ) )
                    // InternalIDSLParser.g:12781:4: {...}? => ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) )
                    {
                    if ( ! getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3) ) {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        throw new FailedPredicateException(input, "rule__Foot__UnorderedGroup_2_1_0__Impl", "getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3)");
                    }
                    // InternalIDSLParser.g:12781:104: ( ( ( rule__Foot__Group_2_1_0_3__0 ) ) )
                    // InternalIDSLParser.g:12782:5: ( ( rule__Foot__Group_2_1_0_3__0 ) )
                    {
                    getUnorderedGroupHelper().select(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3);
                    selected = true;
                    // InternalIDSLParser.g:12788:5: ( ( rule__Foot__Group_2_1_0_3__0 ) )
                    // InternalIDSLParser.g:12789:6: ( rule__Foot__Group_2_1_0_3__0 )
                    {
                    if ( state.backtracking==0 ) {
                       before(grammarAccess.getFootAccess().getGroup_2_1_0_3()); 
                    }
                    // InternalIDSLParser.g:12790:6: ( rule__Foot__Group_2_1_0_3__0 )
                    // InternalIDSLParser.g:12790:7: rule__Foot__Group_2_1_0_3__0
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__Group_2_1_0_3__0();

                    state._fsp--;
                    if (state.failed) return ;

                    }

                    if ( state.backtracking==0 ) {
                       after(grammarAccess.getFootAccess().getGroup_2_1_0_3()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	if (selected)
            		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0());
            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__UnorderedGroup_2_1_0__Impl"


    // $ANTLR start "rule__Foot__UnorderedGroup_2_1_0__0"
    // InternalIDSLParser.g:12803:1: rule__Foot__UnorderedGroup_2_1_0__0 : rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__1 )? ;
    public final void rule__Foot__UnorderedGroup_2_1_0__0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12807:1: ( rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__1 )? )
            // InternalIDSLParser.g:12808:2: rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__1 )?
            {
            pushFollow(FOLLOW_53);
            rule__Foot__UnorderedGroup_2_1_0__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12809:2: ( rule__Foot__UnorderedGroup_2_1_0__1 )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( LA114_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0) ) {
                alt114=1;
            }
            else if ( LA114_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1) ) {
                alt114=1;
            }
            else if ( LA114_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2) ) {
                alt114=1;
            }
            else if ( LA114_0 == Text && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // InternalIDSLParser.g:12809:2: rule__Foot__UnorderedGroup_2_1_0__1
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__UnorderedGroup_2_1_0__1();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__UnorderedGroup_2_1_0__0"


    // $ANTLR start "rule__Foot__UnorderedGroup_2_1_0__1"
    // InternalIDSLParser.g:12815:1: rule__Foot__UnorderedGroup_2_1_0__1 : rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__2 )? ;
    public final void rule__Foot__UnorderedGroup_2_1_0__1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12819:1: ( rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__2 )? )
            // InternalIDSLParser.g:12820:2: rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__2 )?
            {
            pushFollow(FOLLOW_53);
            rule__Foot__UnorderedGroup_2_1_0__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12821:2: ( rule__Foot__UnorderedGroup_2_1_0__2 )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( LA115_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0) ) {
                alt115=1;
            }
            else if ( LA115_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1) ) {
                alt115=1;
            }
            else if ( LA115_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2) ) {
                alt115=1;
            }
            else if ( LA115_0 == Text && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // InternalIDSLParser.g:12821:2: rule__Foot__UnorderedGroup_2_1_0__2
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__UnorderedGroup_2_1_0__2();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__UnorderedGroup_2_1_0__1"


    // $ANTLR start "rule__Foot__UnorderedGroup_2_1_0__2"
    // InternalIDSLParser.g:12827:1: rule__Foot__UnorderedGroup_2_1_0__2 : rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__3 )? ;
    public final void rule__Foot__UnorderedGroup_2_1_0__2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12831:1: ( rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__3 )? )
            // InternalIDSLParser.g:12832:2: rule__Foot__UnorderedGroup_2_1_0__Impl ( rule__Foot__UnorderedGroup_2_1_0__3 )?
            {
            pushFollow(FOLLOW_53);
            rule__Foot__UnorderedGroup_2_1_0__Impl();

            state._fsp--;
            if (state.failed) return ;
            // InternalIDSLParser.g:12833:2: ( rule__Foot__UnorderedGroup_2_1_0__3 )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( LA116_0 == RULE_BEGIN && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 0) ) {
                alt116=1;
            }
            else if ( LA116_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 1) ) {
                alt116=1;
            }
            else if ( LA116_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 2) ) {
                alt116=1;
            }
            else if ( LA116_0 == Text && getUnorderedGroupHelper().canSelect(grammarAccess.getFootAccess().getUnorderedGroup_2_1_0(), 3) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // InternalIDSLParser.g:12833:2: rule__Foot__UnorderedGroup_2_1_0__3
                    {
                    pushFollow(FOLLOW_2);
                    rule__Foot__UnorderedGroup_2_1_0__3();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__UnorderedGroup_2_1_0__2"


    // $ANTLR start "rule__Foot__UnorderedGroup_2_1_0__3"
    // InternalIDSLParser.g:12839:1: rule__Foot__UnorderedGroup_2_1_0__3 : rule__Foot__UnorderedGroup_2_1_0__Impl ;
    public final void rule__Foot__UnorderedGroup_2_1_0__3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12843:1: ( rule__Foot__UnorderedGroup_2_1_0__Impl )
            // InternalIDSLParser.g:12844:2: rule__Foot__UnorderedGroup_2_1_0__Impl
            {
            pushFollow(FOLLOW_2);
            rule__Foot__UnorderedGroup_2_1_0__Impl();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__UnorderedGroup_2_1_0__3"


    // $ANTLR start "rule__InfographicElementType__TypeAssignment_0_2"
    // InternalIDSLParser.g:12851:1: rule__InfographicElementType__TypeAssignment_0_2 : ( ( Basic ) ) ;
    public final void rule__InfographicElementType__TypeAssignment_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12855:1: ( ( ( Basic ) ) )
            // InternalIDSLParser.g:12856:2: ( ( Basic ) )
            {
            // InternalIDSLParser.g:12856:2: ( ( Basic ) )
            // InternalIDSLParser.g:12857:3: ( Basic )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getTypeBasicKeyword_0_2_0()); 
            }
            // InternalIDSLParser.g:12858:3: ( Basic )
            // InternalIDSLParser.g:12859:4: Basic
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getTypeBasicKeyword_0_2_0()); 
            }
            match(input,Basic,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getTypeBasicKeyword_0_2_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getTypeBasicKeyword_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__TypeAssignment_0_2"


    // $ANTLR start "rule__InfographicElementType__BgcolorAssignment_1_0_2"
    // InternalIDSLParser.g:12870:1: rule__InfographicElementType__BgcolorAssignment_1_0_2 : ( ruleColor ) ;
    public final void rule__InfographicElementType__BgcolorAssignment_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12874:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:12875:2: ( ruleColor )
            {
            // InternalIDSLParser.g:12875:2: ( ruleColor )
            // InternalIDSLParser.g:12876:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgcolorColorParserRuleCall_1_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgcolorColorParserRuleCall_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__BgcolorAssignment_1_0_2"


    // $ANTLR start "rule__InfographicElementType__BgpatternAssignment_1_1_2"
    // InternalIDSLParser.g:12885:1: rule__InfographicElementType__BgpatternAssignment_1_1_2 : ( rulePattern ) ;
    public final void rule__InfographicElementType__BgpatternAssignment_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12889:1: ( ( rulePattern ) )
            // InternalIDSLParser.g:12890:2: ( rulePattern )
            {
            // InternalIDSLParser.g:12890:2: ( rulePattern )
            // InternalIDSLParser.g:12891:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgpatternPatternParserRuleCall_1_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgpatternPatternParserRuleCall_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__BgpatternAssignment_1_1_2"


    // $ANTLR start "rule__InfographicElementType__BgimageAssignment_1_2_2"
    // InternalIDSLParser.g:12900:1: rule__InfographicElementType__BgimageAssignment_1_2_2 : ( ruleImageSrc ) ;
    public final void rule__InfographicElementType__BgimageAssignment_1_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12904:1: ( ( ruleImageSrc ) )
            // InternalIDSLParser.g:12905:2: ( ruleImageSrc )
            {
            // InternalIDSLParser.g:12905:2: ( ruleImageSrc )
            // InternalIDSLParser.g:12906:3: ruleImageSrc
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgimageImageSrcParserRuleCall_1_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleImageSrc();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgimageImageSrcParserRuleCall_1_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__BgimageAssignment_1_2_2"


    // $ANTLR start "rule__InfographicElementType__BgsizeAssignment_2_2"
    // InternalIDSLParser.g:12915:1: rule__InfographicElementType__BgsizeAssignment_2_2 : ( RULE_SIZE_POS ) ;
    public final void rule__InfographicElementType__BgsizeAssignment_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12919:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:12920:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:12920:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:12921:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBgsizeSIZE_POSTerminalRuleCall_2_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBgsizeSIZE_POSTerminalRuleCall_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__BgsizeAssignment_2_2"


    // $ANTLR start "rule__InfographicElementType__HeadAssignment_3"
    // InternalIDSLParser.g:12930:1: rule__InfographicElementType__HeadAssignment_3 : ( ruleHead ) ;
    public final void rule__InfographicElementType__HeadAssignment_3() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12934:1: ( ( ruleHead ) )
            // InternalIDSLParser.g:12935:2: ( ruleHead )
            {
            // InternalIDSLParser.g:12935:2: ( ruleHead )
            // InternalIDSLParser.g:12936:3: ruleHead
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getHeadHeadParserRuleCall_3_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleHead();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getHeadHeadParserRuleCall_3_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__HeadAssignment_3"


    // $ANTLR start "rule__InfographicElementType__BoxesAssignment_4"
    // InternalIDSLParser.g:12945:1: rule__InfographicElementType__BoxesAssignment_4 : ( ruleBox ) ;
    public final void rule__InfographicElementType__BoxesAssignment_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12949:1: ( ( ruleBox ) )
            // InternalIDSLParser.g:12950:2: ( ruleBox )
            {
            // InternalIDSLParser.g:12950:2: ( ruleBox )
            // InternalIDSLParser.g:12951:3: ruleBox
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBoxesBoxParserRuleCall_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleBox();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBoxesBoxParserRuleCall_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__BoxesAssignment_4"


    // $ANTLR start "rule__InfographicElementType__TextsAssignment_5"
    // InternalIDSLParser.g:12960:1: rule__InfographicElementType__TextsAssignment_5 : ( ruleText ) ;
    public final void rule__InfographicElementType__TextsAssignment_5() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12964:1: ( ( ruleText ) )
            // InternalIDSLParser.g:12965:2: ( ruleText )
            {
            // InternalIDSLParser.g:12965:2: ( ruleText )
            // InternalIDSLParser.g:12966:3: ruleText
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getTextsTextParserRuleCall_5_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleText();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getTextsTextParserRuleCall_5_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__TextsAssignment_5"


    // $ANTLR start "rule__InfographicElementType__ImagesAssignment_6"
    // InternalIDSLParser.g:12975:1: rule__InfographicElementType__ImagesAssignment_6 : ( ruleImage ) ;
    public final void rule__InfographicElementType__ImagesAssignment_6() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12979:1: ( ( ruleImage ) )
            // InternalIDSLParser.g:12980:2: ( ruleImage )
            {
            // InternalIDSLParser.g:12980:2: ( ruleImage )
            // InternalIDSLParser.g:12981:3: ruleImage
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getImagesImageParserRuleCall_6_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleImage();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getImagesImageParserRuleCall_6_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__ImagesAssignment_6"


    // $ANTLR start "rule__InfographicElementType__PiechartsAssignment_7"
    // InternalIDSLParser.g:12990:1: rule__InfographicElementType__PiechartsAssignment_7 : ( rulePiechart ) ;
    public final void rule__InfographicElementType__PiechartsAssignment_7() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:12994:1: ( ( rulePiechart ) )
            // InternalIDSLParser.g:12995:2: ( rulePiechart )
            {
            // InternalIDSLParser.g:12995:2: ( rulePiechart )
            // InternalIDSLParser.g:12996:3: rulePiechart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getPiechartsPiechartParserRuleCall_7_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePiechart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getPiechartsPiechartParserRuleCall_7_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__PiechartsAssignment_7"


    // $ANTLR start "rule__InfographicElementType__BarchartsAssignment_8"
    // InternalIDSLParser.g:13005:1: rule__InfographicElementType__BarchartsAssignment_8 : ( ruleBarchart ) ;
    public final void rule__InfographicElementType__BarchartsAssignment_8() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13009:1: ( ( ruleBarchart ) )
            // InternalIDSLParser.g:13010:2: ( ruleBarchart )
            {
            // InternalIDSLParser.g:13010:2: ( ruleBarchart )
            // InternalIDSLParser.g:13011:3: ruleBarchart
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getBarchartsBarchartParserRuleCall_8_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleBarchart();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getBarchartsBarchartParserRuleCall_8_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__BarchartsAssignment_8"


    // $ANTLR start "rule__InfographicElementType__PicturegraphsAssignment_9"
    // InternalIDSLParser.g:13020:1: rule__InfographicElementType__PicturegraphsAssignment_9 : ( rulePicturegraph ) ;
    public final void rule__InfographicElementType__PicturegraphsAssignment_9() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13024:1: ( ( rulePicturegraph ) )
            // InternalIDSLParser.g:13025:2: ( rulePicturegraph )
            {
            // InternalIDSLParser.g:13025:2: ( rulePicturegraph )
            // InternalIDSLParser.g:13026:3: rulePicturegraph
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getPicturegraphsPicturegraphParserRuleCall_9_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePicturegraph();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getPicturegraphsPicturegraphParserRuleCall_9_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__PicturegraphsAssignment_9"


    // $ANTLR start "rule__InfographicElementType__FootAssignment_10"
    // InternalIDSLParser.g:13035:1: rule__InfographicElementType__FootAssignment_10 : ( ruleFoot ) ;
    public final void rule__InfographicElementType__FootAssignment_10() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13039:1: ( ( ruleFoot ) )
            // InternalIDSLParser.g:13040:2: ( ruleFoot )
            {
            // InternalIDSLParser.g:13040:2: ( ruleFoot )
            // InternalIDSLParser.g:13041:3: ruleFoot
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getInfographicElementTypeAccess().getFootFootParserRuleCall_10_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFoot();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getInfographicElementTypeAccess().getFootFootParserRuleCall_10_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__InfographicElementType__FootAssignment_10"


    // $ANTLR start "rule__Head__NameAssignment_0"
    // InternalIDSLParser.g:13050:1: rule__Head__NameAssignment_0 : ( ( Head ) ) ;
    public final void rule__Head__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13054:1: ( ( ( Head ) ) )
            // InternalIDSLParser.g:13055:2: ( ( Head ) )
            {
            // InternalIDSLParser.g:13055:2: ( ( Head ) )
            // InternalIDSLParser.g:13056:3: ( Head )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getNameHeadKeyword_0_0()); 
            }
            // InternalIDSLParser.g:13057:3: ( Head )
            // InternalIDSLParser.g:13058:4: Head
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getNameHeadKeyword_0_0()); 
            }
            match(input,Head,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getNameHeadKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getNameHeadKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__NameAssignment_0"


    // $ANTLR start "rule__Head__BgcolorAssignment_2_1_0_1_0_0_2"
    // InternalIDSLParser.g:13069:1: rule__Head__BgcolorAssignment_2_1_0_1_0_0_2 : ( ruleColor ) ;
    public final void rule__Head__BgcolorAssignment_2_1_0_1_0_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13073:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13074:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13074:2: ( ruleColor )
            // InternalIDSLParser.g:13075:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgcolorColorParserRuleCall_2_1_0_1_0_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgcolorColorParserRuleCall_2_1_0_1_0_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__BgcolorAssignment_2_1_0_1_0_0_2"


    // $ANTLR start "rule__Head__BgpatternAssignment_2_1_0_1_0_1_2"
    // InternalIDSLParser.g:13084:1: rule__Head__BgpatternAssignment_2_1_0_1_0_1_2 : ( rulePattern ) ;
    public final void rule__Head__BgpatternAssignment_2_1_0_1_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13088:1: ( ( rulePattern ) )
            // InternalIDSLParser.g:13089:2: ( rulePattern )
            {
            // InternalIDSLParser.g:13089:2: ( rulePattern )
            // InternalIDSLParser.g:13090:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgpatternPatternParserRuleCall_2_1_0_1_0_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgpatternPatternParserRuleCall_2_1_0_1_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__BgpatternAssignment_2_1_0_1_0_1_2"


    // $ANTLR start "rule__Head__BgimageAssignment_2_1_0_1_0_2_2"
    // InternalIDSLParser.g:13099:1: rule__Head__BgimageAssignment_2_1_0_1_0_2_2 : ( ruleImageSrc ) ;
    public final void rule__Head__BgimageAssignment_2_1_0_1_0_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13103:1: ( ( ruleImageSrc ) )
            // InternalIDSLParser.g:13104:2: ( ruleImageSrc )
            {
            // InternalIDSLParser.g:13104:2: ( ruleImageSrc )
            // InternalIDSLParser.g:13105:3: ruleImageSrc
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getBgimageImageSrcParserRuleCall_2_1_0_1_0_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleImageSrc();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getBgimageImageSrcParserRuleCall_2_1_0_1_0_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__BgimageAssignment_2_1_0_1_0_2_2"


    // $ANTLR start "rule__Head__SizeAssignment_2_1_0_1_1_2"
    // InternalIDSLParser.g:13114:1: rule__Head__SizeAssignment_2_1_0_1_1_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Head__SizeAssignment_2_1_0_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13118:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13119:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13119:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13120:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getSizeSIZE_POSTerminalRuleCall_2_1_0_1_1_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getSizeSIZE_POSTerminalRuleCall_2_1_0_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__SizeAssignment_2_1_0_1_1_2"


    // $ANTLR start "rule__Head__PositionAssignment_2_1_0_1_2_2"
    // InternalIDSLParser.g:13129:1: rule__Head__PositionAssignment_2_1_0_1_2_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Head__PositionAssignment_2_1_0_1_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13133:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13134:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13134:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13135:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getPositionSIZE_POSTerminalRuleCall_2_1_0_1_2_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getPositionSIZE_POSTerminalRuleCall_2_1_0_1_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__PositionAssignment_2_1_0_1_2_2"


    // $ANTLR start "rule__Head__LogoAssignment_2_1_0_1_3_2"
    // InternalIDSLParser.g:13144:1: rule__Head__LogoAssignment_2_1_0_1_3_2 : ( ruleLogo ) ;
    public final void rule__Head__LogoAssignment_2_1_0_1_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13148:1: ( ( ruleLogo ) )
            // InternalIDSLParser.g:13149:2: ( ruleLogo )
            {
            // InternalIDSLParser.g:13149:2: ( ruleLogo )
            // InternalIDSLParser.g:13150:3: ruleLogo
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getLogoLogoParserRuleCall_2_1_0_1_3_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLogo();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getLogoLogoParserRuleCall_2_1_0_1_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__LogoAssignment_2_1_0_1_3_2"


    // $ANTLR start "rule__Head__TitleAssignment_2_1_0_1_4_2"
    // InternalIDSLParser.g:13159:1: rule__Head__TitleAssignment_2_1_0_1_4_2 : ( ruleTitle ) ;
    public final void rule__Head__TitleAssignment_2_1_0_1_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13163:1: ( ( ruleTitle ) )
            // InternalIDSLParser.g:13164:2: ( ruleTitle )
            {
            // InternalIDSLParser.g:13164:2: ( ruleTitle )
            // InternalIDSLParser.g:13165:3: ruleTitle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getTitleTitleParserRuleCall_2_1_0_1_4_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTitle();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getTitleTitleParserRuleCall_2_1_0_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__TitleAssignment_2_1_0_1_4_2"


    // $ANTLR start "rule__Head__SubtitleAssignment_2_1_0_1_5_2"
    // InternalIDSLParser.g:13174:1: rule__Head__SubtitleAssignment_2_1_0_1_5_2 : ( ruleTitle ) ;
    public final void rule__Head__SubtitleAssignment_2_1_0_1_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13178:1: ( ( ruleTitle ) )
            // InternalIDSLParser.g:13179:2: ( ruleTitle )
            {
            // InternalIDSLParser.g:13179:2: ( ruleTitle )
            // InternalIDSLParser.g:13180:3: ruleTitle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getHeadAccess().getSubtitleTitleParserRuleCall_2_1_0_1_5_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleTitle();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getHeadAccess().getSubtitleTitleParserRuleCall_2_1_0_1_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Head__SubtitleAssignment_2_1_0_1_5_2"


    // $ANTLR start "rule__Title__AlignAssignment_1_0_2_0_2"
    // InternalIDSLParser.g:13189:1: rule__Title__AlignAssignment_1_0_2_0_2 : ( ruleAlignPossibilities ) ;
    public final void rule__Title__AlignAssignment_1_0_2_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13193:1: ( ( ruleAlignPossibilities ) )
            // InternalIDSLParser.g:13194:2: ( ruleAlignPossibilities )
            {
            // InternalIDSLParser.g:13194:2: ( ruleAlignPossibilities )
            // InternalIDSLParser.g:13195:3: ruleAlignPossibilities
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getAlignAlignPossibilitiesEnumRuleCall_1_0_2_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAlignPossibilities();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getAlignAlignPossibilitiesEnumRuleCall_1_0_2_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__AlignAssignment_1_0_2_0_2"


    // $ANTLR start "rule__Title__ColorAssignment_1_0_2_1_2"
    // InternalIDSLParser.g:13204:1: rule__Title__ColorAssignment_1_0_2_1_2 : ( ruleColor ) ;
    public final void rule__Title__ColorAssignment_1_0_2_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13208:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13209:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13209:2: ( ruleColor )
            // InternalIDSLParser.g:13210:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getColorColorParserRuleCall_1_0_2_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getColorColorParserRuleCall_1_0_2_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__ColorAssignment_1_0_2_1_2"


    // $ANTLR start "rule__Title__FontAssignment_1_0_2_2_2"
    // InternalIDSLParser.g:13219:1: rule__Title__FontAssignment_1_0_2_2_2 : ( ruleFONT ) ;
    public final void rule__Title__FontAssignment_1_0_2_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13223:1: ( ( ruleFONT ) )
            // InternalIDSLParser.g:13224:2: ( ruleFONT )
            {
            // InternalIDSLParser.g:13224:2: ( ruleFONT )
            // InternalIDSLParser.g:13225:3: ruleFONT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getFontFONTParserRuleCall_1_0_2_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFONT();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getFontFONTParserRuleCall_1_0_2_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__FontAssignment_1_0_2_2_2"


    // $ANTLR start "rule__Title__PositionAssignment_1_0_2_3_2"
    // InternalIDSLParser.g:13234:1: rule__Title__PositionAssignment_1_0_2_3_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Title__PositionAssignment_1_0_2_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13238:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13239:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13239:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13240:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getPositionSIZE_POSTerminalRuleCall_1_0_2_3_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getPositionSIZE_POSTerminalRuleCall_1_0_2_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__PositionAssignment_1_0_2_3_2"


    // $ANTLR start "rule__Title__MaxwidthAssignment_1_0_2_4_2"
    // InternalIDSLParser.g:13249:1: rule__Title__MaxwidthAssignment_1_0_2_4_2 : ( RULE_INT ) ;
    public final void rule__Title__MaxwidthAssignment_1_0_2_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13253:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13254:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13254:2: ( RULE_INT )
            // InternalIDSLParser.g:13255:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getMaxwidthINTTerminalRuleCall_1_0_2_4_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getMaxwidthINTTerminalRuleCall_1_0_2_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__MaxwidthAssignment_1_0_2_4_2"


    // $ANTLR start "rule__Title__ValueAssignment_1_0_2_5_2"
    // InternalIDSLParser.g:13264:1: rule__Title__ValueAssignment_1_0_2_5_2 : ( RULE_STRING ) ;
    public final void rule__Title__ValueAssignment_1_0_2_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13268:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:13269:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:13269:2: ( RULE_STRING )
            // InternalIDSLParser.g:13270:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTitleAccess().getValueSTRINGTerminalRuleCall_1_0_2_5_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTitleAccess().getValueSTRINGTerminalRuleCall_1_0_2_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Title__ValueAssignment_1_0_2_5_2"


    // $ANTLR start "rule__Logo__SizeAssignment_1_0_2"
    // InternalIDSLParser.g:13279:1: rule__Logo__SizeAssignment_1_0_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Logo__SizeAssignment_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13283:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13284:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13284:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13285:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getSizeSIZE_POSTerminalRuleCall_1_0_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getSizeSIZE_POSTerminalRuleCall_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__SizeAssignment_1_0_2"


    // $ANTLR start "rule__Logo__PositionAssignment_1_1_2"
    // InternalIDSLParser.g:13294:1: rule__Logo__PositionAssignment_1_1_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Logo__PositionAssignment_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13298:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13299:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13299:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13300:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getLogoAccess().getPositionSIZE_POSTerminalRuleCall_1_1_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getLogoAccess().getPositionSIZE_POSTerminalRuleCall_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Logo__PositionAssignment_1_1_2"


    // $ANTLR start "rule__Box__NameAssignment_0"
    // InternalIDSLParser.g:13309:1: rule__Box__NameAssignment_0 : ( RULE_BOXID ) ;
    public final void rule__Box__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13313:1: ( ( RULE_BOXID ) )
            // InternalIDSLParser.g:13314:2: ( RULE_BOXID )
            {
            // InternalIDSLParser.g:13314:2: ( RULE_BOXID )
            // InternalIDSLParser.g:13315:3: RULE_BOXID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getNameBOXIDTerminalRuleCall_0_0()); 
            }
            match(input,RULE_BOXID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getNameBOXIDTerminalRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__NameAssignment_0"


    // $ANTLR start "rule__Box__BgcolorAssignment_3_0_0_2"
    // InternalIDSLParser.g:13324:1: rule__Box__BgcolorAssignment_3_0_0_2 : ( ruleColor ) ;
    public final void rule__Box__BgcolorAssignment_3_0_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13328:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13329:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13329:2: ( ruleColor )
            // InternalIDSLParser.g:13330:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgcolorColorParserRuleCall_3_0_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgcolorColorParserRuleCall_3_0_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__BgcolorAssignment_3_0_0_2"


    // $ANTLR start "rule__Box__BgpatternAssignment_3_0_1_2"
    // InternalIDSLParser.g:13339:1: rule__Box__BgpatternAssignment_3_0_1_2 : ( rulePattern ) ;
    public final void rule__Box__BgpatternAssignment_3_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13343:1: ( ( rulePattern ) )
            // InternalIDSLParser.g:13344:2: ( rulePattern )
            {
            // InternalIDSLParser.g:13344:2: ( rulePattern )
            // InternalIDSLParser.g:13345:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgpatternPatternParserRuleCall_3_0_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgpatternPatternParserRuleCall_3_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__BgpatternAssignment_3_0_1_2"


    // $ANTLR start "rule__Box__BgimageAssignment_3_0_2_2"
    // InternalIDSLParser.g:13354:1: rule__Box__BgimageAssignment_3_0_2_2 : ( ruleImageSrc ) ;
    public final void rule__Box__BgimageAssignment_3_0_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13358:1: ( ( ruleImageSrc ) )
            // InternalIDSLParser.g:13359:2: ( ruleImageSrc )
            {
            // InternalIDSLParser.g:13359:2: ( ruleImageSrc )
            // InternalIDSLParser.g:13360:3: ruleImageSrc
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getBgimageImageSrcParserRuleCall_3_0_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleImageSrc();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getBgimageImageSrcParserRuleCall_3_0_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__BgimageAssignment_3_0_2_2"


    // $ANTLR start "rule__Box__SizeAssignment_3_1_2"
    // InternalIDSLParser.g:13369:1: rule__Box__SizeAssignment_3_1_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Box__SizeAssignment_3_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13373:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13374:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13374:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13375:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getSizeSIZE_POSTerminalRuleCall_3_1_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getSizeSIZE_POSTerminalRuleCall_3_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__SizeAssignment_3_1_2"


    // $ANTLR start "rule__Box__PositionAssignment_3_2_2"
    // InternalIDSLParser.g:13384:1: rule__Box__PositionAssignment_3_2_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Box__PositionAssignment_3_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13388:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13389:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13389:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13390:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBoxAccess().getPositionSIZE_POSTerminalRuleCall_3_2_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBoxAccess().getPositionSIZE_POSTerminalRuleCall_3_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Box__PositionAssignment_3_2_2"


    // $ANTLR start "rule__Text__NameAssignment_0_0"
    // InternalIDSLParser.g:13399:1: rule__Text__NameAssignment_0_0 : ( RULE_TEXTID ) ;
    public final void rule__Text__NameAssignment_0_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13403:1: ( ( RULE_TEXTID ) )
            // InternalIDSLParser.g:13404:2: ( RULE_TEXTID )
            {
            // InternalIDSLParser.g:13404:2: ( RULE_TEXTID )
            // InternalIDSLParser.g:13405:3: RULE_TEXTID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getNameTEXTIDTerminalRuleCall_0_0_0()); 
            }
            match(input,RULE_TEXTID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getNameTEXTIDTerminalRuleCall_0_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__NameAssignment_0_0"


    // $ANTLR start "rule__Text__AlignAssignment_0_2_1_0_2"
    // InternalIDSLParser.g:13414:1: rule__Text__AlignAssignment_0_2_1_0_2 : ( ruleAlignPossibilities ) ;
    public final void rule__Text__AlignAssignment_0_2_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13418:1: ( ( ruleAlignPossibilities ) )
            // InternalIDSLParser.g:13419:2: ( ruleAlignPossibilities )
            {
            // InternalIDSLParser.g:13419:2: ( ruleAlignPossibilities )
            // InternalIDSLParser.g:13420:3: ruleAlignPossibilities
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlignAlignPossibilitiesEnumRuleCall_0_2_1_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAlignPossibilities();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlignAlignPossibilitiesEnumRuleCall_0_2_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__AlignAssignment_0_2_1_0_2"


    // $ANTLR start "rule__Text__ColorAssignment_0_2_1_1_2"
    // InternalIDSLParser.g:13429:1: rule__Text__ColorAssignment_0_2_1_1_2 : ( ruleColor ) ;
    public final void rule__Text__ColorAssignment_0_2_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13433:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13434:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13434:2: ( ruleColor )
            // InternalIDSLParser.g:13435:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColorColorParserRuleCall_0_2_1_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColorColorParserRuleCall_0_2_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__ColorAssignment_0_2_1_1_2"


    // $ANTLR start "rule__Text__FontAssignment_0_2_1_2_2"
    // InternalIDSLParser.g:13444:1: rule__Text__FontAssignment_0_2_1_2_2 : ( ruleFONT ) ;
    public final void rule__Text__FontAssignment_0_2_1_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13448:1: ( ( ruleFONT ) )
            // InternalIDSLParser.g:13449:2: ( ruleFONT )
            {
            // InternalIDSLParser.g:13449:2: ( ruleFONT )
            // InternalIDSLParser.g:13450:3: ruleFONT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getFontFONTParserRuleCall_0_2_1_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFONT();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getFontFONTParserRuleCall_0_2_1_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__FontAssignment_0_2_1_2_2"


    // $ANTLR start "rule__Text__LineheightAssignment_0_2_1_3_2"
    // InternalIDSLParser.g:13459:1: rule__Text__LineheightAssignment_0_2_1_3_2 : ( RULE_INT ) ;
    public final void rule__Text__LineheightAssignment_0_2_1_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13463:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13464:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13464:2: ( RULE_INT )
            // InternalIDSLParser.g:13465:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getLineheightINTTerminalRuleCall_0_2_1_3_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getLineheightINTTerminalRuleCall_0_2_1_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__LineheightAssignment_0_2_1_3_2"


    // $ANTLR start "rule__Text__PositionAssignment_0_2_1_4_2"
    // InternalIDSLParser.g:13474:1: rule__Text__PositionAssignment_0_2_1_4_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Text__PositionAssignment_0_2_1_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13478:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13479:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13479:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13480:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getPositionSIZE_POSTerminalRuleCall_0_2_1_4_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getPositionSIZE_POSTerminalRuleCall_0_2_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__PositionAssignment_0_2_1_4_2"


    // $ANTLR start "rule__Text__MaxwidthAssignment_0_2_1_5_2"
    // InternalIDSLParser.g:13489:1: rule__Text__MaxwidthAssignment_0_2_1_5_2 : ( RULE_INT ) ;
    public final void rule__Text__MaxwidthAssignment_0_2_1_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13493:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13494:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13494:2: ( RULE_INT )
            // InternalIDSLParser.g:13495:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getMaxwidthINTTerminalRuleCall_0_2_1_5_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getMaxwidthINTTerminalRuleCall_0_2_1_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__MaxwidthAssignment_0_2_1_5_2"


    // $ANTLR start "rule__Text__ValueAssignment_0_2_1_6_2"
    // InternalIDSLParser.g:13504:1: rule__Text__ValueAssignment_0_2_1_6_2 : ( RULE_STRING ) ;
    public final void rule__Text__ValueAssignment_0_2_1_6_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13508:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:13509:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:13509:2: ( RULE_STRING )
            // InternalIDSLParser.g:13510:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getValueSTRINGTerminalRuleCall_0_2_1_6_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getValueSTRINGTerminalRuleCall_0_2_1_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__ValueAssignment_0_2_1_6_2"


    // $ANTLR start "rule__Text__NameAssignment_1_0"
    // InternalIDSLParser.g:13519:1: rule__Text__NameAssignment_1_0 : ( RULE_TITLETEXTID ) ;
    public final void rule__Text__NameAssignment_1_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13523:1: ( ( RULE_TITLETEXTID ) )
            // InternalIDSLParser.g:13524:2: ( RULE_TITLETEXTID )
            {
            // InternalIDSLParser.g:13524:2: ( RULE_TITLETEXTID )
            // InternalIDSLParser.g:13525:3: RULE_TITLETEXTID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getNameTITLETEXTIDTerminalRuleCall_1_0_0()); 
            }
            match(input,RULE_TITLETEXTID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getNameTITLETEXTIDTerminalRuleCall_1_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__NameAssignment_1_0"


    // $ANTLR start "rule__Text__AlignAssignment_1_2_1_0_2"
    // InternalIDSLParser.g:13534:1: rule__Text__AlignAssignment_1_2_1_0_2 : ( ruleAlignPossibilities ) ;
    public final void rule__Text__AlignAssignment_1_2_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13538:1: ( ( ruleAlignPossibilities ) )
            // InternalIDSLParser.g:13539:2: ( ruleAlignPossibilities )
            {
            // InternalIDSLParser.g:13539:2: ( ruleAlignPossibilities )
            // InternalIDSLParser.g:13540:3: ruleAlignPossibilities
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getAlignAlignPossibilitiesEnumRuleCall_1_2_1_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleAlignPossibilities();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getAlignAlignPossibilitiesEnumRuleCall_1_2_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__AlignAssignment_1_2_1_0_2"


    // $ANTLR start "rule__Text__ColorAssignment_1_2_1_1_2"
    // InternalIDSLParser.g:13549:1: rule__Text__ColorAssignment_1_2_1_1_2 : ( ruleColor ) ;
    public final void rule__Text__ColorAssignment_1_2_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13553:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13554:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13554:2: ( ruleColor )
            // InternalIDSLParser.g:13555:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getColorColorParserRuleCall_1_2_1_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getColorColorParserRuleCall_1_2_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__ColorAssignment_1_2_1_1_2"


    // $ANTLR start "rule__Text__FontAssignment_1_2_1_2_2"
    // InternalIDSLParser.g:13564:1: rule__Text__FontAssignment_1_2_1_2_2 : ( ruleFONT ) ;
    public final void rule__Text__FontAssignment_1_2_1_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13568:1: ( ( ruleFONT ) )
            // InternalIDSLParser.g:13569:2: ( ruleFONT )
            {
            // InternalIDSLParser.g:13569:2: ( ruleFONT )
            // InternalIDSLParser.g:13570:3: ruleFONT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getFontFONTParserRuleCall_1_2_1_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFONT();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getFontFONTParserRuleCall_1_2_1_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__FontAssignment_1_2_1_2_2"


    // $ANTLR start "rule__Text__PositionAssignment_1_2_1_3_2"
    // InternalIDSLParser.g:13579:1: rule__Text__PositionAssignment_1_2_1_3_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Text__PositionAssignment_1_2_1_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13583:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13584:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13584:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13585:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getPositionSIZE_POSTerminalRuleCall_1_2_1_3_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getPositionSIZE_POSTerminalRuleCall_1_2_1_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__PositionAssignment_1_2_1_3_2"


    // $ANTLR start "rule__Text__MaxwidthAssignment_1_2_1_4_2"
    // InternalIDSLParser.g:13594:1: rule__Text__MaxwidthAssignment_1_2_1_4_2 : ( RULE_INT ) ;
    public final void rule__Text__MaxwidthAssignment_1_2_1_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13598:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13599:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13599:2: ( RULE_INT )
            // InternalIDSLParser.g:13600:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getMaxwidthINTTerminalRuleCall_1_2_1_4_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getMaxwidthINTTerminalRuleCall_1_2_1_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__MaxwidthAssignment_1_2_1_4_2"


    // $ANTLR start "rule__Text__ValueAssignment_1_2_1_5_2"
    // InternalIDSLParser.g:13609:1: rule__Text__ValueAssignment_1_2_1_5_2 : ( RULE_STRING ) ;
    public final void rule__Text__ValueAssignment_1_2_1_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13613:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:13614:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:13614:2: ( RULE_STRING )
            // InternalIDSLParser.g:13615:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getTextAccess().getValueSTRINGTerminalRuleCall_1_2_1_5_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getTextAccess().getValueSTRINGTerminalRuleCall_1_2_1_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Text__ValueAssignment_1_2_1_5_2"


    // $ANTLR start "rule__Image__NameAssignment_0"
    // InternalIDSLParser.g:13624:1: rule__Image__NameAssignment_0 : ( RULE_IMAGEID ) ;
    public final void rule__Image__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13628:1: ( ( RULE_IMAGEID ) )
            // InternalIDSLParser.g:13629:2: ( RULE_IMAGEID )
            {
            // InternalIDSLParser.g:13629:2: ( RULE_IMAGEID )
            // InternalIDSLParser.g:13630:3: RULE_IMAGEID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getNameIMAGEIDTerminalRuleCall_0_0()); 
            }
            match(input,RULE_IMAGEID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getNameIMAGEIDTerminalRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__NameAssignment_0"


    // $ANTLR start "rule__Image__PositionAssignment_3_0_2"
    // InternalIDSLParser.g:13639:1: rule__Image__PositionAssignment_3_0_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Image__PositionAssignment_3_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13643:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13644:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13644:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13645:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getPositionSIZE_POSTerminalRuleCall_3_0_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getPositionSIZE_POSTerminalRuleCall_3_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__PositionAssignment_3_0_2"


    // $ANTLR start "rule__Image__SizeAssignment_3_1_2"
    // InternalIDSLParser.g:13654:1: rule__Image__SizeAssignment_3_1_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Image__SizeAssignment_3_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13658:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13659:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13659:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13660:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getSizeSIZE_POSTerminalRuleCall_3_1_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getSizeSIZE_POSTerminalRuleCall_3_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__SizeAssignment_3_1_2"


    // $ANTLR start "rule__Image__SrcAssignment_3_2_2"
    // InternalIDSLParser.g:13669:1: rule__Image__SrcAssignment_3_2_2 : ( ruleImageSrc ) ;
    public final void rule__Image__SrcAssignment_3_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13673:1: ( ( ruleImageSrc ) )
            // InternalIDSLParser.g:13674:2: ( ruleImageSrc )
            {
            // InternalIDSLParser.g:13674:2: ( ruleImageSrc )
            // InternalIDSLParser.g:13675:3: ruleImageSrc
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getImageAccess().getSrcImageSrcParserRuleCall_3_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleImageSrc();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getImageAccess().getSrcImageSrcParserRuleCall_3_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Image__SrcAssignment_3_2_2"


    // $ANTLR start "rule__Piechart__NameAssignment_0"
    // InternalIDSLParser.g:13684:1: rule__Piechart__NameAssignment_0 : ( RULE_PIECHARTID ) ;
    public final void rule__Piechart__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13688:1: ( ( RULE_PIECHARTID ) )
            // InternalIDSLParser.g:13689:2: ( RULE_PIECHARTID )
            {
            // InternalIDSLParser.g:13689:2: ( RULE_PIECHARTID )
            // InternalIDSLParser.g:13690:3: RULE_PIECHARTID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getNamePIECHARTIDTerminalRuleCall_0_0()); 
            }
            match(input,RULE_PIECHARTID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getNamePIECHARTIDTerminalRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__NameAssignment_0"


    // $ANTLR start "rule__Piechart__ColorAssignment_3_0_2"
    // InternalIDSLParser.g:13699:1: rule__Piechart__ColorAssignment_3_0_2 : ( ruleColor ) ;
    public final void rule__Piechart__ColorAssignment_3_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13703:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13704:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13704:2: ( ruleColor )
            // InternalIDSLParser.g:13705:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColorColorParserRuleCall_3_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColorColorParserRuleCall_3_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__ColorAssignment_3_0_2"


    // $ANTLR start "rule__Piechart__ColorsAssignment_3_1_2"
    // InternalIDSLParser.g:13714:1: rule__Piechart__ColorsAssignment_3_1_2 : ( RULE_COLOR_CHARTS ) ;
    public final void rule__Piechart__ColorsAssignment_3_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13718:1: ( ( RULE_COLOR_CHARTS ) )
            // InternalIDSLParser.g:13719:2: ( RULE_COLOR_CHARTS )
            {
            // InternalIDSLParser.g:13719:2: ( RULE_COLOR_CHARTS )
            // InternalIDSLParser.g:13720:3: RULE_COLOR_CHARTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getColorsCOLOR_CHARTSTerminalRuleCall_3_1_2_0()); 
            }
            match(input,RULE_COLOR_CHARTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getColorsCOLOR_CHARTSTerminalRuleCall_3_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__ColorsAssignment_3_1_2"


    // $ANTLR start "rule__Piechart__PiedataAssignment_3_2_4"
    // InternalIDSLParser.g:13729:1: rule__Piechart__PiedataAssignment_3_2_4 : ( ruleChartData ) ;
    public final void rule__Piechart__PiedataAssignment_3_2_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13733:1: ( ( ruleChartData ) )
            // InternalIDSLParser.g:13734:2: ( ruleChartData )
            {
            // InternalIDSLParser.g:13734:2: ( ruleChartData )
            // InternalIDSLParser.g:13735:3: ruleChartData
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPiedataChartDataParserRuleCall_3_2_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPiedataChartDataParserRuleCall_3_2_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__PiedataAssignment_3_2_4"


    // $ANTLR start "rule__Piechart__LegendstyleAssignment_3_3_2"
    // InternalIDSLParser.g:13744:1: rule__Piechart__LegendstyleAssignment_3_3_2 : ( ruleLegendStyle ) ;
    public final void rule__Piechart__LegendstyleAssignment_3_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13748:1: ( ( ruleLegendStyle ) )
            // InternalIDSLParser.g:13749:2: ( ruleLegendStyle )
            {
            // InternalIDSLParser.g:13749:2: ( ruleLegendStyle )
            // InternalIDSLParser.g:13750:3: ruleLegendStyle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getLegendstyleLegendStyleEnumRuleCall_3_3_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLegendStyle();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getLegendstyleLegendStyleEnumRuleCall_3_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__LegendstyleAssignment_3_3_2"


    // $ANTLR start "rule__Piechart__PaddingAssignment_3_4_2"
    // InternalIDSLParser.g:13759:1: rule__Piechart__PaddingAssignment_3_4_2 : ( RULE_INT ) ;
    public final void rule__Piechart__PaddingAssignment_3_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13763:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13764:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13764:2: ( RULE_INT )
            // InternalIDSLParser.g:13765:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPaddingINTTerminalRuleCall_3_4_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPaddingINTTerminalRuleCall_3_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__PaddingAssignment_3_4_2"


    // $ANTLR start "rule__Piechart__PositionAssignment_3_5_2"
    // InternalIDSLParser.g:13774:1: rule__Piechart__PositionAssignment_3_5_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Piechart__PositionAssignment_3_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13778:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13779:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13779:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13780:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getPositionSIZE_POSTerminalRuleCall_3_5_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getPositionSIZE_POSTerminalRuleCall_3_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__PositionAssignment_3_5_2"


    // $ANTLR start "rule__Piechart__ShowlegendAssignment_3_6_2"
    // InternalIDSLParser.g:13789:1: rule__Piechart__ShowlegendAssignment_3_6_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Piechart__ShowlegendAssignment_3_6_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13793:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:13794:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:13794:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:13795:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowlegendShowOptionsOffEnumRuleCall_3_6_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowlegendShowOptionsOffEnumRuleCall_3_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__ShowlegendAssignment_3_6_2"


    // $ANTLR start "rule__Piechart__ShowtitleAssignment_3_7_2"
    // InternalIDSLParser.g:13804:1: rule__Piechart__ShowtitleAssignment_3_7_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Piechart__ShowtitleAssignment_3_7_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13808:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:13809:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:13809:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:13810:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowtitleShowOptionsOffEnumRuleCall_3_7_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowtitleShowOptionsOffEnumRuleCall_3_7_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__ShowtitleAssignment_3_7_2"


    // $ANTLR start "rule__Piechart__ShowpercentageAssignment_3_8_2"
    // InternalIDSLParser.g:13819:1: rule__Piechart__ShowpercentageAssignment_3_8_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Piechart__ShowpercentageAssignment_3_8_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13823:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:13824:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:13824:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:13825:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getShowpercentageShowOptionsOffEnumRuleCall_3_8_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getShowpercentageShowOptionsOffEnumRuleCall_3_8_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__ShowpercentageAssignment_3_8_2"


    // $ANTLR start "rule__Piechart__SizeAssignment_3_9_2"
    // InternalIDSLParser.g:13834:1: rule__Piechart__SizeAssignment_3_9_2 : ( RULE_INT ) ;
    public final void rule__Piechart__SizeAssignment_3_9_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13838:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13839:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13839:2: ( RULE_INT )
            // InternalIDSLParser.g:13840:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getSizeINTTerminalRuleCall_3_9_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getSizeINTTerminalRuleCall_3_9_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__SizeAssignment_3_9_2"


    // $ANTLR start "rule__Piechart__TitleAssignment_3_10_2"
    // InternalIDSLParser.g:13849:1: rule__Piechart__TitleAssignment_3_10_2 : ( RULE_STRING ) ;
    public final void rule__Piechart__TitleAssignment_3_10_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13853:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:13854:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:13854:2: ( RULE_STRING )
            // InternalIDSLParser.g:13855:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getTitleSTRINGTerminalRuleCall_3_10_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getTitleSTRINGTerminalRuleCall_3_10_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__TitleAssignment_3_10_2"


    // $ANTLR start "rule__Piechart__TypeAssignment_3_11_2"
    // InternalIDSLParser.g:13864:1: rule__Piechart__TypeAssignment_3_11_2 : ( rulePieType ) ;
    public final void rule__Piechart__TypeAssignment_3_11_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13868:1: ( ( rulePieType ) )
            // InternalIDSLParser.g:13869:2: ( rulePieType )
            {
            // InternalIDSLParser.g:13869:2: ( rulePieType )
            // InternalIDSLParser.g:13870:3: rulePieType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPiechartAccess().getTypePieTypeEnumRuleCall_3_11_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePieType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPiechartAccess().getTypePieTypeEnumRuleCall_3_11_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Piechart__TypeAssignment_3_11_2"


    // $ANTLR start "rule__Barchart__NameAssignment_0"
    // InternalIDSLParser.g:13879:1: rule__Barchart__NameAssignment_0 : ( RULE_BARCHARTID ) ;
    public final void rule__Barchart__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13883:1: ( ( RULE_BARCHARTID ) )
            // InternalIDSLParser.g:13884:2: ( RULE_BARCHARTID )
            {
            // InternalIDSLParser.g:13884:2: ( RULE_BARCHARTID )
            // InternalIDSLParser.g:13885:3: RULE_BARCHARTID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getNameBARCHARTIDTerminalRuleCall_0_0()); 
            }
            match(input,RULE_BARCHARTID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getNameBARCHARTIDTerminalRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__NameAssignment_0"


    // $ANTLR start "rule__Barchart__ColorAssignment_3_0_2"
    // InternalIDSLParser.g:13894:1: rule__Barchart__ColorAssignment_3_0_2 : ( ruleColor ) ;
    public final void rule__Barchart__ColorAssignment_3_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13898:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:13899:2: ( ruleColor )
            {
            // InternalIDSLParser.g:13899:2: ( ruleColor )
            // InternalIDSLParser.g:13900:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColorColorParserRuleCall_3_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColorColorParserRuleCall_3_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__ColorAssignment_3_0_2"


    // $ANTLR start "rule__Barchart__ColorsAssignment_3_1_2"
    // InternalIDSLParser.g:13909:1: rule__Barchart__ColorsAssignment_3_1_2 : ( RULE_COLOR_CHARTS ) ;
    public final void rule__Barchart__ColorsAssignment_3_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13913:1: ( ( RULE_COLOR_CHARTS ) )
            // InternalIDSLParser.g:13914:2: ( RULE_COLOR_CHARTS )
            {
            // InternalIDSLParser.g:13914:2: ( RULE_COLOR_CHARTS )
            // InternalIDSLParser.g:13915:3: RULE_COLOR_CHARTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getColorsCOLOR_CHARTSTerminalRuleCall_3_1_2_0()); 
            }
            match(input,RULE_COLOR_CHARTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getColorsCOLOR_CHARTSTerminalRuleCall_3_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__ColorsAssignment_3_1_2"


    // $ANTLR start "rule__Barchart__BardataAssignment_3_2_4"
    // InternalIDSLParser.g:13924:1: rule__Barchart__BardataAssignment_3_2_4 : ( ruleChartData ) ;
    public final void rule__Barchart__BardataAssignment_3_2_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13928:1: ( ( ruleChartData ) )
            // InternalIDSLParser.g:13929:2: ( ruleChartData )
            {
            // InternalIDSLParser.g:13929:2: ( ruleChartData )
            // InternalIDSLParser.g:13930:3: ruleChartData
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getBardataChartDataParserRuleCall_3_2_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getBardataChartDataParserRuleCall_3_2_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__BardataAssignment_3_2_4"


    // $ANTLR start "rule__Barchart__GridscaleAssignment_3_3_2"
    // InternalIDSLParser.g:13939:1: rule__Barchart__GridscaleAssignment_3_3_2 : ( RULE_INT ) ;
    public final void rule__Barchart__GridscaleAssignment_3_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13943:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13944:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13944:2: ( RULE_INT )
            // InternalIDSLParser.g:13945:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getGridscaleINTTerminalRuleCall_3_3_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getGridscaleINTTerminalRuleCall_3_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__GridscaleAssignment_3_3_2"


    // $ANTLR start "rule__Barchart__LegendstyleAssignment_3_4_2"
    // InternalIDSLParser.g:13954:1: rule__Barchart__LegendstyleAssignment_3_4_2 : ( ruleLegendStyle ) ;
    public final void rule__Barchart__LegendstyleAssignment_3_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13958:1: ( ( ruleLegendStyle ) )
            // InternalIDSLParser.g:13959:2: ( ruleLegendStyle )
            {
            // InternalIDSLParser.g:13959:2: ( ruleLegendStyle )
            // InternalIDSLParser.g:13960:3: ruleLegendStyle
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getLegendstyleLegendStyleEnumRuleCall_3_4_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleLegendStyle();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getLegendstyleLegendStyleEnumRuleCall_3_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__LegendstyleAssignment_3_4_2"


    // $ANTLR start "rule__Barchart__PaddingAssignment_3_5_2"
    // InternalIDSLParser.g:13969:1: rule__Barchart__PaddingAssignment_3_5_2 : ( RULE_INT ) ;
    public final void rule__Barchart__PaddingAssignment_3_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13973:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:13974:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:13974:2: ( RULE_INT )
            // InternalIDSLParser.g:13975:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getPaddingINTTerminalRuleCall_3_5_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getPaddingINTTerminalRuleCall_3_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__PaddingAssignment_3_5_2"


    // $ANTLR start "rule__Barchart__PositionAssignment_3_6_2"
    // InternalIDSLParser.g:13984:1: rule__Barchart__PositionAssignment_3_6_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Barchart__PositionAssignment_3_6_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:13988:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:13989:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:13989:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:13990:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getPositionSIZE_POSTerminalRuleCall_3_6_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getPositionSIZE_POSTerminalRuleCall_3_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__PositionAssignment_3_6_2"


    // $ANTLR start "rule__Barchart__ShowgridAssignment_3_7_2"
    // InternalIDSLParser.g:13999:1: rule__Barchart__ShowgridAssignment_3_7_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Barchart__ShowgridAssignment_3_7_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14003:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:14004:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:14004:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:14005:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowgridShowOptionsOffEnumRuleCall_3_7_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowgridShowOptionsOffEnumRuleCall_3_7_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__ShowgridAssignment_3_7_2"


    // $ANTLR start "rule__Barchart__ShowlegendAssignment_3_8_2"
    // InternalIDSLParser.g:14014:1: rule__Barchart__ShowlegendAssignment_3_8_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Barchart__ShowlegendAssignment_3_8_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14018:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:14019:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:14019:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:14020:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowlegendShowOptionsOffEnumRuleCall_3_8_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowlegendShowOptionsOffEnumRuleCall_3_8_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__ShowlegendAssignment_3_8_2"


    // $ANTLR start "rule__Barchart__ShowtitleAssignment_3_9_2"
    // InternalIDSLParser.g:14029:1: rule__Barchart__ShowtitleAssignment_3_9_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Barchart__ShowtitleAssignment_3_9_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14033:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:14034:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:14034:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:14035:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getShowtitleShowOptionsOffEnumRuleCall_3_9_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getShowtitleShowOptionsOffEnumRuleCall_3_9_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__ShowtitleAssignment_3_9_2"


    // $ANTLR start "rule__Barchart__SizeAssignment_3_10_2"
    // InternalIDSLParser.g:14044:1: rule__Barchart__SizeAssignment_3_10_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Barchart__SizeAssignment_3_10_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14048:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:14049:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:14049:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:14050:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getSizeSIZE_POSTerminalRuleCall_3_10_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getSizeSIZE_POSTerminalRuleCall_3_10_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__SizeAssignment_3_10_2"


    // $ANTLR start "rule__Barchart__TitleAssignment_3_11_2"
    // InternalIDSLParser.g:14059:1: rule__Barchart__TitleAssignment_3_11_2 : ( RULE_STRING ) ;
    public final void rule__Barchart__TitleAssignment_3_11_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14063:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:14064:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:14064:2: ( RULE_STRING )
            // InternalIDSLParser.g:14065:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getTitleSTRINGTerminalRuleCall_3_11_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getTitleSTRINGTerminalRuleCall_3_11_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__TitleAssignment_3_11_2"


    // $ANTLR start "rule__Barchart__TypeAssignment_3_12_2"
    // InternalIDSLParser.g:14074:1: rule__Barchart__TypeAssignment_3_12_2 : ( ruleBarType ) ;
    public final void rule__Barchart__TypeAssignment_3_12_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14078:1: ( ( ruleBarType ) )
            // InternalIDSLParser.g:14079:2: ( ruleBarType )
            {
            // InternalIDSLParser.g:14079:2: ( ruleBarType )
            // InternalIDSLParser.g:14080:3: ruleBarType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getBarchartAccess().getTypeBarTypeEnumRuleCall_3_12_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleBarType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getBarchartAccess().getTypeBarTypeEnumRuleCall_3_12_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Barchart__TypeAssignment_3_12_2"


    // $ANTLR start "rule__Picturegraph__NameAssignment_0"
    // InternalIDSLParser.g:14089:1: rule__Picturegraph__NameAssignment_0 : ( RULE_PICTUREGRAPHID ) ;
    public final void rule__Picturegraph__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14093:1: ( ( RULE_PICTUREGRAPHID ) )
            // InternalIDSLParser.g:14094:2: ( RULE_PICTUREGRAPHID )
            {
            // InternalIDSLParser.g:14094:2: ( RULE_PICTUREGRAPHID )
            // InternalIDSLParser.g:14095:3: RULE_PICTUREGRAPHID
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getNamePICTUREGRAPHIDTerminalRuleCall_0_0()); 
            }
            match(input,RULE_PICTUREGRAPHID,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getNamePICTUREGRAPHIDTerminalRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__NameAssignment_0"


    // $ANTLR start "rule__Picturegraph__ColorAssignment_3_0_2"
    // InternalIDSLParser.g:14104:1: rule__Picturegraph__ColorAssignment_3_0_2 : ( ruleColor ) ;
    public final void rule__Picturegraph__ColorAssignment_3_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14108:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:14109:2: ( ruleColor )
            {
            // InternalIDSLParser.g:14109:2: ( ruleColor )
            // InternalIDSLParser.g:14110:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColorColorParserRuleCall_3_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColorColorParserRuleCall_3_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__ColorAssignment_3_0_2"


    // $ANTLR start "rule__Picturegraph__ColorsAssignment_3_1_2"
    // InternalIDSLParser.g:14119:1: rule__Picturegraph__ColorsAssignment_3_1_2 : ( RULE_COLOR_CHARTS ) ;
    public final void rule__Picturegraph__ColorsAssignment_3_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14123:1: ( ( RULE_COLOR_CHARTS ) )
            // InternalIDSLParser.g:14124:2: ( RULE_COLOR_CHARTS )
            {
            // InternalIDSLParser.g:14124:2: ( RULE_COLOR_CHARTS )
            // InternalIDSLParser.g:14125:3: RULE_COLOR_CHARTS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getColorsCOLOR_CHARTSTerminalRuleCall_3_1_2_0()); 
            }
            match(input,RULE_COLOR_CHARTS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getColorsCOLOR_CHARTSTerminalRuleCall_3_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__ColorsAssignment_3_1_2"


    // $ANTLR start "rule__Picturegraph__PicturegraphdataAssignment_3_2_4"
    // InternalIDSLParser.g:14134:1: rule__Picturegraph__PicturegraphdataAssignment_3_2_4 : ( ruleChartData ) ;
    public final void rule__Picturegraph__PicturegraphdataAssignment_3_2_4() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14138:1: ( ( ruleChartData ) )
            // InternalIDSLParser.g:14139:2: ( ruleChartData )
            {
            // InternalIDSLParser.g:14139:2: ( ruleChartData )
            // InternalIDSLParser.g:14140:3: ruleChartData
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPicturegraphdataChartDataParserRuleCall_3_2_4_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleChartData();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPicturegraphdataChartDataParserRuleCall_3_2_4_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__PicturegraphdataAssignment_3_2_4"


    // $ANTLR start "rule__Picturegraph__LabelAssignment_3_3_2"
    // InternalIDSLParser.g:14149:1: rule__Picturegraph__LabelAssignment_3_3_2 : ( RULE_STRING ) ;
    public final void rule__Picturegraph__LabelAssignment_3_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14153:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:14154:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:14154:2: ( RULE_STRING )
            // InternalIDSLParser.g:14155:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getLabelSTRINGTerminalRuleCall_3_3_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getLabelSTRINGTerminalRuleCall_3_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__LabelAssignment_3_3_2"


    // $ANTLR start "rule__Picturegraph__PaddingAssignment_3_4_2"
    // InternalIDSLParser.g:14164:1: rule__Picturegraph__PaddingAssignment_3_4_2 : ( RULE_INT ) ;
    public final void rule__Picturegraph__PaddingAssignment_3_4_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14168:1: ( ( RULE_INT ) )
            // InternalIDSLParser.g:14169:2: ( RULE_INT )
            {
            // InternalIDSLParser.g:14169:2: ( RULE_INT )
            // InternalIDSLParser.g:14170:3: RULE_INT
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPaddingINTTerminalRuleCall_3_4_2_0()); 
            }
            match(input,RULE_INT,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPaddingINTTerminalRuleCall_3_4_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__PaddingAssignment_3_4_2"


    // $ANTLR start "rule__Picturegraph__PositionAssignment_3_5_2"
    // InternalIDSLParser.g:14179:1: rule__Picturegraph__PositionAssignment_3_5_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Picturegraph__PositionAssignment_3_5_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14183:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:14184:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:14184:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:14185:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getPositionSIZE_POSTerminalRuleCall_3_5_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getPositionSIZE_POSTerminalRuleCall_3_5_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__PositionAssignment_3_5_2"


    // $ANTLR start "rule__Picturegraph__ShowlegendAssignment_3_6_2"
    // InternalIDSLParser.g:14194:1: rule__Picturegraph__ShowlegendAssignment_3_6_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Picturegraph__ShowlegendAssignment_3_6_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14198:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:14199:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:14199:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:14200:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getShowlegendShowOptionsOffEnumRuleCall_3_6_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getShowlegendShowOptionsOffEnumRuleCall_3_6_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__ShowlegendAssignment_3_6_2"


    // $ANTLR start "rule__Picturegraph__ShowtitleAssignment_3_7_2"
    // InternalIDSLParser.g:14209:1: rule__Picturegraph__ShowtitleAssignment_3_7_2 : ( ruleShowOptionsOff ) ;
    public final void rule__Picturegraph__ShowtitleAssignment_3_7_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14213:1: ( ( ruleShowOptionsOff ) )
            // InternalIDSLParser.g:14214:2: ( ruleShowOptionsOff )
            {
            // InternalIDSLParser.g:14214:2: ( ruleShowOptionsOff )
            // InternalIDSLParser.g:14215:3: ruleShowOptionsOff
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getShowtitleShowOptionsOffEnumRuleCall_3_7_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleShowOptionsOff();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getShowtitleShowOptionsOffEnumRuleCall_3_7_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__ShowtitleAssignment_3_7_2"


    // $ANTLR start "rule__Picturegraph__SizeAssignment_3_8_2"
    // InternalIDSLParser.g:14224:1: rule__Picturegraph__SizeAssignment_3_8_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Picturegraph__SizeAssignment_3_8_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14228:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:14229:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:14229:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:14230:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getSizeSIZE_POSTerminalRuleCall_3_8_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getSizeSIZE_POSTerminalRuleCall_3_8_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__SizeAssignment_3_8_2"


    // $ANTLR start "rule__Picturegraph__TitleAssignment_3_9_2"
    // InternalIDSLParser.g:14239:1: rule__Picturegraph__TitleAssignment_3_9_2 : ( RULE_STRING ) ;
    public final void rule__Picturegraph__TitleAssignment_3_9_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14243:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:14244:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:14244:2: ( RULE_STRING )
            // InternalIDSLParser.g:14245:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getTitleSTRINGTerminalRuleCall_3_9_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getTitleSTRINGTerminalRuleCall_3_9_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__TitleAssignment_3_9_2"


    // $ANTLR start "rule__Picturegraph__TypeAssignment_3_10_2"
    // InternalIDSLParser.g:14254:1: rule__Picturegraph__TypeAssignment_3_10_2 : ( rulePicturegraphType ) ;
    public final void rule__Picturegraph__TypeAssignment_3_10_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14258:1: ( ( rulePicturegraphType ) )
            // InternalIDSLParser.g:14259:2: ( rulePicturegraphType )
            {
            // InternalIDSLParser.g:14259:2: ( rulePicturegraphType )
            // InternalIDSLParser.g:14260:3: rulePicturegraphType
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getPicturegraphAccess().getTypePicturegraphTypeEnumRuleCall_3_10_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePicturegraphType();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getPicturegraphAccess().getTypePicturegraphTypeEnumRuleCall_3_10_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Picturegraph__TypeAssignment_3_10_2"


    // $ANTLR start "rule__Foot__NameAssignment_0"
    // InternalIDSLParser.g:14269:1: rule__Foot__NameAssignment_0 : ( ( Foot ) ) ;
    public final void rule__Foot__NameAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14273:1: ( ( ( Foot ) ) )
            // InternalIDSLParser.g:14274:2: ( ( Foot ) )
            {
            // InternalIDSLParser.g:14274:2: ( ( Foot ) )
            // InternalIDSLParser.g:14275:3: ( Foot )
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getNameFootKeyword_0_0()); 
            }
            // InternalIDSLParser.g:14276:3: ( Foot )
            // InternalIDSLParser.g:14277:4: Foot
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getNameFootKeyword_0_0()); 
            }
            match(input,Foot,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getNameFootKeyword_0_0()); 
            }

            }

            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getNameFootKeyword_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__NameAssignment_0"


    // $ANTLR start "rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2"
    // InternalIDSLParser.g:14288:1: rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2 : ( ruleColor ) ;
    public final void rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14292:1: ( ( ruleColor ) )
            // InternalIDSLParser.g:14293:2: ( ruleColor )
            {
            // InternalIDSLParser.g:14293:2: ( ruleColor )
            // InternalIDSLParser.g:14294:3: ruleColor
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgcolorColorParserRuleCall_2_1_0_0_1_0_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgcolorColorParserRuleCall_2_1_0_0_1_0_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__BgcolorAssignment_2_1_0_0_1_0_2"


    // $ANTLR start "rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2"
    // InternalIDSLParser.g:14303:1: rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2 : ( rulePattern ) ;
    public final void rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14307:1: ( ( rulePattern ) )
            // InternalIDSLParser.g:14308:2: ( rulePattern )
            {
            // InternalIDSLParser.g:14308:2: ( rulePattern )
            // InternalIDSLParser.g:14309:3: rulePattern
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgpatternPatternParserRuleCall_2_1_0_0_1_1_2_0()); 
            }
            pushFollow(FOLLOW_2);
            rulePattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgpatternPatternParserRuleCall_2_1_0_0_1_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__BgpatternAssignment_2_1_0_0_1_1_2"


    // $ANTLR start "rule__Foot__BgimageAssignment_2_1_0_0_1_2_2"
    // InternalIDSLParser.g:14318:1: rule__Foot__BgimageAssignment_2_1_0_0_1_2_2 : ( ruleImageSrc ) ;
    public final void rule__Foot__BgimageAssignment_2_1_0_0_1_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14322:1: ( ( ruleImageSrc ) )
            // InternalIDSLParser.g:14323:2: ( ruleImageSrc )
            {
            // InternalIDSLParser.g:14323:2: ( ruleImageSrc )
            // InternalIDSLParser.g:14324:3: ruleImageSrc
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getBgimageImageSrcParserRuleCall_2_1_0_0_1_2_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleImageSrc();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getBgimageImageSrcParserRuleCall_2_1_0_0_1_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__BgimageAssignment_2_1_0_0_1_2_2"


    // $ANTLR start "rule__Foot__PositionAssignment_2_1_0_1_2"
    // InternalIDSLParser.g:14333:1: rule__Foot__PositionAssignment_2_1_0_1_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Foot__PositionAssignment_2_1_0_1_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14337:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:14338:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:14338:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:14339:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getPositionSIZE_POSTerminalRuleCall_2_1_0_1_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getPositionSIZE_POSTerminalRuleCall_2_1_0_1_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__PositionAssignment_2_1_0_1_2"


    // $ANTLR start "rule__Foot__SizeAssignment_2_1_0_2_2"
    // InternalIDSLParser.g:14348:1: rule__Foot__SizeAssignment_2_1_0_2_2 : ( RULE_SIZE_POS ) ;
    public final void rule__Foot__SizeAssignment_2_1_0_2_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14352:1: ( ( RULE_SIZE_POS ) )
            // InternalIDSLParser.g:14353:2: ( RULE_SIZE_POS )
            {
            // InternalIDSLParser.g:14353:2: ( RULE_SIZE_POS )
            // InternalIDSLParser.g:14354:3: RULE_SIZE_POS
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getSizeSIZE_POSTerminalRuleCall_2_1_0_2_2_0()); 
            }
            match(input,RULE_SIZE_POS,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getSizeSIZE_POSTerminalRuleCall_2_1_0_2_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__SizeAssignment_2_1_0_2_2"


    // $ANTLR start "rule__Foot__TextAssignment_2_1_0_3_2"
    // InternalIDSLParser.g:14363:1: rule__Foot__TextAssignment_2_1_0_3_2 : ( RULE_STRING ) ;
    public final void rule__Foot__TextAssignment_2_1_0_3_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14367:1: ( ( RULE_STRING ) )
            // InternalIDSLParser.g:14368:2: ( RULE_STRING )
            {
            // InternalIDSLParser.g:14368:2: ( RULE_STRING )
            // InternalIDSLParser.g:14369:3: RULE_STRING
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFootAccess().getTextSTRINGTerminalRuleCall_2_1_0_3_2_0()); 
            }
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFootAccess().getTextSTRINGTerminalRuleCall_2_1_0_3_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Foot__TextAssignment_2_1_0_3_2"


    // $ANTLR start "rule__Color__ColorAssignment_0_1"
    // InternalIDSLParser.g:14378:1: rule__Color__ColorAssignment_0_1 : ( ruleColor_Basic ) ;
    public final void rule__Color__ColorAssignment_0_1() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14382:1: ( ( ruleColor_Basic ) )
            // InternalIDSLParser.g:14383:2: ( ruleColor_Basic )
            {
            // InternalIDSLParser.g:14383:2: ( ruleColor_Basic )
            // InternalIDSLParser.g:14384:3: ruleColor_Basic
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getColorAccess().getColorColor_BasicEnumRuleCall_0_1_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleColor_Basic();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getColorAccess().getColorColor_BasicEnumRuleCall_0_1_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__Color__ColorAssignment_0_1"


    // $ANTLR start "rule__FONT__WeightAssignment_0"
    // InternalIDSLParser.g:14393:1: rule__FONT__WeightAssignment_0 : ( ruleFont_Weight ) ;
    public final void rule__FONT__WeightAssignment_0() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14397:1: ( ( ruleFont_Weight ) )
            // InternalIDSLParser.g:14398:2: ( ruleFont_Weight )
            {
            // InternalIDSLParser.g:14398:2: ( ruleFont_Weight )
            // InternalIDSLParser.g:14399:3: ruleFont_Weight
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTAccess().getWeightFont_WeightEnumRuleCall_0_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFont_Weight();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTAccess().getWeightFont_WeightEnumRuleCall_0_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__WeightAssignment_0"


    // $ANTLR start "rule__FONT__FamilyAssignment_2"
    // InternalIDSLParser.g:14408:1: rule__FONT__FamilyAssignment_2 : ( ruleFont_Family ) ;
    public final void rule__FONT__FamilyAssignment_2() throws RecognitionException {

        		int stackSize = keepStackSize();
        	
        try {
            // InternalIDSLParser.g:14412:1: ( ( ruleFont_Family ) )
            // InternalIDSLParser.g:14413:2: ( ruleFont_Family )
            {
            // InternalIDSLParser.g:14413:2: ( ruleFont_Family )
            // InternalIDSLParser.g:14414:3: ruleFont_Family
            {
            if ( state.backtracking==0 ) {
               before(grammarAccess.getFONTAccess().getFamilyFont_FamilyEnumRuleCall_2_0()); 
            }
            pushFollow(FOLLOW_2);
            ruleFont_Family();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               after(grammarAccess.getFONTAccess().getFamilyFont_FamilyEnumRuleCall_2_0()); 
            }

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {

            	restoreStackSize(stackSize);

        }
        return ;
    }
    // $ANTLR end "rule__FONT__FamilyAssignment_2"

    // $ANTLR start synpred1_InternalIDSLParser
    public final void synpred1_InternalIDSLParser_fragment() throws RecognitionException {   
        // InternalIDSLParser.g:10290:8: ( rule__InfographicElementType__BoxesAssignment_4 )
        // InternalIDSLParser.g:10290:9: rule__InfographicElementType__BoxesAssignment_4
        {
        pushFollow(FOLLOW_2);
        rule__InfographicElementType__BoxesAssignment_4();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_InternalIDSLParser

    // $ANTLR start synpred2_InternalIDSLParser
    public final void synpred2_InternalIDSLParser_fragment() throws RecognitionException {   
        // InternalIDSLParser.g:10312:8: ( rule__InfographicElementType__TextsAssignment_5 )
        // InternalIDSLParser.g:10312:9: rule__InfographicElementType__TextsAssignment_5
        {
        pushFollow(FOLLOW_2);
        rule__InfographicElementType__TextsAssignment_5();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_InternalIDSLParser

    // $ANTLR start synpred3_InternalIDSLParser
    public final void synpred3_InternalIDSLParser_fragment() throws RecognitionException {   
        // InternalIDSLParser.g:10334:8: ( rule__InfographicElementType__ImagesAssignment_6 )
        // InternalIDSLParser.g:10334:9: rule__InfographicElementType__ImagesAssignment_6
        {
        pushFollow(FOLLOW_2);
        rule__InfographicElementType__ImagesAssignment_6();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_InternalIDSLParser

    // $ANTLR start synpred4_InternalIDSLParser
    public final void synpred4_InternalIDSLParser_fragment() throws RecognitionException {   
        // InternalIDSLParser.g:10356:8: ( rule__InfographicElementType__PiechartsAssignment_7 )
        // InternalIDSLParser.g:10356:9: rule__InfographicElementType__PiechartsAssignment_7
        {
        pushFollow(FOLLOW_2);
        rule__InfographicElementType__PiechartsAssignment_7();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_InternalIDSLParser

    // $ANTLR start synpred5_InternalIDSLParser
    public final void synpred5_InternalIDSLParser_fragment() throws RecognitionException {   
        // InternalIDSLParser.g:10378:8: ( rule__InfographicElementType__BarchartsAssignment_8 )
        // InternalIDSLParser.g:10378:9: rule__InfographicElementType__BarchartsAssignment_8
        {
        pushFollow(FOLLOW_2);
        rule__InfographicElementType__BarchartsAssignment_8();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_InternalIDSLParser

    // $ANTLR start synpred6_InternalIDSLParser
    public final void synpred6_InternalIDSLParser_fragment() throws RecognitionException {   
        // InternalIDSLParser.g:10400:8: ( rule__InfographicElementType__PicturegraphsAssignment_9 )
        // InternalIDSLParser.g:10400:9: rule__InfographicElementType__PicturegraphsAssignment_9
        {
        pushFollow(FOLLOW_2);
        rule__InfographicElementType__PicturegraphsAssignment_9();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_InternalIDSLParser

    // Delegated rules

    public final boolean synpred2_InternalIDSLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalIDSLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalIDSLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalIDSLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalIDSLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalIDSLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalIDSLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalIDSLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalIDSLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalIDSLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_InternalIDSLParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_InternalIDSLParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA31 dfa31 = new DFA31(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA28 dfa28 = new DFA28(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA33 dfa33 = new DFA33(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA93 dfa93 = new DFA93(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA107 dfa107 = new DFA107(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA112 dfa112 = new DFA112(this);
    static final String dfa_1s = "\14\uffff";
    static final String dfa_2s = "\1\13\13\uffff";
    static final String dfa_3s = "\1\125\13\uffff";
    static final String dfa_4s = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13";
    static final String dfa_5s = "\1\0\13\uffff}>";
    static final String[] dfa_6s = {
            "\1\2\11\uffff\2\2\2\uffff\1\3\36\uffff\1\13\1\4\5\uffff\1\1\17\uffff\1\5\2\6\1\7\1\10\1\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "10213:3: ( ({...}? => ( ( ( rule__InfographicElementType__Group_0__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Alternatives_1 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__Group_2__0 ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__HeadAssignment_3 ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BoxesAssignment_4 ) ) ( ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__TextsAssignment_5 ) ) ( ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__ImagesAssignment_6 ) ) ( ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PiechartsAssignment_7 ) ) ( ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__BarchartsAssignment_8 ) ) ( ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )* ) ) ) ) | ({...}? => ( ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 ) ) ( ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )* ) ) ) ) | ({...}? => ( ( ( rule__InfographicElementType__FootAssignment_10 ) ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA31_0 = input.LA(1);

                         
                        int index31_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA31_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA31_0 == Bgpattern || LA31_0 >= Bgcolor && LA31_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA31_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA31_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA31_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA31_0 >= RULE_TEXTID && LA31_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA31_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA31_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA31_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA31_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA31_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                         
                        input.seek(index31_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 31, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\122\uffff";
    static final String dfa_8s = "\1\1\121\uffff";
    static final String dfa_9s = "\1\13\1\uffff\1\107\1\126\1\13\5\107\1\34\1\115\1\131\2\112\17\13\5\107\1\0\1\34\1\115\1\131\2\112\1\uffff\17\13\5\107\1\34\1\115\1\131\2\112\17\127";
    static final String dfa_10s = "\1\125\1\uffff\1\107\1\126\1\75\5\107\1\113\2\131\2\112\17\127\5\107\1\0\1\113\2\131\2\112\1\uffff\17\127\5\107\1\113\2\131\2\112\17\127";
    static final String dfa_11s = "\1\uffff\1\2\47\uffff\1\1\50\uffff";
    static final String dfa_12s = "\43\uffff\1\0\56\uffff}>";
    static final String[] dfa_13s = {
            "\1\1\11\uffff\2\1\2\uffff\1\1\36\uffff\2\1\5\uffff\1\1\17\uffff\1\2\6\1",
            "",
            "\1\3",
            "\1\4",
            "\1\6\4\uffff\1\11\4\uffff\1\5\1\7\46\uffff\1\10",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\25\1\26\1\22\3\uffff\1\23\3\uffff\1\17\4\uffff\1\24\11\uffff\1\21\6\uffff\1\27\6\uffff\1\20\7\uffff\1\30",
            "\1\32\13\uffff\1\31",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\37\4\uffff\1\42\4\uffff\1\36\1\40\46\uffff\1\41\31\uffff\1\43",
            "\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\uffff",
            "\1\60\1\61\1\55\3\uffff\1\56\3\uffff\1\52\4\uffff\1\57\11\uffff\1\54\6\uffff\1\62\6\uffff\1\53\7\uffff\1\63",
            "\1\65\13\uffff\1\64",
            "\1\66",
            "\1\67",
            "\1\70",
            "",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\72\4\uffff\1\75\4\uffff\1\71\1\73\46\uffff\1\74\31\uffff\1\43",
            "\1\76",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\1\111\1\112\1\106\3\uffff\1\107\3\uffff\1\103\4\uffff\1\110\11\uffff\1\105\6\uffff\1\113\6\uffff\1\104\7\uffff\1\114",
            "\1\116\13\uffff\1\115",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43",
            "\1\43"
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final short[] dfa_8 = DFA.unpackEncodedString(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final char[] dfa_10 = DFA.unpackEncodedStringToUnsignedChars(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[] dfa_12 = DFA.unpackEncodedString(dfa_12s);
    static final short[][] dfa_13 = unpackEncodedStringArray(dfa_13s);

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_7;
            this.eof = dfa_8;
            this.min = dfa_9;
            this.max = dfa_10;
            this.accept = dfa_11;
            this.special = dfa_12;
            this.transition = dfa_13;
        }
        public String getDescription() {
            return "()* loopback of 10290:7: ( ( rule__InfographicElementType__BoxesAssignment_4 )=> rule__InfographicElementType__BoxesAssignment_4 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_35 = input.LA(1);

                         
                        int index25_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalIDSLParser()) ) {s = 41;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index25_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_14s = "\u025c\uffff";
    static final String dfa_15s = "\1\1\u025b\uffff";
    static final String dfa_16s = "\1\13\1\uffff\2\107\2\126\1\10\1\17\15\107\1\32\1\34\1\43\1\111\1\112\1\111\1\131\1\32\1\34\1\43\1\112\1\111\1\131\15\10\12\116\1\4\4\10\15\17\12\116\1\4\3\17\7\107\1\0\5\10\6\107\1\0\5\17\1\32\1\34\1\43\1\111\1\112\1\111\1\131\1\uffff
    static final String dfa_17s = "\1\125\1\uffff\2\107\2\126\2\67\15\107\1\72\1\113\1\116\1\111\1\112\1\111\1\131\1\72\1\113\1\116\1\112\1\111\1\131\15\127\12\116\1\37\21\127\12\116\1\37\3\127\7\107\1\0\5\127\6\107\1\0\5\127\1\72\1\113\1\116\1\111\1\112\1\111\1\131\1\uffff
    static final String dfa_18s = "\1\uffff\1\2\167\uffff\1\1\u01e2\uffff";
    static final String dfa_19s = "\140\uffff\1\0\13\uffff\1\1\u01ef\uffff}>";
    static final String[] dfa_20s = {
            "\1\1\11\uffff\2\1\2\uffff\1\1\36\uffff\2\1\5\uffff\1\1\17\uffff\1\1\1\2\1\3\4\1",
            "",
            "\1\4",
            "\1\5",
            "\1\6",
            "\1\7",
            "\1\13\6\uffff\1\15\1\14\17\uffff\1\10\3\uffff\1\11\5\uffff\1\16\14\uffff\1\12",
            "\1\23\1\22\17\uffff\1\17\3\uffff\1\20\5\uffff\1\24\14\uffff\1\21",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\44\15\uffff\1\43\21\uffff\1\42",
            "\1\53\1\54\1\50\3\uffff\1\51\3\uffff\1\45\4\uffff\1\52\11\uffff\1\47\6\uffff\1\55\6\uffff\1\46\7\uffff\1\56",
            "\1\57\10\uffff\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\31\uffff\1\71",
            "\1\72",
            "\1\73",
            "\1\74",
            "\1\75",
            "\1\100\15\uffff\1\77\21\uffff\1\76",
            "\1\107\1\110\1\104\3\uffff\1\105\3\uffff\1\101\4\uffff\1\106\11\uffff\1\103\6\uffff\1\111\6\uffff\1\102\7\uffff\1\112",
            "\1\113\10\uffff\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\31\uffff\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\71",
            "\1\143\4\uffff\1\144\12\uffff\1\142\3\uffff\1\145\6\uffff\1\141",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\125",
            "\1\157\4\uffff\1\160\12\uffff\1\156\3\uffff\1\161\6\uffff\1\155",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\162",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\uffff",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\134\6\uffff\1\136\1\135\17\uffff\1\131\3\uffff\1\132\5\uffff\1\137\14\uffff\1\133\37\uffff\1\140",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\177",
            "\1\uffff",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\152\1\151\17\uffff\1\146\3\uffff\1\147\5\uffff\1\153\14\uffff\1\150\37\uffff\1\154",
            "\1\u0082\15\uffff\1\u0081\21\uffff\1\u0080",
            "\1\u0089\1\u008a\1\u0086\3\uffff\1\u0087\3\uffff\1\u0083\4\uffff\1\u0088\11\uffff\1\u0085\6\uffff\1\u008b\6\uffff\1\u0084\7\uffff\1\u008c",
            "\1\u008d\10\uffff\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\31\uffff\1\u0097",
            "\1\u0098",
            "\1\u0099",
            "\1\u009a",
            "\1\u009b",
            "",
            "\1\u009e\15\uffff\1\u009d\21\uffff\1\u009c",
            "\1\u00a5\1\u00a6\1\u00a2\3\uffff\1\u00a3\3\uffff\1\u009f\4\uffff\1\u00a4\11\uffff\1\u00a1\6\uffff\1\u00a7\6\uffff\1\u00a0\7\uffff\1\u00a8",
            "\1\u00a9\10\uffff\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\31\uffff\1\u00b3",
            "\1\u00b4",
            "\1\u00b5",
            "\1\u00b6",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u0097",
            "\1\u00c0\4\uffff\1\u00c1\12\uffff\1\u00bf\3\uffff\1\u00c2\6\uffff\1\u00be",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00b3",
            "\1\u00cb\4\uffff\1\u00cc\12\uffff\1\u00ca\3\uffff\1\u00cd\6\uffff\1\u00c9",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00ce",
            "\1\u00cf",
            "\1\u00d0",
            "\1\u00d1",
            "\1\u00d2",
            "\1\u00d3",
            "\1\u00d4",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00ba\6\uffff\1\u00bc\1\u00bb\17\uffff\1\u00b7\3\uffff\1\u00b8\5\uffff\1\u00bd\14\uffff\1\u00b9\37\uffff\1\140",
            "\1\u00d5",
            "\1\u00d6",
            "\1\u00d7",
            "\1\u00d8",
            "\1\u00d9",
            "\1\u00da",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00c7\1\u00c6\17\uffff\1\u00c3\3\uffff\1\u00c4\5\uffff\1\u00c8\14\uffff\1\u00c5\37\uffff\1\154",
            "\1\u00dd\15\uffff\1\u00dc\21\uffff\1\u00db",
            "\1\u00e4\1\u00e5\1\u00e1\3\uffff\1\u00e2\3\uffff\1\u00de\4\uffff\1\u00e3\11\uffff\1\u00e0\6\uffff\1\u00e6\6\uffff\1\u00df\7\uffff\1\u00e7",
            "\1\u00e8\10\uffff\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\31\uffff\1\u00f2",
            "\1\u00f3",
            "\1\u00f4",
            "\1\u00f5",
            "\1\u00f6",
            "\1\u00f9\15\uffff\1\u00f8\21\uffff\1\u00f7",
            "\1\u0100\1\u0101\1\u00fd\3\uffff\1\u00fe\3\uffff\1\u00fa\4\uffff\1\u00ff\11\uffff\1\u00fc\6\uffff\1\u0102\6\uffff\1\u00fb\7\uffff\1\u0103",
            "\1\u0104\10\uffff\1\u0105\1\u0106\1\u0107\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\31\uffff\1\u010e",
            "\1\u010f",
            "\1\u0110",
            "\1\u0111",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u00f2",
            "\1\u011b\4\uffff\1\u011c\12\uffff\1\u011a\3\uffff\1\u011d\6\uffff\1\u0119",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u010e",
            "\1\u0126\4\uffff\1\u0127\12\uffff\1\u0125\3\uffff\1\u0128\6\uffff\1\u0124",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0129",
            "\1\u012a",
            "\1\u012b",
            "\1\u012c",
            "\1\u012d",
            "\1\u012e",
            "\1\u012f",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0115\6\uffff\1\u0117\1\u0116\17\uffff\1\u0112\3\uffff\1\u0113\5\uffff\1\u0118\14\uffff\1\u0114\37\uffff\1\140",
            "\1\u0130",
            "\1\u0131",
            "\1\u0132",
            "\1\u0133",
            "\1\u0134",
            "\1\u0135",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0122\1\u0121\17\uffff\1\u011e\3\uffff\1\u011f\5\uffff\1\u0123\14\uffff\1\u0120\37\uffff\1\154",
            "\1\u0138\15\uffff\1\u0137\21\uffff\1\u0136",
            "\1\u013f\1\u0140\1\u013c\3\uffff\1\u013d\3\uffff\1\u0139\4\uffff\1\u013e\11\uffff\1\u013b\6\uffff\1\u0141\6\uffff\1\u013a\7\uffff\1\u0142",
            "\1\u0143\10\uffff\1\u0144\1\u0145\1\u0146\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b\1\u014c\31\uffff\1\u014d",
            "\1\u014e",
            "\1\u014f",
            "\1\u0150",
            "\1\u0151",
            "\1\u0154\15\uffff\1\u0153\21\uffff\1\u0152",
            "\1\u015b\1\u015c\1\u0158\3\uffff\1\u0159\3\uffff\1\u0155\4\uffff\1\u015a\11\uffff\1\u0157\6\uffff\1\u015d\6\uffff\1\u0156\7\uffff\1\u015e",
            "\1\u015f\10\uffff\1\u0160\1\u0161\1\u0162\1\u0163\1\u0164\1\u0165\1\u0166\1\u0167\1\u0168\31\uffff\1\u0169",
            "\1\u016a",
            "\1\u016b",
            "\1\u016c",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u014d",
            "\1\u0176\4\uffff\1\u0177\12\uffff\1\u0175\3\uffff\1\u0178\6\uffff\1\u0174",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0169",
            "\1\u0181\4\uffff\1\u0182\12\uffff\1\u0180\3\uffff\1\u0183\6\uffff\1\u017f",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u0184",
            "\1\u0185",
            "\1\u0186",
            "\1\u0187",
            "\1\u0188",
            "\1\u0189",
            "\1\u018a",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u0170\6\uffff\1\u0172\1\u0171\17\uffff\1\u016d\3\uffff\1\u016e\5\uffff\1\u0173\14\uffff\1\u016f\37\uffff\1\140",
            "\1\u018b",
            "\1\u018c",
            "\1\u018d",
            "\1\u018e",
            "\1\u018f",
            "\1\u0190",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u017d\1\u017c\17\uffff\1\u0179\3\uffff\1\u017a\5\uffff\1\u017e\14\uffff\1\u017b\37\uffff\1\154",
            "\1\u0193\15\uffff\1\u0192\21\uffff\1\u0191",
            "\1\u019a\1\u019b\1\u0197\3\uffff\1\u0198\3\uffff\1\u0194\4\uffff\1\u0199\11\uffff\1\u0196\6\uffff\1\u019c\6\uffff\1\u0195\7\uffff\1\u019d",
            "\1\u019e\10\uffff\1\u019f\1\u01a0\1\u01a1\1\u01a2\1\u01a3\1\u01a4\1\u01a5\1\u01a6\1\u01a7\31\uffff\1\u01a8",
            "\1\u01a9",
            "\1\u01aa",
            "\1\u01ab",
            "\1\u01ac",
            "\1\u01af\15\uffff\1\u01ae\21\uffff\1\u01ad",
            "\1\u01b6\1\u01b7\1\u01b3\3\uffff\1\u01b4\3\uffff\1\u01b0\4\uffff\1\u01b5\11\uffff\1\u01b2\6\uffff\1\u01b8\6\uffff\1\u01b1\7\uffff\1\u01b9",
            "\1\u01ba\10\uffff\1\u01bb\1\u01bc\1\u01bd\1\u01be\1\u01bf\1\u01c0\1\u01c1\1\u01c2\1\u01c3\31\uffff\1\u01c4",
            "\1\u01c5",
            "\1\u01c6",
            "\1\u01c7",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01a8",
            "\1\u01d1\4\uffff\1\u01d2\12\uffff\1\u01d0\3\uffff\1\u01d3\6\uffff\1\u01cf",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01c4",
            "\1\u01dc\4\uffff\1\u01dd\12\uffff\1\u01db\3\uffff\1\u01de\6\uffff\1\u01da",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01df",
            "\1\u01e0",
            "\1\u01e1",
            "\1\u01e2",
            "\1\u01e3",
            "\1\u01e4",
            "\1\u01e5",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01cb\6\uffff\1\u01cd\1\u01cc\17\uffff\1\u01c8\3\uffff\1\u01c9\5\uffff\1\u01ce\14\uffff\1\u01ca\37\uffff\1\140",
            "\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\u01ea",
            "\1\u01eb",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01d8\1\u01d7\17\uffff\1\u01d4\3\uffff\1\u01d5\5\uffff\1\u01d9\14\uffff\1\u01d6\37\uffff\1\154",
            "\1\u01ee\15\uffff\1\u01ed\21\uffff\1\u01ec",
            "\1\u01f5\1\u01f6\1\u01f2\3\uffff\1\u01f3\3\uffff\1\u01ef\4\uffff\1\u01f4\11\uffff\1\u01f1\6\uffff\1\u01f7\6\uffff\1\u01f0\7\uffff\1\u01f8",
            "\1\u01f9\10\uffff\1\u01fa\1\u01fb\1\u01fc\1\u01fd\1\u01fe\1\u01ff\1\u0200\1\u0201\1\u0202\31\uffff\1\u0203",
            "\1\u0204",
            "\1\u0205",
            "\1\u0206",
            "\1\u0207",
            "\1\u020a\15\uffff\1\u0209\21\uffff\1\u0208",
            "\1\u0211\1\u0212\1\u020e\3\uffff\1\u020f\3\uffff\1\u020b\4\uffff\1\u0210\11\uffff\1\u020d\6\uffff\1\u0213\6\uffff\1\u020c\7\uffff\1\u0214",
            "\1\u0215\10\uffff\1\u0216\1\u0217\1\u0218\1\u0219\1\u021a\1\u021b\1\u021c\1\u021d\1\u021e\31\uffff\1\u021f",
            "\1\u0220",
            "\1\u0221",
            "\1\u0222",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u0203",
            "\1\u022c\4\uffff\1\u022d\12\uffff\1\u022b\3\uffff\1\u022e\6\uffff\1\u022a",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u021f",
            "\1\u0231\4\uffff\1\u0232\12\uffff\1\u0230\3\uffff\1\u0233\6\uffff\1\u022f",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\u0234",
            "\1\u0235",
            "\1\u0236",
            "\1\u0237",
            "\1\u0238",
            "\1\u0239",
            "\1\u023a",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\u0226\6\uffff\1\u0228\1\u0227\17\uffff\1\u0223\3\uffff\1\u0224\5\uffff\1\u0229\14\uffff\1\u0225\37\uffff\1\140",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\154",
            "\1\u023d\15\uffff\1\u023c\21\uffff\1\u023b",
            "\1\u0244\1\u0245\1\u0241\3\uffff\1\u0242\3\uffff\1\u023e\4\uffff\1\u0243\11\uffff\1\u0240\6\uffff\1\u0246\6\uffff\1\u023f\7\uffff\1\u0247",
            "\1\u0248\10\uffff\1\u0249\1\u024a\1\u024b\1\u024c\1\u024d\1\u024e\1\u024f\1\u0250\1\u0251\31\uffff\1\u0252",
            "\1\u0253",
            "\1\u0254",
            "\1\u0255",
            "\1\u0256",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0252",
            "\1\u0259\4\uffff\1\u025a\12\uffff\1\u0258\3\uffff\1\u025b\6\uffff\1\u0257",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140",
            "\1\140"
    };

    static final short[] dfa_14 = DFA.unpackEncodedString(dfa_14s);
    static final short[] dfa_15 = DFA.unpackEncodedString(dfa_15s);
    static final char[] dfa_16 = DFA.unpackEncodedStringToUnsignedChars(dfa_16s);
    static final char[] dfa_17 = DFA.unpackEncodedStringToUnsignedChars(dfa_17s);
    static final short[] dfa_18 = DFA.unpackEncodedString(dfa_18s);
    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final short[][] dfa_20 = unpackEncodedStringArray(dfa_20s);

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = dfa_14;
            this.eof = dfa_15;
            this.min = dfa_16;
            this.max = dfa_17;
            this.accept = dfa_18;
            this.special = dfa_19;
            this.transition = dfa_20;
        }
        public String getDescription() {
            return "()* loopback of 10312:7: ( ( rule__InfographicElementType__TextsAssignment_5 )=> rule__InfographicElementType__TextsAssignment_5 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_96 = input.LA(1);

                         
                        int index26_96 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalIDSLParser()) ) {s = 121;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_96);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_108 = input.LA(1);

                         
                        int index26_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalIDSLParser()) ) {s = 121;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index26_108);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_21s = "\42\uffff";
    static final String dfa_22s = "\1\1\41\uffff";
    static final String dfa_23s = "\1\13\1\uffff\1\107\1\126\1\20\3\107\2\112\1\131\3\20\3\107\1\0\2\112\1\131\1\uffff\3\20\3\107\2\112\1\131\3\127";
    static final String dfa_24s = "\1\125\1\uffff\1\107\1\126\1\104\3\107\2\112\1\131\3\127\3\107\1\0\2\112\1\131\1\uffff\3\127\3\107\2\112\1\131\3\127";
    static final String dfa_25s = "\1\uffff\1\2\23\uffff\1\1\14\uffff";
    static final String dfa_26s = "\21\uffff\1\0\20\uffff}>";
    static final String[] dfa_27s = {
            "\1\1\11\uffff\2\1\2\uffff\1\1\36\uffff\2\1\5\uffff\1\1\17\uffff\3\1\1\2\3\1",
            "",
            "\1\3",
            "\1\4",
            "\1\5\54\uffff\1\6\6\uffff\1\7",
            "\1\10",
            "\1\11",
            "\1\12",
            "\1\13",
            "\1\14",
            "\1\15",
            "\1\16\54\uffff\1\17\6\uffff\1\20\22\uffff\1\21",
            "\1\16\54\uffff\1\17\6\uffff\1\20\22\uffff\1\21",
            "\1\16\54\uffff\1\17\6\uffff\1\20\22\uffff\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\uffff",
            "\1\26",
            "\1\27",
            "\1\30",
            "",
            "\1\31\54\uffff\1\32\6\uffff\1\33\22\uffff\1\21",
            "\1\31\54\uffff\1\32\6\uffff\1\33\22\uffff\1\21",
            "\1\31\54\uffff\1\32\6\uffff\1\33\22\uffff\1\21",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\37",
            "\1\40",
            "\1\41",
            "\1\21",
            "\1\21",
            "\1\21"
    };

    static final short[] dfa_21 = DFA.unpackEncodedString(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final char[] dfa_23 = DFA.unpackEncodedStringToUnsignedChars(dfa_23s);
    static final char[] dfa_24 = DFA.unpackEncodedStringToUnsignedChars(dfa_24s);
    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final short[][] dfa_27 = unpackEncodedStringArray(dfa_27s);

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_21;
            this.eof = dfa_22;
            this.min = dfa_23;
            this.max = dfa_24;
            this.accept = dfa_25;
            this.special = dfa_26;
            this.transition = dfa_27;
        }
        public String getDescription() {
            return "()* loopback of 10334:7: ( ( rule__InfographicElementType__ImagesAssignment_6 )=> rule__InfographicElementType__ImagesAssignment_6 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA27_17 = input.LA(1);

                         
                        int index27_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalIDSLParser()) ) {s = 21;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index27_17);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 27, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_28s = "\u02b3\uffff";
    static final String dfa_29s = "\1\1\u02b2\uffff";
    static final String dfa_30s = "\1\13\1\uffff\1\107\1\126\1\5\14\107\1\34\1\114\1\126\1\105\1\111\1\112\3\101\1\111\1\131\1\45\13\5\1\131\16\5\14\107\1\0\1\107\1\34\1\114\1\126\1\105\1\111\1\112\3\101\1\111\1\131\1\45\1\uffff
    static final String dfa_31s = "\1\125\1\uffff\1\107\1\126\1\77\14\107\1\113\1\114\1\126\1\106\1\111\1\112\3\110\1\111\1\131\1\102\13\127\1\131\16\127\14\107\1\0\1\107\1\113\1\114\1\126\1\106\1\111\1\112\3\110\1\111\1\131\1\102\1\uffff
    static final String dfa_32s = "\1\uffff\1\2\117\uffff\1\1\u0261\uffff";
    static final String dfa_33s = "\103\uffff\1\0\u026f\uffff}>";
    static final String[] dfa_34s = {
            "\1\1\11\uffff\2\1\2\uffff\1\1\36\uffff\2\1\5\uffff\1\1\17\uffff\4\1\1\2\2\1",
            "",
            "\1\3",
            "\1\4",
            "\1\15\1\10\3\uffff\1\13\2\uffff\1\14\2\uffff\1\12\4\uffff\1\5\1\uffff\1\11\3\uffff\1\6\15\uffff\1\17\14\uffff\1\7\6\uffff\1\16\1\uffff\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\43\1\44\1\40\3\uffff\1\41\3\uffff\1\35\4\uffff\1\42\11\uffff\1\37\6\uffff\1\45\6\uffff\1\36\7\uffff\1\46",
            "\1\47",
            "\1\50",
            "\1\51\1\52",
            "\1\53",
            "\1\54",
            "\1\55\6\uffff\1\56",
            "\1\57\6\uffff\1\60",
            "\1\61\6\uffff\1\62",
            "\1\63",
            "\1\64",
            "\1\66\34\uffff\1\65",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\104",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\112",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\uffff",
            "\1\122",
            "\1\131\1\132\1\126\3\uffff\1\127\3\uffff\1\123\4\uffff\1\130\11\uffff\1\125\6\uffff\1\133\6\uffff\1\124\7\uffff\1\134",
            "\1\135",
            "\1\136",
            "\1\137\1\140",
            "\1\141",
            "\1\142",
            "\1\143\6\uffff\1\144",
            "\1\145\6\uffff\1\146",
            "\1\147\6\uffff\1\150",
            "\1\151",
            "\1\152",
            "\1\154\34\uffff\1\153",
            "",
            "\1\155",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\172",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\174\1\uffff\1\173",
            "\1\175",
            "\1\176",
            "\1\177",
            "\1\u0080",
            "\1\u0081",
            "\1\u0082",
            "\1\u0083",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\77\1\72\3\uffff\1\75\2\uffff\1\76\2\uffff\1\74\4\uffff\1\67\1\uffff\1\73\3\uffff\1\70\15\uffff\1\101\14\uffff\1\71\6\uffff\1\100\1\uffff\1\102\27\uffff\1\103",
            "\1\u0091\1\u0092\1\u008e\3\uffff\1\u008f\3\uffff\1\u008b\4\uffff\1\u0090\11\uffff\1\u008d\6\uffff\1\u0093\6\uffff\1\u008c\7\uffff\1\u0094",
            "\1\u0095",
            "\1\u0096",
            "\1\u0097\1\u0098",
            "\1\u0099",
            "\1\u009a",
            "\1\u009b\6\uffff\1\u009c",
            "\1\u009d\6\uffff\1\u009e",
            "\1\u009f\6\uffff\1\u00a0",
            "\1\u00a1",
            "\1\u00a2",
            "\1\u00a4\34\uffff\1\u00a3",
            "\1\u00a5",
            "\1\u00a6",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00b3",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u00b5\1\uffff\1\u00b4",
            "\1\174\1\uffff\1\173",
            "\1\u00b6",
            "\1\u00b7",
            "\1\u00b8",
            "\1\u00b9",
            "\1\u00ba",
            "\1\u00bb",
            "\1\u00bc",
            "\1\u00bd",
            "\1\u00be",
            "\1\u00bf",
            "\1\u00c0",
            "\1\u00c1",
            "\1\u00c2",
            "\1\u00c3",
            "\1\166\1\161\3\uffff\1\164\2\uffff\1\165\2\uffff\1\163\4\uffff\1\156\1\uffff\1\162\3\uffff\1\157\15\uffff\1\170\14\uffff\1\160\6\uffff\1\167\1\uffff\1\171\27\uffff\1\103",
            "\1\u00ca\1\u00cb\1\u00c7\3\uffff\1\u00c8\3\uffff\1\u00c4\4\uffff\1\u00c9\11\uffff\1\u00c6\6\uffff\1\u00cc\6\uffff\1\u00c5\7\uffff\1\u00cd",
            "\1\u00ce",
            "\1\u00cf",
            "\1\u00d0\1\u00d1",
            "\1\u00d2",
            "\1\u00d3",
            "\1\u00d4\6\uffff\1\u00d5",
            "\1\u00d6\6\uffff\1\u00d7",
            "\1\u00d8\6\uffff\1\u00d9",
            "\1\u00da",
            "\1\u00db",
            "\1\u00dd\34\uffff\1\u00dc",
            "\1\u00de",
            "\1\u00df",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00ec",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u00ee\1\uffff\1\u00ed",
            "\1\u00b5\1\uffff\1\u00b4",
            "\1\u00ef",
            "\1\u00f0",
            "\1\u00f1",
            "\1\u00f2",
            "\1\u00f3",
            "\1\u00f4",
            "\1\u00f5",
            "\1\u00f6",
            "\1\u00f7",
            "\1\u00f8",
            "\1\u00f9",
            "\1\u00fa",
            "\1\u00fb",
            "\1\u00fc",
            "\1\u00af\1\u00aa\3\uffff\1\u00ad\2\uffff\1\u00ae\2\uffff\1\u00ac\4\uffff\1\u00a7\1\uffff\1\u00ab\3\uffff\1\u00a8\15\uffff\1\u00b1\14\uffff\1\u00a9\6\uffff\1\u00b0\1\uffff\1\u00b2\27\uffff\1\103",
            "\1\u0103\1\u0104\1\u0100\3\uffff\1\u0101\3\uffff\1\u00fd\4\uffff\1\u0102\11\uffff\1\u00ff\6\uffff\1\u0105\6\uffff\1\u00fe\7\uffff\1\u0106",
            "\1\u0107",
            "\1\u0108",
            "\1\u0109\1\u010a",
            "\1\u010b",
            "\1\u010c",
            "\1\u010d\6\uffff\1\u010e",
            "\1\u010f\6\uffff\1\u0110",
            "\1\u0111\6\uffff\1\u0112",
            "\1\u0113",
            "\1\u0114",
            "\1\u0116\34\uffff\1\u0115",
            "\1\u0117",
            "\1\u0118",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0125",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0127\1\uffff\1\u0126",
            "\1\u00ee\1\uffff\1\u00ed",
            "\1\u0128",
            "\1\u0129",
            "\1\u012a",
            "\1\u012b",
            "\1\u012c",
            "\1\u012d",
            "\1\u012e",
            "\1\u012f",
            "\1\u0130",
            "\1\u0131",
            "\1\u0132",
            "\1\u0133",
            "\1\u0134",
            "\1\u0135",
            "\1\u00e8\1\u00e3\3\uffff\1\u00e6\2\uffff\1\u00e7\2\uffff\1\u00e5\4\uffff\1\u00e0\1\uffff\1\u00e4\3\uffff\1\u00e1\15\uffff\1\u00ea\14\uffff\1\u00e2\6\uffff\1\u00e9\1\uffff\1\u00eb\27\uffff\1\103",
            "\1\u013c\1\u013d\1\u0139\3\uffff\1\u013a\3\uffff\1\u0136\4\uffff\1\u013b\11\uffff\1\u0138\6\uffff\1\u013e\6\uffff\1\u0137\7\uffff\1\u013f",
            "\1\u0140",
            "\1\u0141",
            "\1\u0142\1\u0143",
            "\1\u0144",
            "\1\u0145",
            "\1\u0146\6\uffff\1\u0147",
            "\1\u0148\6\uffff\1\u0149",
            "\1\u014a\6\uffff\1\u014b",
            "\1\u014c",
            "\1\u014d",
            "\1\u014f\34\uffff\1\u014e",
            "\1\u0150",
            "\1\u0151",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015e",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u0160\1\uffff\1\u015f",
            "\1\u0127\1\uffff\1\u0126",
            "\1\u0161",
            "\1\u0162",
            "\1\u0163",
            "\1\u0164",
            "\1\u0165",
            "\1\u0166",
            "\1\u0167",
            "\1\u0168",
            "\1\u0169",
            "\1\u016a",
            "\1\u016b",
            "\1\u016c",
            "\1\u016d",
            "\1\u016e",
            "\1\u0121\1\u011c\3\uffff\1\u011f\2\uffff\1\u0120\2\uffff\1\u011e\4\uffff\1\u0119\1\uffff\1\u011d\3\uffff\1\u011a\15\uffff\1\u0123\14\uffff\1\u011b\6\uffff\1\u0122\1\uffff\1\u0124\27\uffff\1\103",
            "\1\u0175\1\u0176\1\u0172\3\uffff\1\u0173\3\uffff\1\u016f\4\uffff\1\u0174\11\uffff\1\u0171\6\uffff\1\u0177\6\uffff\1\u0170\7\uffff\1\u0178",
            "\1\u0179",
            "\1\u017a",
            "\1\u017b\1\u017c",
            "\1\u017d",
            "\1\u017e",
            "\1\u017f\6\uffff\1\u0180",
            "\1\u0181\6\uffff\1\u0182",
            "\1\u0183\6\uffff\1\u0184",
            "\1\u0185",
            "\1\u0186",
            "\1\u0188\34\uffff\1\u0187",
            "\1\u0189",
            "\1\u018a",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0197",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u0199\1\uffff\1\u0198",
            "\1\u0160\1\uffff\1\u015f",
            "\1\u019a",
            "\1\u019b",
            "\1\u019c",
            "\1\u019d",
            "\1\u019e",
            "\1\u019f",
            "\1\u01a0",
            "\1\u01a1",
            "\1\u01a2",
            "\1\u01a3",
            "\1\u01a4",
            "\1\u01a5",
            "\1\u01a6",
            "\1\u01a7",
            "\1\u015a\1\u0155\3\uffff\1\u0158\2\uffff\1\u0159\2\uffff\1\u0157\4\uffff\1\u0152\1\uffff\1\u0156\3\uffff\1\u0153\15\uffff\1\u015c\14\uffff\1\u0154\6\uffff\1\u015b\1\uffff\1\u015d\27\uffff\1\103",
            "\1\u01ae\1\u01af\1\u01ab\3\uffff\1\u01ac\3\uffff\1\u01a8\4\uffff\1\u01ad\11\uffff\1\u01aa\6\uffff\1\u01b0\6\uffff\1\u01a9\7\uffff\1\u01b1",
            "\1\u01b2",
            "\1\u01b3",
            "\1\u01b4\1\u01b5",
            "\1\u01b6",
            "\1\u01b7",
            "\1\u01b8\6\uffff\1\u01b9",
            "\1\u01ba\6\uffff\1\u01bb",
            "\1\u01bc\6\uffff\1\u01bd",
            "\1\u01be",
            "\1\u01bf",
            "\1\u01c1\34\uffff\1\u01c0",
            "\1\u01c2",
            "\1\u01c3",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01d0",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u01d2\1\uffff\1\u01d1",
            "\1\u0199\1\uffff\1\u0198",
            "\1\u01d3",
            "\1\u01d4",
            "\1\u01d5",
            "\1\u01d6",
            "\1\u01d7",
            "\1\u01d8",
            "\1\u01d9",
            "\1\u01da",
            "\1\u01db",
            "\1\u01dc",
            "\1\u01dd",
            "\1\u01de",
            "\1\u01df",
            "\1\u01e0",
            "\1\u0193\1\u018e\3\uffff\1\u0191\2\uffff\1\u0192\2\uffff\1\u0190\4\uffff\1\u018b\1\uffff\1\u018f\3\uffff\1\u018c\15\uffff\1\u0195\14\uffff\1\u018d\6\uffff\1\u0194\1\uffff\1\u0196\27\uffff\1\103",
            "\1\u01e7\1\u01e8\1\u01e4\3\uffff\1\u01e5\3\uffff\1\u01e1\4\uffff\1\u01e6\11\uffff\1\u01e3\6\uffff\1\u01e9\6\uffff\1\u01e2\7\uffff\1\u01ea",
            "\1\u01eb",
            "\1\u01ec",
            "\1\u01ed\1\u01ee",
            "\1\u01ef",
            "\1\u01f0",
            "\1\u01f1\6\uffff\1\u01f2",
            "\1\u01f3\6\uffff\1\u01f4",
            "\1\u01f5\6\uffff\1\u01f6",
            "\1\u01f7",
            "\1\u01f8",
            "\1\u01fa\34\uffff\1\u01f9",
            "\1\u01fb",
            "\1\u01fc",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0209",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u020b\1\uffff\1\u020a",
            "\1\u01d2\1\uffff\1\u01d1",
            "\1\u020c",
            "\1\u020d",
            "\1\u020e",
            "\1\u020f",
            "\1\u0210",
            "\1\u0211",
            "\1\u0212",
            "\1\u0213",
            "\1\u0214",
            "\1\u0215",
            "\1\u0216",
            "\1\u0217",
            "\1\u0218",
            "\1\u0219",
            "\1\u01cc\1\u01c7\3\uffff\1\u01ca\2\uffff\1\u01cb\2\uffff\1\u01c9\4\uffff\1\u01c4\1\uffff\1\u01c8\3\uffff\1\u01c5\15\uffff\1\u01ce\14\uffff\1\u01c6\6\uffff\1\u01cd\1\uffff\1\u01cf\27\uffff\1\103",
            "\1\u0220\1\u0221\1\u021d\3\uffff\1\u021e\3\uffff\1\u021a\4\uffff\1\u021f\11\uffff\1\u021c\6\uffff\1\u0222\6\uffff\1\u021b\7\uffff\1\u0223",
            "\1\u0224",
            "\1\u0225",
            "\1\u0226\1\u0227",
            "\1\u0228",
            "\1\u0229",
            "\1\u022a\6\uffff\1\u022b",
            "\1\u022c\6\uffff\1\u022d",
            "\1\u022e\6\uffff\1\u022f",
            "\1\u0230",
            "\1\u0231",
            "\1\u0233\34\uffff\1\u0232",
            "\1\u0234",
            "\1\u0235",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u0242",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u0244\1\uffff\1\u0243",
            "\1\u020b\1\uffff\1\u020a",
            "\1\u0245",
            "\1\u0246",
            "\1\u0247",
            "\1\u0248",
            "\1\u0249",
            "\1\u024a",
            "\1\u024b",
            "\1\u024c",
            "\1\u024d",
            "\1\u024e",
            "\1\u024f",
            "\1\u0250",
            "\1\u0251",
            "\1\u0252",
            "\1\u0205\1\u0200\3\uffff\1\u0203\2\uffff\1\u0204\2\uffff\1\u0202\4\uffff\1\u01fd\1\uffff\1\u0201\3\uffff\1\u01fe\15\uffff\1\u0207\14\uffff\1\u01ff\6\uffff\1\u0206\1\uffff\1\u0208\27\uffff\1\103",
            "\1\u0259\1\u025a\1\u0256\3\uffff\1\u0257\3\uffff\1\u0253\4\uffff\1\u0258\11\uffff\1\u0255\6\uffff\1\u025b\6\uffff\1\u0254\7\uffff\1\u025c",
            "\1\u025d",
            "\1\u025e",
            "\1\u025f\1\u0260",
            "\1\u0261",
            "\1\u0262",
            "\1\u0263\6\uffff\1\u0264",
            "\1\u0265\6\uffff\1\u0266",
            "\1\u0267\6\uffff\1\u0268",
            "\1\u0269",
            "\1\u026a",
            "\1\u026c\34\uffff\1\u026b",
            "\1\u026d",
            "\1\u026e",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u027b",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u027d\1\uffff\1\u027c",
            "\1\u0244\1\uffff\1\u0243",
            "\1\u027e",
            "\1\u027f",
            "\1\u0280",
            "\1\u0281",
            "\1\u0282",
            "\1\u0283",
            "\1\u0284",
            "\1\u0285",
            "\1\u0286",
            "\1\u0287",
            "\1\u0288",
            "\1\u0289",
            "\1\u028a",
            "\1\u028b",
            "\1\u023e\1\u0239\3\uffff\1\u023c\2\uffff\1\u023d\2\uffff\1\u023b\4\uffff\1\u0236\1\uffff\1\u023a\3\uffff\1\u0237\15\uffff\1\u0240\14\uffff\1\u0238\6\uffff\1\u023f\1\uffff\1\u0241\27\uffff\1\103",
            "\1\u0292\1\u0293\1\u028f\3\uffff\1\u0290\3\uffff\1\u028c\4\uffff\1\u0291\11\uffff\1\u028e\6\uffff\1\u0294\6\uffff\1\u028d\7\uffff\1\u0295",
            "\1\u0296",
            "\1\u0297",
            "\1\u0298\1\u0299",
            "\1\u029a",
            "\1\u029b",
            "\1\u029c\6\uffff\1\u029d",
            "\1\u029e\6\uffff\1\u029f",
            "\1\u02a0\6\uffff\1\u02a1",
            "\1\u02a2",
            "\1\u02a3",
            "\1\u02a5\34\uffff\1\u02a4",
            "\1\u02a6",
            "\1\u02a7",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\u02a8",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\103",
            "\1\u02aa\1\uffff\1\u02a9",
            "\1\u027d\1\uffff\1\u027c",
            "\1\u02ab",
            "\1\u02ac",
            "\1\u0277\1\u0272\3\uffff\1\u0275\2\uffff\1\u0276\2\uffff\1\u0274\4\uffff\1\u026f\1\uffff\1\u0273\3\uffff\1\u0270\15\uffff\1\u0279\14\uffff\1\u0271\6\uffff\1\u0278\1\uffff\1\u027a\27\uffff\1\103",
            "\1\u02ad",
            "\1\u02ae",
            "\1\u02b0\1\uffff\1\u02af",
            "\1\u02aa\1\uffff\1\u02a9",
            "\1\u02b1",
            "\1\103",
            "\1\u02b2",
            "\1\u02b0\1\uffff\1\u02af"
    };

    static final short[] dfa_28 = DFA.unpackEncodedString(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final char[] dfa_30 = DFA.unpackEncodedStringToUnsignedChars(dfa_30s);
    static final char[] dfa_31 = DFA.unpackEncodedStringToUnsignedChars(dfa_31s);
    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final short[][] dfa_34 = unpackEncodedStringArray(dfa_34s);

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = dfa_28;
            this.eof = dfa_29;
            this.min = dfa_30;
            this.max = dfa_31;
            this.accept = dfa_32;
            this.special = dfa_33;
            this.transition = dfa_34;
        }
        public String getDescription() {
            return "()* loopback of 10356:7: ( ( rule__InfographicElementType__PiechartsAssignment_7 )=> rule__InfographicElementType__PiechartsAssignment_7 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA28_67 = input.LA(1);

                         
                        int index28_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_InternalIDSLParser()) ) {s = 81;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index28_67);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 28, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_35s = "\u0313\uffff";
    static final String dfa_36s = "\1\1\u0312\uffff";
    static final String dfa_37s = "\1\13\1\uffff\1\107\1\126\1\6\15\107\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\13\6\1\131\17\6\15\107\1\0\1\107\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\1\uffff\1\131\13\6\1\131\17\6\1\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\6\1\131\17\6\2\127\17\107\1\6\1\34\1\114\1\126\1\111\1\105\1\111\1\112\3\101\1\112\1\131\1\7\2\131\13\127\1\131\21\127\2\107\1\6\2\131\2\127\1\107\1\127\1\131\1\127";
    static final String dfa_38s = "\1\125\1\uffff\1\107\1\126\1\77\15\107\1\113\1\114\1\126\1\111\1\106\1\111\1\112\3\110\1\112\1\131\1\23\13\127\1\131\17\127\15\107\1\0\1\107\1\113\1\114\1\126\1\111\1\106\1\111\1\112\3\110\1\112\1\131\1\23\1\uffff
    static final String dfa_39s = "\1\uffff\1\2\124\uffff\1\1\u02bc\uffff";
    static final String dfa_40s = "\107\uffff\1\0\u02cb\uffff}>";
    static final String[] dfa_41s = {
            "\1\1\11\uffff\2\1\2\uffff\1\1\36\uffff\2\1\5\uffff\1\1\17\uffff\5\1\1\2\1\1",
            "",
            "\1\3",
            "\1\4",
            "\1\11\3\uffff\1\15\1\uffff\1\10\1\16\2\uffff\1\13\1\14\3\uffff\1\5\1\uffff\1\12\3\uffff\1\6\15\uffff\1\20\14\uffff\1\7\6\uffff\1\17\1\uffff\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\33",
            "\1\34",
            "\1\35",
            "\1\36",
            "\1\45\1\46\1\42\3\uffff\1\43\3\uffff\1\37\4\uffff\1\44\11\uffff\1\41\6\uffff\1\47\6\uffff\1\40\7\uffff\1\50",
            "\1\51",
            "\1\52",
            "\1\53",
            "\1\54\1\55",
            "\1\56",
            "\1\57",
            "\1\60\6\uffff\1\61",
            "\1\62\6\uffff\1\63",
            "\1\64\6\uffff\1\65",
            "\1\66",
            "\1\67",
            "\1\70\13\uffff\1\71",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\110",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\111",
            "\1\112",
            "\1\113",
            "\1\114",
            "\1\115",
            "\1\116",
            "\1\117",
            "\1\120",
            "\1\121",
            "\1\122",
            "\1\123",
            "\1\124",
            "\1\125",
            "\1\uffff",
            "\1\127",
            "\1\136\1\137\1\133\3\uffff\1\134\3\uffff\1\130\4\uffff\1\135\11\uffff\1\132\6\uffff\1\140\6\uffff\1\131\7\uffff\1\141",
            "\1\142",
            "\1\143",
            "\1\144",
            "\1\145\1\146",
            "\1\147",
            "\1\150",
            "\1\151\6\uffff\1\152",
            "\1\153\6\uffff\1\154",
            "\1\155\6\uffff\1\156",
            "\1\157",
            "\1\160",
            "\1\161\13\uffff\1\162",
            "",
            "\1\163",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\u0081",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\u0083\1\uffff\1\u0082",
            "\1\u0084",
            "\1\u0085",
            "\1\u0086",
            "\1\u0087",
            "\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e",
            "\1\u008f",
            "\1\u0090",
            "\1\u0091",
            "\1\u0092",
            "\1\76\3\uffff\1\102\1\uffff\1\75\1\103\2\uffff\1\100\1\101\3\uffff\1\72\1\uffff\1\77\3\uffff\1\73\15\uffff\1\105\14\uffff\1\74\6\uffff\1\104\1\uffff\1\106\27\uffff\1\107",
            "\1\u0099\1\u009a\1\u0096\3\uffff\1\u0097\3\uffff\1\u0093\4\uffff\1\u0098\11\uffff\1\u0095\6\uffff\1\u009b\6\uffff\1\u0094\7\uffff\1\u009c",
            "\1\u009d",
            "\1\u009e",
            "\1\u009f",
            "\1\u00a0\1\u00a1",
            "\1\u00a2",
            "\1\u00a3",
            "\1\u00a4\6\uffff\1\u00a5",
            "\1\u00a6\6\uffff\1\u00a7",
            "\1\u00a8\6\uffff\1\u00a9",
            "\1\u00aa",
            "\1\u00ab",
            "\1\u00ac\13\uffff\1\u00ad",
            "\1\u00ae",
            "\1\u00af",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00bd",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u00bf\1\uffff\1\u00be",
            "\1\u0083\1\uffff\1\u0082",
            "\1\u00c0",
            "\1\u00c1",
            "\1\u00c2",
            "\1\u00c3",
            "\1\u00c4",
            "\1\u00c5",
            "\1\u00c6",
            "\1\u00c7",
            "\1\u00c8",
            "\1\u00c9",
            "\1\u00ca",
            "\1\u00cb",
            "\1\u00cc",
            "\1\u00cd",
            "\1\u00ce",
            "\1\170\3\uffff\1\174\1\uffff\1\167\1\175\2\uffff\1\172\1\173\3\uffff\1\164\1\uffff\1\171\3\uffff\1\165\15\uffff\1\177\14\uffff\1\166\6\uffff\1\176\1\uffff\1\u0080\27\uffff\1\107",
            "\1\u00d5\1\u00d6\1\u00d2\3\uffff\1\u00d3\3\uffff\1\u00cf\4\uffff\1\u00d4\11\uffff\1\u00d1\6\uffff\1\u00d7\6\uffff\1\u00d0\7\uffff\1\u00d8",
            "\1\u00d9",
            "\1\u00da",
            "\1\u00db",
            "\1\u00dc\1\u00dd",
            "\1\u00de",
            "\1\u00df",
            "\1\u00e0\6\uffff\1\u00e1",
            "\1\u00e2\6\uffff\1\u00e3",
            "\1\u00e4\6\uffff\1\u00e5",
            "\1\u00e6",
            "\1\u00e7",
            "\1\u00e8\13\uffff\1\u00e9",
            "\1\u00ea",
            "\1\u00eb",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f9",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u00fb\1\uffff\1\u00fa",
            "\1\u00bf\1\uffff\1\u00be",
            "\1\u00fc",
            "\1\u00fd",
            "\1\u00fe",
            "\1\u00ff",
            "\1\u0100",
            "\1\u0101",
            "\1\u0102",
            "\1\u0103",
            "\1\u0104",
            "\1\u0105",
            "\1\u0106",
            "\1\u0107",
            "\1\u0108",
            "\1\u0109",
            "\1\u010a",
            "\1\u00b4\3\uffff\1\u00b8\1\uffff\1\u00b3\1\u00b9\2\uffff\1\u00b6\1\u00b7\3\uffff\1\u00b0\1\uffff\1\u00b5\3\uffff\1\u00b1\15\uffff\1\u00bb\14\uffff\1\u00b2\6\uffff\1\u00ba\1\uffff\1\u00bc\27\uffff\1\107",
            "\1\u0111\1\u0112\1\u010e\3\uffff\1\u010f\3\uffff\1\u010b\4\uffff\1\u0110\11\uffff\1\u010d\6\uffff\1\u0113\6\uffff\1\u010c\7\uffff\1\u0114",
            "\1\u0115",
            "\1\u0116",
            "\1\u0117",
            "\1\u0118\1\u0119",
            "\1\u011a",
            "\1\u011b",
            "\1\u011c\6\uffff\1\u011d",
            "\1\u011e\6\uffff\1\u011f",
            "\1\u0120\6\uffff\1\u0121",
            "\1\u0122",
            "\1\u0123",
            "\1\u0124\13\uffff\1\u0125",
            "\1\u0126",
            "\1\u0127",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u0135",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u0137\1\uffff\1\u0136",
            "\1\u00fb\1\uffff\1\u00fa",
            "\1\u0138",
            "\1\u0139",
            "\1\u013a",
            "\1\u013b",
            "\1\u013c",
            "\1\u013d",
            "\1\u013e",
            "\1\u013f",
            "\1\u0140",
            "\1\u0141",
            "\1\u0142",
            "\1\u0143",
            "\1\u0144",
            "\1\u0145",
            "\1\u0146",
            "\1\u00f0\3\uffff\1\u00f4\1\uffff\1\u00ef\1\u00f5\2\uffff\1\u00f2\1\u00f3\3\uffff\1\u00ec\1\uffff\1\u00f1\3\uffff\1\u00ed\15\uffff\1\u00f7\14\uffff\1\u00ee\6\uffff\1\u00f6\1\uffff\1\u00f8\27\uffff\1\107",
            "\1\u014d\1\u014e\1\u014a\3\uffff\1\u014b\3\uffff\1\u0147\4\uffff\1\u014c\11\uffff\1\u0149\6\uffff\1\u014f\6\uffff\1\u0148\7\uffff\1\u0150",
            "\1\u0151",
            "\1\u0152",
            "\1\u0153",
            "\1\u0154\1\u0155",
            "\1\u0156",
            "\1\u0157",
            "\1\u0158\6\uffff\1\u0159",
            "\1\u015a\6\uffff\1\u015b",
            "\1\u015c\6\uffff\1\u015d",
            "\1\u015e",
            "\1\u015f",
            "\1\u0160\13\uffff\1\u0161",
            "\1\u0162",
            "\1\u0163",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0171",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u0173\1\uffff\1\u0172",
            "\1\u0137\1\uffff\1\u0136",
            "\1\u0174",
            "\1\u0175",
            "\1\u0176",
            "\1\u0177",
            "\1\u0178",
            "\1\u0179",
            "\1\u017a",
            "\1\u017b",
            "\1\u017c",
            "\1\u017d",
            "\1\u017e",
            "\1\u017f",
            "\1\u0180",
            "\1\u0181",
            "\1\u0182",
            "\1\u012c\3\uffff\1\u0130\1\uffff\1\u012b\1\u0131\2\uffff\1\u012e\1\u012f\3\uffff\1\u0128\1\uffff\1\u012d\3\uffff\1\u0129\15\uffff\1\u0133\14\uffff\1\u012a\6\uffff\1\u0132\1\uffff\1\u0134\27\uffff\1\107",
            "\1\u0189\1\u018a\1\u0186\3\uffff\1\u0187\3\uffff\1\u0183\4\uffff\1\u0188\11\uffff\1\u0185\6\uffff\1\u018b\6\uffff\1\u0184\7\uffff\1\u018c",
            "\1\u018d",
            "\1\u018e",
            "\1\u018f",
            "\1\u0190\1\u0191",
            "\1\u0192",
            "\1\u0193",
            "\1\u0194\6\uffff\1\u0195",
            "\1\u0196\6\uffff\1\u0197",
            "\1\u0198\6\uffff\1\u0199",
            "\1\u019a",
            "\1\u019b",
            "\1\u019c\13\uffff\1\u019d",
            "\1\u019e",
            "\1\u019f",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01ad",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u01af\1\uffff\1\u01ae",
            "\1\u0173\1\uffff\1\u0172",
            "\1\u01b0",
            "\1\u01b1",
            "\1\u01b2",
            "\1\u01b3",
            "\1\u01b4",
            "\1\u01b5",
            "\1\u01b6",
            "\1\u01b7",
            "\1\u01b8",
            "\1\u01b9",
            "\1\u01ba",
            "\1\u01bb",
            "\1\u01bc",
            "\1\u01bd",
            "\1\u01be",
            "\1\u0168\3\uffff\1\u016c\1\uffff\1\u0167\1\u016d\2\uffff\1\u016a\1\u016b\3\uffff\1\u0164\1\uffff\1\u0169\3\uffff\1\u0165\15\uffff\1\u016f\14\uffff\1\u0166\6\uffff\1\u016e\1\uffff\1\u0170\27\uffff\1\107",
            "\1\u01c5\1\u01c6\1\u01c2\3\uffff\1\u01c3\3\uffff\1\u01bf\4\uffff\1\u01c4\11\uffff\1\u01c1\6\uffff\1\u01c7\6\uffff\1\u01c0\7\uffff\1\u01c8",
            "\1\u01c9",
            "\1\u01ca",
            "\1\u01cb",
            "\1\u01cc\1\u01cd",
            "\1\u01ce",
            "\1\u01cf",
            "\1\u01d0\6\uffff\1\u01d1",
            "\1\u01d2\6\uffff\1\u01d3",
            "\1\u01d4\6\uffff\1\u01d5",
            "\1\u01d6",
            "\1\u01d7",
            "\1\u01d8\13\uffff\1\u01d9",
            "\1\u01da",
            "\1\u01db",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e9",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u01eb\1\uffff\1\u01ea",
            "\1\u01af\1\uffff\1\u01ae",
            "\1\u01ec",
            "\1\u01ed",
            "\1\u01ee",
            "\1\u01ef",
            "\1\u01f0",
            "\1\u01f1",
            "\1\u01f2",
            "\1\u01f3",
            "\1\u01f4",
            "\1\u01f5",
            "\1\u01f6",
            "\1\u01f7",
            "\1\u01f8",
            "\1\u01f9",
            "\1\u01fa",
            "\1\u01a4\3\uffff\1\u01a8\1\uffff\1\u01a3\1\u01a9\2\uffff\1\u01a6\1\u01a7\3\uffff\1\u01a0\1\uffff\1\u01a5\3\uffff\1\u01a1\15\uffff\1\u01ab\14\uffff\1\u01a2\6\uffff\1\u01aa\1\uffff\1\u01ac\27\uffff\1\107",
            "\1\u0201\1\u0202\1\u01fe\3\uffff\1\u01ff\3\uffff\1\u01fb\4\uffff\1\u0200\11\uffff\1\u01fd\6\uffff\1\u0203\6\uffff\1\u01fc\7\uffff\1\u0204",
            "\1\u0205",
            "\1\u0206",
            "\1\u0207",
            "\1\u0208\1\u0209",
            "\1\u020a",
            "\1\u020b",
            "\1\u020c\6\uffff\1\u020d",
            "\1\u020e\6\uffff\1\u020f",
            "\1\u0210\6\uffff\1\u0211",
            "\1\u0212",
            "\1\u0213",
            "\1\u0214\13\uffff\1\u0215",
            "\1\u0216",
            "\1\u0217",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u0225",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u0227\1\uffff\1\u0226",
            "\1\u01eb\1\uffff\1\u01ea",
            "\1\u0228",
            "\1\u0229",
            "\1\u022a",
            "\1\u022b",
            "\1\u022c",
            "\1\u022d",
            "\1\u022e",
            "\1\u022f",
            "\1\u0230",
            "\1\u0231",
            "\1\u0232",
            "\1\u0233",
            "\1\u0234",
            "\1\u0235",
            "\1\u0236",
            "\1\u01e0\3\uffff\1\u01e4\1\uffff\1\u01df\1\u01e5\2\uffff\1\u01e2\1\u01e3\3\uffff\1\u01dc\1\uffff\1\u01e1\3\uffff\1\u01dd\15\uffff\1\u01e7\14\uffff\1\u01de\6\uffff\1\u01e6\1\uffff\1\u01e8\27\uffff\1\107",
            "\1\u023d\1\u023e\1\u023a\3\uffff\1\u023b\3\uffff\1\u0237\4\uffff\1\u023c\11\uffff\1\u0239\6\uffff\1\u023f\6\uffff\1\u0238\7\uffff\1\u0240",
            "\1\u0241",
            "\1\u0242",
            "\1\u0243",
            "\1\u0244\1\u0245",
            "\1\u0246",
            "\1\u0247",
            "\1\u0248\6\uffff\1\u0249",
            "\1\u024a\6\uffff\1\u024b",
            "\1\u024c\6\uffff\1\u024d",
            "\1\u024e",
            "\1\u024f",
            "\1\u0250\13\uffff\1\u0251",
            "\1\u0252",
            "\1\u0253",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0261",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u0263\1\uffff\1\u0262",
            "\1\u0227\1\uffff\1\u0226",
            "\1\u0264",
            "\1\u0265",
            "\1\u0266",
            "\1\u0267",
            "\1\u0268",
            "\1\u0269",
            "\1\u026a",
            "\1\u026b",
            "\1\u026c",
            "\1\u026d",
            "\1\u026e",
            "\1\u026f",
            "\1\u0270",
            "\1\u0271",
            "\1\u0272",
            "\1\u021c\3\uffff\1\u0220\1\uffff\1\u021b\1\u0221\2\uffff\1\u021e\1\u021f\3\uffff\1\u0218\1\uffff\1\u021d\3\uffff\1\u0219\15\uffff\1\u0223\14\uffff\1\u021a\6\uffff\1\u0222\1\uffff\1\u0224\27\uffff\1\107",
            "\1\u0279\1\u027a\1\u0276\3\uffff\1\u0277\3\uffff\1\u0273\4\uffff\1\u0278\11\uffff\1\u0275\6\uffff\1\u027b\6\uffff\1\u0274\7\uffff\1\u027c",
            "\1\u027d",
            "\1\u027e",
            "\1\u027f",
            "\1\u0280\1\u0281",
            "\1\u0282",
            "\1\u0283",
            "\1\u0284\6\uffff\1\u0285",
            "\1\u0286\6\uffff\1\u0287",
            "\1\u0288\6\uffff\1\u0289",
            "\1\u028a",
            "\1\u028b",
            "\1\u028c\13\uffff\1\u028d",
            "\1\u028e",
            "\1\u028f",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u029d",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u029f\1\uffff\1\u029e",
            "\1\u0263\1\uffff\1\u0262",
            "\1\u02a0",
            "\1\u02a1",
            "\1\u02a2",
            "\1\u02a3",
            "\1\u02a4",
            "\1\u02a5",
            "\1\u02a6",
            "\1\u02a7",
            "\1\u02a8",
            "\1\u02a9",
            "\1\u02aa",
            "\1\u02ab",
            "\1\u02ac",
            "\1\u02ad",
            "\1\u02ae",
            "\1\u0258\3\uffff\1\u025c\1\uffff\1\u0257\1\u025d\2\uffff\1\u025a\1\u025b\3\uffff\1\u0254\1\uffff\1\u0259\3\uffff\1\u0255\15\uffff\1\u025f\14\uffff\1\u0256\6\uffff\1\u025e\1\uffff\1\u0260\27\uffff\1\107",
            "\1\u02b5\1\u02b6\1\u02b2\3\uffff\1\u02b3\3\uffff\1\u02af\4\uffff\1\u02b4\11\uffff\1\u02b1\6\uffff\1\u02b7\6\uffff\1\u02b0\7\uffff\1\u02b8",
            "\1\u02b9",
            "\1\u02ba",
            "\1\u02bb",
            "\1\u02bc\1\u02bd",
            "\1\u02be",
            "\1\u02bf",
            "\1\u02c0\6\uffff\1\u02c1",
            "\1\u02c2\6\uffff\1\u02c3",
            "\1\u02c4\6\uffff\1\u02c5",
            "\1\u02c6",
            "\1\u02c7",
            "\1\u02c8\13\uffff\1\u02c9",
            "\1\u02ca",
            "\1\u02cb",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d9",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u02db\1\uffff\1\u02da",
            "\1\u029f\1\uffff\1\u029e",
            "\1\u02dc",
            "\1\u02dd",
            "\1\u02de",
            "\1\u02df",
            "\1\u02e0",
            "\1\u02e1",
            "\1\u02e2",
            "\1\u02e3",
            "\1\u02e4",
            "\1\u02e5",
            "\1\u02e6",
            "\1\u02e7",
            "\1\u02e8",
            "\1\u02e9",
            "\1\u02ea",
            "\1\u0294\3\uffff\1\u0298\1\uffff\1\u0293\1\u0299\2\uffff\1\u0296\1\u0297\3\uffff\1\u0290\1\uffff\1\u0295\3\uffff\1\u0291\15\uffff\1\u029b\14\uffff\1\u0292\6\uffff\1\u029a\1\uffff\1\u029c\27\uffff\1\107",
            "\1\u02f1\1\u02f2\1\u02ee\3\uffff\1\u02ef\3\uffff\1\u02eb\4\uffff\1\u02f0\11\uffff\1\u02ed\6\uffff\1\u02f3\6\uffff\1\u02ec\7\uffff\1\u02f4",
            "\1\u02f5",
            "\1\u02f6",
            "\1\u02f7",
            "\1\u02f8\1\u02f9",
            "\1\u02fa",
            "\1\u02fb",
            "\1\u02fc\6\uffff\1\u02fd",
            "\1\u02fe\6\uffff\1\u02ff",
            "\1\u0300\6\uffff\1\u0301",
            "\1\u0302",
            "\1\u0303",
            "\1\u0304\13\uffff\1\u0305",
            "\1\u0306",
            "\1\u0307",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\u0308",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\107",
            "\1\u030a\1\uffff\1\u0309",
            "\1\u02db\1\uffff\1\u02da",
            "\1\u030b",
            "\1\u030c",
            "\1\u02d0\3\uffff\1\u02d4\1\uffff\1\u02cf\1\u02d5\2\uffff\1\u02d2\1\u02d3\3\uffff\1\u02cc\1\uffff\1\u02d1\3\uffff\1\u02cd\15\uffff\1\u02d7\14\uffff\1\u02ce\6\uffff\1\u02d6\1\uffff\1\u02d8\27\uffff\1\107",
            "\1\u030d",
            "\1\u030e",
            "\1\u0310\1\uffff\1\u030f",
            "\1\u030a\1\uffff\1\u0309",
            "\1\u0311",
            "\1\107",
            "\1\u0312",
            "\1\u0310\1\uffff\1\u030f"
    };

    static final short[] dfa_35 = DFA.unpackEncodedString(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final char[] dfa_37 = DFA.unpackEncodedStringToUnsignedChars(dfa_37s);
    static final char[] dfa_38 = DFA.unpackEncodedStringToUnsignedChars(dfa_38s);
    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final short[][] dfa_41 = unpackEncodedStringArray(dfa_41s);

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = dfa_35;
            this.eof = dfa_36;
            this.min = dfa_37;
            this.max = dfa_38;
            this.accept = dfa_39;
            this.special = dfa_40;
            this.transition = dfa_41;
        }
        public String getDescription() {
            return "()* loopback of 10378:7: ( ( rule__InfographicElementType__BarchartsAssignment_8 )=> rule__InfographicElementType__BarchartsAssignment_8 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_71 = input.LA(1);

                         
                        int index29_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_InternalIDSLParser()) ) {s = 86;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index29_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_42s = "\u0243\uffff";
    static final String dfa_43s = "\1\1\u0242\uffff";
    static final String dfa_44s = "\1\13\1\uffff\1\107\1\126\1\12\13\107\1\34\1\114\1\126\1\131\1\111\1\112\2\101\1\112\1\131\1\16\13\12\1\131\13\12\13\107\1\0\1\107\1\34\1\114\1\126\1\131\1\111\1\112\2\101\1\112\1\131\1\16\1\uffff
    static final String dfa_45s = "\1\125\1\uffff\1\107\1\126\1\77\13\107\1\113\1\114\1\126\1\131\1\111\1\112\2\110\1\112\1\131\1\100\13\127\1\131\13\127\13\107\1\0\1\107\1\113\1\114\1\126\1\131\1\111\1\112\2\110\1\112\1\131\1\100\1\uffff
    static final String dfa_46s = "\1\uffff\1\2\110\uffff\1\1\u01f8\uffff";
    static final String dfa_47s = "\75\uffff\1\0\u0205\uffff}>";
    static final String[] dfa_48s = {
            "\1\1\11\uffff\2\1\2\uffff\1\1\36\uffff\2\1\5\uffff\1\1\17\uffff\6\1\1\2",
            "",
            "\1\3",
            "\1\4",
            "\1\13\2\uffff\1\14\2\uffff\1\12\4\uffff\1\5\1\uffff\1\11\3\uffff\1\6\13\uffff\1\10\1\uffff\1\16\14\uffff\1\7\6\uffff\1\15\1\uffff\1\17",
            "\1\20",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\24",
            "\1\25",
            "\1\26",
            "\1\27",
            "\1\30",
            "\1\31",
            "\1\32",
            "\1\41\1\42\1\36\3\uffff\1\37\3\uffff\1\33\4\uffff\1\40\11\uffff\1\35\6\uffff\1\43\6\uffff\1\34\7\uffff\1\44",
            "\1\45",
            "\1\46",
            "\1\47",
            "\1\50",
            "\1\51",
            "\1\52\6\uffff\1\53",
            "\1\54\6\uffff\1\55",
            "\1\56",
            "\1\57",
            "\1\61\61\uffff\1\60",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\76",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\77",
            "\1\100",
            "\1\101",
            "\1\102",
            "\1\103",
            "\1\104",
            "\1\105",
            "\1\106",
            "\1\107",
            "\1\110",
            "\1\111",
            "\1\uffff",
            "\1\113",
            "\1\122\1\123\1\117\3\uffff\1\120\3\uffff\1\114\4\uffff\1\121\11\uffff\1\116\6\uffff\1\124\6\uffff\1\115\7\uffff\1\125",
            "\1\126",
            "\1\127",
            "\1\130",
            "\1\131",
            "\1\132",
            "\1\133\6\uffff\1\134",
            "\1\135\6\uffff\1\136",
            "\1\137",
            "\1\140",
            "\1\142\61\uffff\1\141",
            "",
            "\1\143",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\157",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\161\1\uffff\1\160",
            "\1\162",
            "\1\163",
            "\1\164",
            "\1\165",
            "\1\166",
            "\1\167",
            "\1\170",
            "\1\171",
            "\1\172",
            "\1\173",
            "\1\174",
            "\1\175",
            "\1\176",
            "\1\70\2\uffff\1\71\2\uffff\1\67\4\uffff\1\62\1\uffff\1\66\3\uffff\1\63\13\uffff\1\65\1\uffff\1\73\14\uffff\1\64\6\uffff\1\72\1\uffff\1\74\27\uffff\1\75",
            "\1\u0085\1\u0086\1\u0082\3\uffff\1\u0083\3\uffff\1\177\4\uffff\1\u0084\11\uffff\1\u0081\6\uffff\1\u0087\6\uffff\1\u0080\7\uffff\1\u0088",
            "\1\u0089",
            "\1\u008a",
            "\1\u008b",
            "\1\u008c",
            "\1\u008d",
            "\1\u008e\6\uffff\1\u008f",
            "\1\u0090\6\uffff\1\u0091",
            "\1\u0092",
            "\1\u0093",
            "\1\u0095\61\uffff\1\u0094",
            "\1\u0096",
            "\1\u0097",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u00a3",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u00a5\1\uffff\1\u00a4",
            "\1\161\1\uffff\1\160",
            "\1\u00a6",
            "\1\u00a7",
            "\1\u00a8",
            "\1\u00a9",
            "\1\u00aa",
            "\1\u00ab",
            "\1\u00ac",
            "\1\u00ad",
            "\1\u00ae",
            "\1\u00af",
            "\1\u00b0",
            "\1\u00b1",
            "\1\u00b2",
            "\1\152\2\uffff\1\153\2\uffff\1\151\4\uffff\1\144\1\uffff\1\150\3\uffff\1\145\13\uffff\1\147\1\uffff\1\155\14\uffff\1\146\6\uffff\1\154\1\uffff\1\156\27\uffff\1\75",
            "\1\u00b9\1\u00ba\1\u00b6\3\uffff\1\u00b7\3\uffff\1\u00b3\4\uffff\1\u00b8\11\uffff\1\u00b5\6\uffff\1\u00bb\6\uffff\1\u00b4\7\uffff\1\u00bc",
            "\1\u00bd",
            "\1\u00be",
            "\1\u00bf",
            "\1\u00c0",
            "\1\u00c1",
            "\1\u00c2\6\uffff\1\u00c3",
            "\1\u00c4\6\uffff\1\u00c5",
            "\1\u00c6",
            "\1\u00c7",
            "\1\u00c9\61\uffff\1\u00c8",
            "\1\u00ca",
            "\1\u00cb",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d7",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u00d9\1\uffff\1\u00d8",
            "\1\u00a5\1\uffff\1\u00a4",
            "\1\u00da",
            "\1\u00db",
            "\1\u00dc",
            "\1\u00dd",
            "\1\u00de",
            "\1\u00df",
            "\1\u00e0",
            "\1\u00e1",
            "\1\u00e2",
            "\1\u00e3",
            "\1\u00e4",
            "\1\u00e5",
            "\1\u00e6",
            "\1\u009e\2\uffff\1\u009f\2\uffff\1\u009d\4\uffff\1\u0098\1\uffff\1\u009c\3\uffff\1\u0099\13\uffff\1\u009b\1\uffff\1\u00a1\14\uffff\1\u009a\6\uffff\1\u00a0\1\uffff\1\u00a2\27\uffff\1\75",
            "\1\u00ed\1\u00ee\1\u00ea\3\uffff\1\u00eb\3\uffff\1\u00e7\4\uffff\1\u00ec\11\uffff\1\u00e9\6\uffff\1\u00ef\6\uffff\1\u00e8\7\uffff\1\u00f0",
            "\1\u00f1",
            "\1\u00f2",
            "\1\u00f3",
            "\1\u00f4",
            "\1\u00f5",
            "\1\u00f6\6\uffff\1\u00f7",
            "\1\u00f8\6\uffff\1\u00f9",
            "\1\u00fa",
            "\1\u00fb",
            "\1\u00fd\61\uffff\1\u00fc",
            "\1\u00fe",
            "\1\u00ff",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u010b",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u010d\1\uffff\1\u010c",
            "\1\u00d9\1\uffff\1\u00d8",
            "\1\u010e",
            "\1\u010f",
            "\1\u0110",
            "\1\u0111",
            "\1\u0112",
            "\1\u0113",
            "\1\u0114",
            "\1\u0115",
            "\1\u0116",
            "\1\u0117",
            "\1\u0118",
            "\1\u0119",
            "\1\u011a",
            "\1\u00d2\2\uffff\1\u00d3\2\uffff\1\u00d1\4\uffff\1\u00cc\1\uffff\1\u00d0\3\uffff\1\u00cd\13\uffff\1\u00cf\1\uffff\1\u00d5\14\uffff\1\u00ce\6\uffff\1\u00d4\1\uffff\1\u00d6\27\uffff\1\75",
            "\1\u0121\1\u0122\1\u011e\3\uffff\1\u011f\3\uffff\1\u011b\4\uffff\1\u0120\11\uffff\1\u011d\6\uffff\1\u0123\6\uffff\1\u011c\7\uffff\1\u0124",
            "\1\u0125",
            "\1\u0126",
            "\1\u0127",
            "\1\u0128",
            "\1\u0129",
            "\1\u012a\6\uffff\1\u012b",
            "\1\u012c\6\uffff\1\u012d",
            "\1\u012e",
            "\1\u012f",
            "\1\u0131\61\uffff\1\u0130",
            "\1\u0132",
            "\1\u0133",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013f",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u0141\1\uffff\1\u0140",
            "\1\u010d\1\uffff\1\u010c",
            "\1\u0142",
            "\1\u0143",
            "\1\u0144",
            "\1\u0145",
            "\1\u0146",
            "\1\u0147",
            "\1\u0148",
            "\1\u0149",
            "\1\u014a",
            "\1\u014b",
            "\1\u014c",
            "\1\u014d",
            "\1\u014e",
            "\1\u0106\2\uffff\1\u0107\2\uffff\1\u0105\4\uffff\1\u0100\1\uffff\1\u0104\3\uffff\1\u0101\13\uffff\1\u0103\1\uffff\1\u0109\14\uffff\1\u0102\6\uffff\1\u0108\1\uffff\1\u010a\27\uffff\1\75",
            "\1\u0155\1\u0156\1\u0152\3\uffff\1\u0153\3\uffff\1\u014f\4\uffff\1\u0154\11\uffff\1\u0151\6\uffff\1\u0157\6\uffff\1\u0150\7\uffff\1\u0158",
            "\1\u0159",
            "\1\u015a",
            "\1\u015b",
            "\1\u015c",
            "\1\u015d",
            "\1\u015e\6\uffff\1\u015f",
            "\1\u0160\6\uffff\1\u0161",
            "\1\u0162",
            "\1\u0163",
            "\1\u0165\61\uffff\1\u0164",
            "\1\u0166",
            "\1\u0167",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u0173",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u0175\1\uffff\1\u0174",
            "\1\u0141\1\uffff\1\u0140",
            "\1\u0176",
            "\1\u0177",
            "\1\u0178",
            "\1\u0179",
            "\1\u017a",
            "\1\u017b",
            "\1\u017c",
            "\1\u017d",
            "\1\u017e",
            "\1\u017f",
            "\1\u0180",
            "\1\u0181",
            "\1\u0182",
            "\1\u013a\2\uffff\1\u013b\2\uffff\1\u0139\4\uffff\1\u0134\1\uffff\1\u0138\3\uffff\1\u0135\13\uffff\1\u0137\1\uffff\1\u013d\14\uffff\1\u0136\6\uffff\1\u013c\1\uffff\1\u013e\27\uffff\1\75",
            "\1\u0189\1\u018a\1\u0186\3\uffff\1\u0187\3\uffff\1\u0183\4\uffff\1\u0188\11\uffff\1\u0185\6\uffff\1\u018b\6\uffff\1\u0184\7\uffff\1\u018c",
            "\1\u018d",
            "\1\u018e",
            "\1\u018f",
            "\1\u0190",
            "\1\u0191",
            "\1\u0192\6\uffff\1\u0193",
            "\1\u0194\6\uffff\1\u0195",
            "\1\u0196",
            "\1\u0197",
            "\1\u0199\61\uffff\1\u0198",
            "\1\u019a",
            "\1\u019b",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a7",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01a9\1\uffff\1\u01a8",
            "\1\u0175\1\uffff\1\u0174",
            "\1\u01aa",
            "\1\u01ab",
            "\1\u01ac",
            "\1\u01ad",
            "\1\u01ae",
            "\1\u01af",
            "\1\u01b0",
            "\1\u01b1",
            "\1\u01b2",
            "\1\u01b3",
            "\1\u01b4",
            "\1\u01b5",
            "\1\u01b6",
            "\1\u016e\2\uffff\1\u016f\2\uffff\1\u016d\4\uffff\1\u0168\1\uffff\1\u016c\3\uffff\1\u0169\13\uffff\1\u016b\1\uffff\1\u0171\14\uffff\1\u016a\6\uffff\1\u0170\1\uffff\1\u0172\27\uffff\1\75",
            "\1\u01bd\1\u01be\1\u01ba\3\uffff\1\u01bb\3\uffff\1\u01b7\4\uffff\1\u01bc\11\uffff\1\u01b9\6\uffff\1\u01bf\6\uffff\1\u01b8\7\uffff\1\u01c0",
            "\1\u01c1",
            "\1\u01c2",
            "\1\u01c3",
            "\1\u01c4",
            "\1\u01c5",
            "\1\u01c6\6\uffff\1\u01c7",
            "\1\u01c8\6\uffff\1\u01c9",
            "\1\u01ca",
            "\1\u01cb",
            "\1\u01cd\61\uffff\1\u01cc",
            "\1\u01ce",
            "\1\u01cf",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01db",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u01dd\1\uffff\1\u01dc",
            "\1\u01a9\1\uffff\1\u01a8",
            "\1\u01de",
            "\1\u01df",
            "\1\u01e0",
            "\1\u01e1",
            "\1\u01e2",
            "\1\u01e3",
            "\1\u01e4",
            "\1\u01e5",
            "\1\u01e6",
            "\1\u01e7",
            "\1\u01e8",
            "\1\u01e9",
            "\1\u01ea",
            "\1\u01a2\2\uffff\1\u01a3\2\uffff\1\u01a1\4\uffff\1\u019c\1\uffff\1\u01a0\3\uffff\1\u019d\13\uffff\1\u019f\1\uffff\1\u01a5\14\uffff\1\u019e\6\uffff\1\u01a4\1\uffff\1\u01a6\27\uffff\1\75",
            "\1\u01f1\1\u01f2\1\u01ee\3\uffff\1\u01ef\3\uffff\1\u01eb\4\uffff\1\u01f0\11\uffff\1\u01ed\6\uffff\1\u01f3\6\uffff\1\u01ec\7\uffff\1\u01f4",
            "\1\u01f5",
            "\1\u01f6",
            "\1\u01f7",
            "\1\u01f8",
            "\1\u01f9",
            "\1\u01fa\6\uffff\1\u01fb",
            "\1\u01fc\6\uffff\1\u01fd",
            "\1\u01fe",
            "\1\u01ff",
            "\1\u0201\61\uffff\1\u0200",
            "\1\u0202",
            "\1\u0203",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020f",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u0211\1\uffff\1\u0210",
            "\1\u01dd\1\uffff\1\u01dc",
            "\1\u0212",
            "\1\u0213",
            "\1\u0214",
            "\1\u0215",
            "\1\u0216",
            "\1\u0217",
            "\1\u0218",
            "\1\u0219",
            "\1\u021a",
            "\1\u021b",
            "\1\u021c",
            "\1\u021d",
            "\1\u021e",
            "\1\u01d6\2\uffff\1\u01d7\2\uffff\1\u01d5\4\uffff\1\u01d0\1\uffff\1\u01d4\3\uffff\1\u01d1\13\uffff\1\u01d3\1\uffff\1\u01d9\14\uffff\1\u01d2\6\uffff\1\u01d8\1\uffff\1\u01da\27\uffff\1\75",
            "\1\u0225\1\u0226\1\u0222\3\uffff\1\u0223\3\uffff\1\u021f\4\uffff\1\u0224\11\uffff\1\u0221\6\uffff\1\u0227\6\uffff\1\u0220\7\uffff\1\u0228",
            "\1\u0229",
            "\1\u022a",
            "\1\u022b",
            "\1\u022c",
            "\1\u022d",
            "\1\u022e\6\uffff\1\u022f",
            "\1\u0230\6\uffff\1\u0231",
            "\1\u0232",
            "\1\u0233",
            "\1\u0235\61\uffff\1\u0234",
            "\1\u0236",
            "\1\u0237",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\u0238",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\75",
            "\1\u023a\1\uffff\1\u0239",
            "\1\u0211\1\uffff\1\u0210",
            "\1\u023b",
            "\1\u023c",
            "\1\u020a\2\uffff\1\u020b\2\uffff\1\u0209\4\uffff\1\u0204\1\uffff\1\u0208\3\uffff\1\u0205\13\uffff\1\u0207\1\uffff\1\u020d\14\uffff\1\u0206\6\uffff\1\u020c\1\uffff\1\u020e\27\uffff\1\75",
            "\1\u023d",
            "\1\u023e",
            "\1\u0240\1\uffff\1\u023f",
            "\1\u023a\1\uffff\1\u0239",
            "\1\u0241",
            "\1\75",
            "\1\u0242",
            "\1\u0240\1\uffff\1\u023f"
    };

    static final short[] dfa_42 = DFA.unpackEncodedString(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final char[] dfa_44 = DFA.unpackEncodedStringToUnsignedChars(dfa_44s);
    static final char[] dfa_45 = DFA.unpackEncodedStringToUnsignedChars(dfa_45s);
    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final short[][] dfa_48 = unpackEncodedStringArray(dfa_48s);

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = dfa_42;
            this.eof = dfa_43;
            this.min = dfa_44;
            this.max = dfa_45;
            this.accept = dfa_46;
            this.special = dfa_47;
            this.transition = dfa_48;
        }
        public String getDescription() {
            return "()* loopback of 10400:7: ( ( rule__InfographicElementType__PicturegraphsAssignment_9 )=> rule__InfographicElementType__PicturegraphsAssignment_9 )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_61 = input.LA(1);

                         
                        int index30_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_InternalIDSLParser()) ) {s = 74;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index30_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_49s = "\15\uffff";
    static final String dfa_50s = "\1\14\14\uffff";
    static final String dfa_51s = "\1\13\14\uffff";
    static final String dfa_52s = "\1\125\14\uffff";
    static final String dfa_53s = "\1\uffff\13\1\1\2";
    static final String dfa_54s = "\1\0\14\uffff}>";
    static final String[] dfa_55s = {
            "\1\2\11\uffff\2\2\2\uffff\1\3\36\uffff\1\13\1\4\5\uffff\1\1\17\uffff\1\5\2\6\1\7\1\10\1\11\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_49 = DFA.unpackEncodedString(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final char[] dfa_51 = DFA.unpackEncodedStringToUnsignedChars(dfa_51s);
    static final char[] dfa_52 = DFA.unpackEncodedStringToUnsignedChars(dfa_52s);
    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final short[][] dfa_55 = unpackEncodedStringArray(dfa_55s);

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10435:2: ( rule__InfographicElementType__UnorderedGroup__1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA32_0 = input.LA(1);

                         
                        int index32_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA32_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA32_0 == Bgpattern || LA32_0 >= Bgcolor && LA32_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA32_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA32_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA32_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA32_0 >= RULE_TEXTID && LA32_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA32_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA32_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA32_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA32_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA32_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA32_0==EOF) ) {s = 12;}

                         
                        input.seek(index32_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 32, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA33 extends DFA {

        public DFA33(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 33;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10447:2: ( rule__InfographicElementType__UnorderedGroup__2 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA33_0 = input.LA(1);

                         
                        int index33_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA33_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA33_0 == Bgpattern || LA33_0 >= Bgcolor && LA33_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA33_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA33_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA33_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA33_0 >= RULE_TEXTID && LA33_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA33_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA33_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA33_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA33_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA33_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA33_0==EOF) ) {s = 12;}

                         
                        input.seek(index33_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 33, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10459:2: ( rule__InfographicElementType__UnorderedGroup__3 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_0 = input.LA(1);

                         
                        int index34_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA34_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA34_0 == Bgpattern || LA34_0 >= Bgcolor && LA34_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA34_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA34_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA34_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA34_0 >= RULE_TEXTID && LA34_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA34_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA34_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA34_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA34_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA34_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA34_0==EOF) ) {s = 12;}

                         
                        input.seek(index34_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10471:2: ( rule__InfographicElementType__UnorderedGroup__4 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_0 = input.LA(1);

                         
                        int index35_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA35_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA35_0 == Bgpattern || LA35_0 >= Bgcolor && LA35_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA35_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA35_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA35_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA35_0 >= RULE_TEXTID && LA35_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA35_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA35_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA35_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA35_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA35_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA35_0==EOF) ) {s = 12;}

                         
                        input.seek(index35_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10483:2: ( rule__InfographicElementType__UnorderedGroup__5 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_0 = input.LA(1);

                         
                        int index36_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA36_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA36_0 == Bgpattern || LA36_0 >= Bgcolor && LA36_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA36_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA36_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA36_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA36_0 >= RULE_TEXTID && LA36_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA36_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA36_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA36_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA36_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA36_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA36_0==EOF) ) {s = 12;}

                         
                        input.seek(index36_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10495:2: ( rule__InfographicElementType__UnorderedGroup__6 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_0 = input.LA(1);

                         
                        int index37_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA37_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA37_0 == Bgpattern || LA37_0 >= Bgcolor && LA37_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA37_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA37_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA37_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA37_0 >= RULE_TEXTID && LA37_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA37_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA37_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA37_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA37_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA37_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA37_0==EOF) ) {s = 12;}

                         
                        input.seek(index37_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10507:2: ( rule__InfographicElementType__UnorderedGroup__7 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA38_0 = input.LA(1);

                         
                        int index38_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA38_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA38_0 == Bgpattern || LA38_0 >= Bgcolor && LA38_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA38_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA38_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA38_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA38_0 >= RULE_TEXTID && LA38_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA38_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA38_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA38_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA38_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA38_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA38_0==EOF) ) {s = 12;}

                         
                        input.seek(index38_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 38, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10519:2: ( rule__InfographicElementType__UnorderedGroup__8 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_0 = input.LA(1);

                         
                        int index39_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA39_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA39_0 == Bgpattern || LA39_0 >= Bgcolor && LA39_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA39_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA39_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA39_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA39_0 >= RULE_TEXTID && LA39_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA39_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA39_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA39_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA39_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA39_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA39_0==EOF) ) {s = 12;}

                         
                        input.seek(index39_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10531:2: ( rule__InfographicElementType__UnorderedGroup__9 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA40_0 = input.LA(1);

                         
                        int index40_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA40_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA40_0 == Bgpattern || LA40_0 >= Bgcolor && LA40_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA40_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA40_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA40_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA40_0 >= RULE_TEXTID && LA40_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA40_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA40_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA40_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA40_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA40_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA40_0==EOF) ) {s = 12;}

                         
                        input.seek(index40_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 40, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = dfa_49;
            this.eof = dfa_50;
            this.min = dfa_51;
            this.max = dfa_52;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_55;
        }
        public String getDescription() {
            return "10543:2: ( rule__InfographicElementType__UnorderedGroup__10 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_0 = input.LA(1);

                         
                        int index41_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA41_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 0) ) {s = 1;}

                        else if ( ( LA41_0 == Bgpattern || LA41_0 >= Bgcolor && LA41_0 <= Bgimage ) && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 1) ) {s = 2;}

                        else if ( LA41_0 == Bgsize && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 2) ) {s = 3;}

                        else if ( LA41_0 == Head && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 3) ) {s = 4;}

                        else if ( LA41_0 == RULE_BOXID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 4) ) {s = 5;}

                        else if ( LA41_0 >= RULE_TEXTID && LA41_0 <= RULE_TITLETEXTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 5) ) {s = 6;}

                        else if ( LA41_0 == RULE_IMAGEID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 6) ) {s = 7;}

                        else if ( LA41_0 == RULE_PIECHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 7) ) {s = 8;}

                        else if ( LA41_0 == RULE_BARCHARTID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 8) ) {s = 9;}

                        else if ( LA41_0 == RULE_PICTUREGRAPHID && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 9) ) {s = 10;}

                        else if ( LA41_0 == Foot && getUnorderedGroupHelper().canSelect(grammarAccess.getInfographicElementTypeAccess().getUnorderedGroup(), 10) ) {s = 11;}

                        else if ( (LA41_0==EOF) ) {s = 12;}

                         
                        input.seek(index41_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_56s = "\1\5\14\uffff";
    static final String dfa_57s = "\1\77\14\uffff";
    static final String dfa_58s = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String[] dfa_59s = {
            "\1\11\1\4\3\uffff\1\7\2\uffff\1\10\2\uffff\1\6\4\uffff\1\1\1\uffff\1\5\3\uffff\1\2\15\uffff\1\13\14\uffff\1\3\6\uffff\1\12\1\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final char[] dfa_57 = DFA.unpackEncodedStringToUnsignedChars(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_56;
            this.max = dfa_57;
            this.accept = dfa_58;
            this.special = dfa_54;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "11675:3: ( ({...}? => ( ( ( rule__Piechart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Piechart__Group_3_11__0 ) ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_0 = input.LA(1);

                         
                        int index77_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA77_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA77_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA77_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA77_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA77_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA77_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA77_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA77_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA77_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA77_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA77_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA77_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                         
                        input.seek(index77_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\16\uffff";
    static final String dfa_61s = "\1\5\15\uffff";
    static final String dfa_62s = "\1\127\15\uffff";
    static final String dfa_63s = "\1\uffff\14\1\1\2";
    static final String dfa_64s = "\1\0\15\uffff}>";
    static final String[] dfa_65s = {
            "\1\11\1\4\3\uffff\1\7\2\uffff\1\10\2\uffff\1\6\4\uffff\1\1\1\uffff\1\5\3\uffff\1\2\15\uffff\1\13\14\uffff\1\3\6\uffff\1\12\1\uffff\1\14\27\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final char[] dfa_61 = DFA.unpackEncodedStringToUnsignedChars(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final short[] dfa_63 = DFA.unpackEncodedString(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[][] dfa_65 = unpackEncodedStringArray(dfa_65s);

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11870:2: ( rule__Piechart__UnorderedGroup_3__1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_0 = input.LA(1);

                         
                        int index78_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA78_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA78_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA78_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA78_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA78_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA78_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA78_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA78_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA78_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA78_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA78_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA78_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA78_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index78_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11882:2: ( rule__Piechart__UnorderedGroup_3__2 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA79_0 = input.LA(1);

                         
                        int index79_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA79_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA79_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA79_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA79_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA79_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA79_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA79_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA79_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA79_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA79_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA79_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA79_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA79_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index79_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 79, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11894:2: ( rule__Piechart__UnorderedGroup_3__3 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA80_0 = input.LA(1);

                         
                        int index80_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA80_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA80_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA80_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA80_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA80_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA80_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA80_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA80_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA80_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA80_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA80_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA80_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA80_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index80_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 80, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11906:2: ( rule__Piechart__UnorderedGroup_3__4 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_0 = input.LA(1);

                         
                        int index81_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA81_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA81_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA81_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA81_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA81_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA81_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA81_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA81_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA81_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA81_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA81_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA81_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA81_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index81_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11918:2: ( rule__Piechart__UnorderedGroup_3__5 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA82_0 = input.LA(1);

                         
                        int index82_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA82_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA82_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA82_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA82_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA82_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA82_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA82_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA82_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA82_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA82_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA82_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA82_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA82_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index82_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 82, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11930:2: ( rule__Piechart__UnorderedGroup_3__6 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_0 = input.LA(1);

                         
                        int index83_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA83_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA83_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA83_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA83_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA83_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA83_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA83_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA83_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA83_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA83_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA83_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA83_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA83_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index83_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11942:2: ( rule__Piechart__UnorderedGroup_3__7 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_0 = input.LA(1);

                         
                        int index84_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA84_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA84_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA84_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA84_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA84_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA84_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA84_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA84_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA84_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA84_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA84_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA84_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA84_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index84_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11954:2: ( rule__Piechart__UnorderedGroup_3__8 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_0 = input.LA(1);

                         
                        int index85_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA85_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA85_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA85_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA85_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA85_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA85_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA85_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA85_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA85_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA85_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA85_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA85_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA85_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index85_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11966:2: ( rule__Piechart__UnorderedGroup_3__9 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA86_0 = input.LA(1);

                         
                        int index86_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA86_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA86_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA86_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA86_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA86_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA86_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA86_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA86_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA86_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA86_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA86_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA86_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA86_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index86_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 86, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11978:2: ( rule__Piechart__UnorderedGroup_3__10 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_0 = input.LA(1);

                         
                        int index87_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA87_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA87_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA87_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA87_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA87_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA87_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA87_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA87_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA87_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA87_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA87_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA87_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA87_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index87_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_61;
            this.max = dfa_62;
            this.accept = dfa_63;
            this.special = dfa_64;
            this.transition = dfa_65;
        }
        public String getDescription() {
            return "11990:2: ( rule__Piechart__UnorderedGroup_3__11 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_0 = input.LA(1);

                         
                        int index88_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA88_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA88_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA88_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA88_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA88_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA88_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA88_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA88_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA88_0 == Showpercentage && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA88_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA88_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA88_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPiechartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( (LA88_0==RULE_END) ) {s = 13;}

                         
                        input.seek(index88_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_66s = "\1\6\15\uffff";
    static final String dfa_67s = "\1\77\15\uffff";
    static final String dfa_68s = "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15";
    static final String[] dfa_69s = {
            "\1\5\3\uffff\1\11\1\uffff\1\4\1\12\2\uffff\1\7\1\10\3\uffff\1\1\1\uffff\1\6\3\uffff\1\2\15\uffff\1\14\14\uffff\1\3\6\uffff\1\13\1\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_66 = DFA.unpackEncodedStringToUnsignedChars(dfa_66s);
    static final char[] dfa_67 = DFA.unpackEncodedStringToUnsignedChars(dfa_67s);
    static final short[] dfa_68 = DFA.unpackEncodedString(dfa_68s);
    static final short[][] dfa_69 = unpackEncodedStringArray(dfa_69s);

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = dfa_60;
            this.eof = dfa_60;
            this.min = dfa_66;
            this.max = dfa_67;
            this.accept = dfa_68;
            this.special = dfa_64;
            this.transition = dfa_69;
        }
        public String getDescription() {
            return "12028:3: ( ({...}? => ( ( ( rule__Barchart__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_10__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_11__0 ) ) ) ) | ({...}? => ( ( ( rule__Barchart__Group_3_12__0 ) ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_0 = input.LA(1);

                         
                        int index89_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA89_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA89_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA89_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA89_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA89_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA89_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA89_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA89_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA89_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA89_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA89_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA89_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA89_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                         
                        input.seek(index89_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_70s = "\17\uffff";
    static final String dfa_71s = "\1\6\16\uffff";
    static final String dfa_72s = "\1\127\16\uffff";
    static final String dfa_73s = "\1\uffff\15\1\1\2";
    static final String dfa_74s = "\1\0\16\uffff}>";
    static final String[] dfa_75s = {
            "\1\5\3\uffff\1\11\1\uffff\1\4\1\12\2\uffff\1\7\1\10\3\uffff\1\1\1\uffff\1\6\3\uffff\1\2\15\uffff\1\14\14\uffff\1\3\6\uffff\1\13\1\uffff\1\15\27\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final char[] dfa_71 = DFA.unpackEncodedStringToUnsignedChars(dfa_71s);
    static final char[] dfa_72 = DFA.unpackEncodedStringToUnsignedChars(dfa_72s);
    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final short[] dfa_74 = DFA.unpackEncodedString(dfa_74s);
    static final short[][] dfa_75 = unpackEncodedStringArray(dfa_75s);

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12238:2: ( rule__Barchart__UnorderedGroup_3__1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_0 = input.LA(1);

                         
                        int index90_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA90_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA90_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA90_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA90_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA90_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA90_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA90_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA90_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA90_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA90_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA90_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA90_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA90_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA90_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index90_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12250:2: ( rule__Barchart__UnorderedGroup_3__2 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA91_0 = input.LA(1);

                         
                        int index91_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA91_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA91_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA91_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA91_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA91_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA91_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA91_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA91_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA91_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA91_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA91_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA91_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA91_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA91_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index91_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 91, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12262:2: ( rule__Barchart__UnorderedGroup_3__3 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA92_0 = input.LA(1);

                         
                        int index92_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA92_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA92_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA92_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA92_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA92_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA92_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA92_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA92_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA92_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA92_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA92_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA92_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA92_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA92_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index92_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 92, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA93 extends DFA {

        public DFA93(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 93;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12274:2: ( rule__Barchart__UnorderedGroup_3__4 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA93_0 = input.LA(1);

                         
                        int index93_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA93_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA93_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA93_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA93_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA93_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA93_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA93_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA93_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA93_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA93_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA93_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA93_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA93_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA93_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index93_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 93, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12286:2: ( rule__Barchart__UnorderedGroup_3__5 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA94_0 = input.LA(1);

                         
                        int index94_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA94_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA94_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA94_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA94_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA94_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA94_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA94_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA94_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA94_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA94_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA94_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA94_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA94_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA94_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index94_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 94, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12298:2: ( rule__Barchart__UnorderedGroup_3__6 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_0 = input.LA(1);

                         
                        int index95_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA95_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA95_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA95_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA95_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA95_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA95_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA95_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA95_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA95_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA95_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA95_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA95_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA95_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA95_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index95_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12310:2: ( rule__Barchart__UnorderedGroup_3__7 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA96_0 = input.LA(1);

                         
                        int index96_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA96_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA96_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA96_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA96_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA96_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA96_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA96_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA96_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA96_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA96_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA96_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA96_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA96_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA96_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index96_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 96, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12322:2: ( rule__Barchart__UnorderedGroup_3__8 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA97_0 = input.LA(1);

                         
                        int index97_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA97_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA97_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA97_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA97_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA97_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA97_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA97_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA97_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA97_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA97_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA97_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA97_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA97_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA97_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index97_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12334:2: ( rule__Barchart__UnorderedGroup_3__9 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA98_0 = input.LA(1);

                         
                        int index98_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA98_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA98_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA98_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA98_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA98_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA98_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA98_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA98_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA98_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA98_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA98_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA98_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA98_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA98_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index98_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 98, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12346:2: ( rule__Barchart__UnorderedGroup_3__10 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA99_0 = input.LA(1);

                         
                        int index99_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA99_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA99_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA99_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA99_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA99_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA99_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA99_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA99_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA99_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA99_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA99_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA99_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA99_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA99_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index99_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 99, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12358:2: ( rule__Barchart__UnorderedGroup_3__11 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA100_0 = input.LA(1);

                         
                        int index100_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA100_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA100_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA100_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA100_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA100_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA100_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA100_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA100_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA100_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA100_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA100_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA100_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA100_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA100_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index100_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 100, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = dfa_70;
            this.eof = dfa_70;
            this.min = dfa_71;
            this.max = dfa_72;
            this.accept = dfa_73;
            this.special = dfa_74;
            this.transition = dfa_75;
        }
        public String getDescription() {
            return "12370:2: ( rule__Barchart__UnorderedGroup_3__12 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_0 = input.LA(1);

                         
                        int index101_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA101_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA101_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA101_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA101_0 == Gridscale && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA101_0 == Legendstyle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA101_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA101_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA101_0 == Showgrid && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA101_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA101_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA101_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( LA101_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 11) ) {s = 12;}

                        else if ( LA101_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getBarchartAccess().getUnorderedGroup_3(), 12) ) {s = 13;}

                        else if ( (LA101_0==RULE_END) ) {s = 14;}

                         
                        input.seek(index101_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_76s = "\1\12\13\uffff";
    static final String dfa_77s = "\1\77\13\uffff";
    static final String[] dfa_78s = {
            "\1\7\2\uffff\1\10\2\uffff\1\6\4\uffff\1\1\1\uffff\1\5\3\uffff\1\2\13\uffff\1\4\1\uffff\1\12\14\uffff\1\3\6\uffff\1\11\1\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_76 = DFA.unpackEncodedStringToUnsignedChars(dfa_76s);
    static final char[] dfa_77 = DFA.unpackEncodedStringToUnsignedChars(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_76;
            this.max = dfa_77;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "12408:3: ( ({...}? => ( ( ( rule__Picturegraph__Group_3_0__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_1__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_2__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_3__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_4__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_5__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_6__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_7__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_8__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_9__0 ) ) ) ) | ({...}? => ( ( ( rule__Picturegraph__Group_3_10__0 ) ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_0 = input.LA(1);

                         
                        int index102_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA102_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA102_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA102_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA102_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA102_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA102_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA102_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA102_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA102_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA102_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA102_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                         
                        input.seek(index102_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\1\12\14\uffff";
    static final String dfa_80s = "\1\127\14\uffff";
    static final String[] dfa_81s = {
            "\1\7\2\uffff\1\10\2\uffff\1\6\4\uffff\1\1\1\uffff\1\5\3\uffff\1\2\13\uffff\1\4\1\uffff\1\12\14\uffff\1\3\6\uffff\1\11\1\uffff\1\13\27\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final short[][] dfa_81 = unpackEncodedStringArray(dfa_81s);

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12588:2: ( rule__Picturegraph__UnorderedGroup_3__1 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA103_0 = input.LA(1);

                         
                        int index103_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA103_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA103_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA103_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA103_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA103_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA103_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA103_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA103_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA103_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA103_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA103_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA103_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index103_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12600:2: ( rule__Picturegraph__UnorderedGroup_3__2 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA104_0 = input.LA(1);

                         
                        int index104_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA104_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA104_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA104_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA104_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA104_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA104_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA104_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA104_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA104_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA104_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA104_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA104_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index104_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 104, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12612:2: ( rule__Picturegraph__UnorderedGroup_3__3 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_0 = input.LA(1);

                         
                        int index105_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA105_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA105_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA105_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA105_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA105_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA105_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA105_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA105_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA105_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA105_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA105_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA105_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index105_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12624:2: ( rule__Picturegraph__UnorderedGroup_3__4 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA106_0 = input.LA(1);

                         
                        int index106_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA106_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA106_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA106_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA106_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA106_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA106_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA106_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA106_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA106_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA106_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA106_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA106_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index106_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 106, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA107 extends DFA {

        public DFA107(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 107;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12636:2: ( rule__Picturegraph__UnorderedGroup_3__5 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA107_0 = input.LA(1);

                         
                        int index107_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA107_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA107_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA107_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA107_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA107_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA107_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA107_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA107_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA107_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA107_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA107_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA107_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index107_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 107, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12648:2: ( rule__Picturegraph__UnorderedGroup_3__6 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA108_0 = input.LA(1);

                         
                        int index108_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA108_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA108_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA108_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA108_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA108_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA108_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA108_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA108_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA108_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA108_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA108_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA108_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index108_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 108, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12660:2: ( rule__Picturegraph__UnorderedGroup_3__7 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA109_0 = input.LA(1);

                         
                        int index109_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA109_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA109_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA109_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA109_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA109_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA109_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA109_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA109_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA109_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA109_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA109_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA109_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index109_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12672:2: ( rule__Picturegraph__UnorderedGroup_3__8 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA110_0 = input.LA(1);

                         
                        int index110_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA110_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA110_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA110_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA110_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA110_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA110_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA110_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA110_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA110_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA110_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA110_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA110_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index110_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 110, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12684:2: ( rule__Picturegraph__UnorderedGroup_3__9 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_0 = input.LA(1);

                         
                        int index111_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA111_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA111_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA111_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA111_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA111_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA111_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA111_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA111_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA111_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA111_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA111_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA111_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index111_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = dfa_49;
            this.eof = dfa_49;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_53;
            this.special = dfa_54;
            this.transition = dfa_81;
        }
        public String getDescription() {
            return "12696:2: ( rule__Picturegraph__UnorderedGroup_3__10 )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_0 = input.LA(1);

                         
                        int index112_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( LA112_0 == Bgcolor && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 0) ) {s = 1;}

                        else if ( LA112_0 == Colors && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 1) ) {s = 2;}

                        else if ( LA112_0 == Data && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 2) ) {s = 3;}

                        else if ( LA112_0 == Label && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 3) ) {s = 4;}

                        else if ( LA112_0 == Padding && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 4) ) {s = 5;}

                        else if ( LA112_0 == Position && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 5) ) {s = 6;}

                        else if ( LA112_0 == Showlegend && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 6) ) {s = 7;}

                        else if ( LA112_0 == Showtitle && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 7) ) {s = 8;}

                        else if ( LA112_0 == Size && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 8) ) {s = 9;}

                        else if ( LA112_0 == Title && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 9) ) {s = 10;}

                        else if ( LA112_0 == Type && getUnorderedGroupHelper().canSelect(grammarAccess.getPicturegraphAccess().getUnorderedGroup_3(), 10) ) {s = 11;}

                        else if ( (LA112_0==RULE_END) ) {s = 12;}

                         
                        input.seek(index112_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x1020084470000000L,0x0000000000000808L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x0000000000000000L,0x0000000002002000L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400002L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x2800020000650800L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0080041100018000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0400010004000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x001FF00800000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x2000000000010000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x2000000000610800L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0080041100018100L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x2000000000010000L,0x0000000000000010L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0xA040020008A12460L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000102L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0000002000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0xA040020008A33440L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000080080L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0xA040028008A12400L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000004000L,0x0000000000000001L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x6000000000010000L,0x0000000000400002L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x0000000000600800L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x1020084470000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000081100210L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000002L,0x0000000000030000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000002L,0x0000000000080000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x8300000002600802L,0x00000000003F8000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x2800020000650802L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0080041100018002L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x2000000000010002L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x2000000000610802L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0080041100018102L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x2000000000010002L,0x0000000000000010L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0xA040020008A12462L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0xA040020008A33442L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0xA040028008A12402L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x6000000000010002L,0x0000000000400002L});

}
